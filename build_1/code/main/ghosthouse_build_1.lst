#[1]   ghosthouse_build_1.asm
   17                     
   18                     ; Uncomment the line below for visual benchmarking.
   19                     ; DEBUG_BENCHMARK = 1
   20                     
   21                     ;..................................................
   22                     ;                                                 .
   23                     ;  Logical Memory Map:                            .
   24                     ;                                                 .
   25                     ;            $0000 = Hardware bank                .
   26                     ;            $2000 = Sys Ram                      .
   27                     ;            $4000 = Subcode                      .
   28                     ;            $6000 = Data 0 / Cont. of Subcode    .
   29                     ;            $8000 = Data 1                       .
   30                     ;            $A000 = Data 2                       .
   31                     ;            $C000 = Main                         .
   32                     ;            $E000 = Fixed Libray                 .
   33                     ;                                                 .
   34                     ;..................................................
   35                     
   36                     
   37                     ;/////////////////////////////////////////////////////////////////////////////////
   38                     ;/////////////////////////////////////////////////////////////////////////////////
   39                     ;/////////////////////////////////////////////////////////////////////////////////
   40                     ;
   41                     ;//  Vars
   42                     
   43                     
   44                         ;// Varibles defines
#[2]   ../base_func/vars.inc
   45                         .include "../base_func/vars.inc"
    1                     
    2                     
    3           2000          .zp
    4                     
    5  --:2000                    R0:        .ds 2
    6  --:2002                    R1:        .ds 2
    7  --:2004                    R2:        .ds 2
    8  --:2006                    R3:        .ds 2
    9  --:2008                    R4:        .ds 2
   10  --:200A                    R5:        .ds 2
   11  --:200C                    R6:        .ds 2
   12  --:200E                    R7:        .ds 2
   13  --:2010                    R8:        .ds 2
   14  --:2012                    A0:        .ds 2
   15  --:2014                    A1:        .ds 2
   16  --:2016                    A2:        .ds 2
   17  --:2018                    A3:        .ds 2
   18  --:201A                    A4:        .ds 2
   19  --:201C                    A5:        .ds 2
   20  --:201E                    A6:        .ds 2
   21  --:2020                    A7:        .ds 2
   22  --:2022                    A8:        .ds 2
   23  --:2024                    D0:        .ds 2
   24  --:2026                    D1:        .ds 2
   25  --:2028                    D2:        .ds 2
   26  --:202A                    D3:        .ds 2
   27  --:202C                    D4:        .ds 2
   28  --:202E                    D5:        .ds 2
   29  --:2030                    D6:        .ds 2
   30  --:2032                    D7:        .ds 2
   31  --:2034                    D8:        .ds 2
   32  --:2036                    M0:        .ds 1      ;MPR 2
   33  --:2037                    M1:        .ds 1      ;MPR 3
   34  --:2038                    M2:        .ds 1      ;MPR 4
   35  --:2039                    M3:        .ds 1      ;MPR 5
   36  --:203A                    M4:        .ds 1      ;MPR 6
   37  --:203B                    M5:        .ds 1      ;MPR 7
   38                     
   39  --:203C                    EAX0:      .ds 4
   40  --:2040                    EAX1:      .ds 4
   41  --:2044                    EAX2:      .ds 4
   42  --:2048                    EAX3:      .ds 4
   43                     
   44           2012      A0.l  .equ  A0
   45           2013      A0.h  .equ  A0+1
   46           2014      A1.l  .equ  A1
   47           2015      A1.h  .equ  A1+1
   48           2016      A2.l  .equ  A2
   49           2017      A2.h  .equ  A2+1
   50           2018      A3.l  .equ  A3
   51           2019      A3.h  .equ  A3+1
   52           201A      A4.l  .equ  A4
   53           201B      A4.h  .equ  A4+1
   54           201C      A5.l  .equ  A5
   55           201D      A5.h  .equ  A5+1
   56           201E      A6.l  .equ  A6
   57           201F      A6.h  .equ  A6+1
   58           2020      A7.l  .equ  A7
   59           2021      A7.h  .equ  A7+1
   60                     
   61           2024      D0.l  .equ  D0
   62           2025      D0.h  .equ  D0+1
   63           2026      D1.l  .equ  D1
   64           2027      D1.h  .equ  D1+1
   65           2028      D2.l  .equ  D2
   66           2029      D2.h  .equ  D2+1
   67           202A      D3.l  .equ  D3
   68           202B      D3.h  .equ  D3+1
   69           202C      D4.l  .equ  D4
   70           202D      D4.h  .equ  D4+1
   71           202E      D5.l  .equ  D5
   72           202F      D5.h  .equ  D5+1
   73           2030      D6.l  .equ  D6
   74           2031      D6.h  .equ  D6+1
   75           2032      D7.l  .equ  D7
   76           2033      D7.h  .equ  D7+1
   77                     
   78           2000      R0.l  .equ  R0
   79           2001      R0.h  .equ  R0+1
   80           2002      R1.l  .equ  R1
   81           2003      R1.h  .equ  R1+1
   82           2004      R2.l  .equ  R2
   83           2005      R2.h  .equ  R2+1
   84           2006      R3.l  .equ  R3
   85           2007      R3.h  .equ  R3+1
   86           2008      R4.l  .equ  R4
   87           2009      R4.h  .equ  R4+1
   88           200A      R5.l  .equ  R5
   89           200B      R5.h  .equ  R5+1
   90           200C      R6.l  .equ  R6
   91           200D      R6.h  .equ  R6+1
   92           200E      R7.l  .equ  R7
   93           200F      R7.h  .equ  R7+1
   94                     
   95           203C      EAX0.l = EAX0
   96           203D      EAX0.m = EAX0+1
   97           203E      EAX0.h = EAX0+2
   98           203F      EAX0.u = EAX0+3
   99                     
  100           2040      EAX1.l = EAX1
  101           2041      EAX1.m = EAX1+1
  102           2042      EAX1.h = EAX1+2
  103           2043      EAX1.u = EAX1+3
  104                     
  105           2044      EAX2.l = EAX2
  106           2045      EAX2.m = EAX2+1
  107           2046      EAX2.h = EAX2+2
  108           2047      EAX2.u = EAX2+3
  109                     
  110           2048      EAX3.l = EAX3
  111           2049      EAX3.m = EAX3+1
  112           204A      EAX3.h = EAX3+2
  113           204B      EAX3.u = EAX3+3
  114                     
  115                     
  116           2200          .bss
  117                     
  118  --:2200                    int__dma_block:         .ds 1+2+2+2+1
  119                     
  120           2200      int__dma_block.type   = int__dma_block
  121           2201      int__dma_block.source = int__dma_block + 1
  122           2203      int__dma_block.dest   = int__dma_block + 1 + 2
  123           2205      int__dma_block.len    = int__dma_block + 1 + 2 + 2
  124           2207      int__dma_block.rts    = int__dma_block + 1 + 2 + 2 + 2
  125                     
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vdc/vars.inc
   46                         .include "../base_func/video/vdc/vars.inc"
    1                     
    2           2208          .bss
    3                     
    4  --:2208                    __vblank:       .ds 1
    5                     
    6           204C          .zp
    7                     
    8  --:204C                    vdc_reg:        .ds 1
    9  --:204D                    vdc_status:     .ds 1
   10                     
   11  --:204E                    _BXR:           .ds 2
   12  --:2050                    _BYR:           .ds 2
   13  --:2052                    _RCR:           .ds 2
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vdc/sprites/vars.inc
   47                         .include "../base_func/video/vdc/sprites/vars.inc"
    1                     ;//.......................................................
    2                     ;                                                        .
    3                     ;   Sprite structures in memory                          .
    4                     ;                                                        .
    5                     ;                                                        .
    6                     ;.........................................................
    7                     
#[3]   ../base_func/video/vdc/sprites/equ.inc
    8                         .include "../base_func/video/vdc/sprites/equ.inc"
    1           0060      SpriteGroupSize = 64 + 32
    2                     
    3                     ;sprite attributes
    4           8000      V_FLIP     = %1000000000000000
    5           0800      H_FLIP     = %0000100000000000
    6           0000      NO_V_FLIP  = %0000000000000000
    7           0000      NO_H_FLIP  = %0000000000000000
    8           7FFF      INV_V_FLIP = %0111111111111111
    9           F7FF      INV_H_FLIP = %1111011111111111
   10           0000      SIZE16_16  = %0000000000000000
   11           1000      SIZE16_32  = %0001000000000000
   12           3000      SIZE16_64  = %0011000000000000
   13           0100      SIZE32_16  = %0000000100000000
   14           1100      SIZE32_32  = %0001000100000000
   15           3100      SIZE32_64  = %0011000100000000
   16           0000      PRIOR_L    = %0000000000000000
   17           0080      PRIOR_H    = %0000000010000000
   18           0000      SPAL0      = %0000000000000000
   19           0001      SPAL1      = %0000000000000001
   20           0002      SPAL2      = %0000000000000010
   21           0003      SPAL3      = %0000000000000011
   22           0004      SPAL4      = %0000000000000100
   23           0005      SPAL5      = %0000000000000101
   24           0006      SPAL6      = %0000000000000110
   25           0007      SPAL7      = %0000000000000111
   26           0008      SPAL8      = %0000000000001000
   27           0009      SPAL9      = %0000000000001001
   28           000A      SPAL10     = %0000000000001010
   29           000B      SPAL11     = %0000000000001011
   30           000C      SPAL12     = %0000000000001100
   31           000D      SPAL13     = %0000000000001101
   32           000E      SPAL14     = %0000000000001110
   33           000F      SPAL15     = %0000000000001111
   34                     
#[2]   ../base_func/video/vdc/sprites/vars.inc
    9           2209          .bss
   10                     
   11                         ;..................................................
   12                     
   13  --:2209                cell.Y.lo:                      .ds SpriteGroupSize
   14  --:2269                cell.Y.hi:                      .ds SpriteGroupSize
   15                     
   16  --:22C9                cell.X.lo:                      .ds SpriteGroupSize
   17  --:2329                cell.X.hi:                      .ds SpriteGroupSize
   18                     
   19  --:2389                cell.attribs.lo:                .ds SpriteGroupSize
   20  --:23E9                cell.attribs.hi:                .ds SpriteGroupSize
   21                     
   22  --:2449                cell.pattern.lo:                .ds SpriteGroupSize
   23  --:24A9                cell.pattern.hi:                .ds SpriteGroupSize
   24                     
   25  --:2509                SATB.vramAddr:                  .ds 2
   26                     
   27  --:250B                SATB.openslot:                  .ds 1
   28                     
   29  --:250C                SATB.openslot.hpriority:       .ds 1
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/irq_controller/vars.inc
   48                         .include "../base_func/IO/irq_controller/vars.inc"
    1                     
    2           2054          .zp
    3                     
    4  --:2054                    vector_mask:    .ds 1
    5                     
    6                     
    7  --:2055                    vdc_vect:       .ds 2
    8  --:2057                    brk_vect:       .ds 2
    9  --:2059                    timer_vect:     .ds 2
   10  --:205B                    vdc_vsync:      .ds 2
   11  --:205D                    vdc_hsync:      .ds 2
   12                     
   13           2055      irq_vector_list = vdc_vect
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/audio/wsg/vars.inc
   49                         .include "../base_func/audio/wsg/vars.inc"
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/gamepad/vars.inc
   50                         .include "../base_func/IO/gamepad/vars.inc"
    1                     
    2                     
    3           250D          .bss
    4                     
    5                             ;//The current button state.
    6                     
    7  --:250D                    b1_status:  .ds 1
    8  --:250E                    b2_status:  .ds 1
    9  --:250F                    sl_status:  .ds 1
   10  --:2510                    st_status:  .ds 1
   11  --:2511                    up_status:  .ds 1
   12  --:2512                    dn_status:  .ds 1
   13  --:2513                    lf_status:  .ds 1
   14  --:2514                    rh_status:  .ds 1
#[1]   ghosthouse_build_1.asm
   51                     
   52                     
#[2]   ../lib/controls/vars.inc
   53                         .include "../lib/controls/vars.inc"
    1                     
    2                     
    3           2515        .bss
    4                     
    5                                                     ; The amount of time between the button physically pressed and registered as pressed.
    6  --:2515                    b1_delay:      .ds 1
    7  --:2516                    b2_delay:      .ds 1
    8  --:2517                    sl_delay:      .ds 1
    9  --:2518                    st_delay:      .ds 1
   10  --:2519                    up_delay:      .ds 1
   11  --:251A                    dn_delay:      .ds 1
   12  --:251B                    lf_delay:      .ds 1
   13  --:251C                    rh_delay:      .ds 1
   14                     
   15  --:251D                    b1_counter:    .ds 1
   16  --:251E                    b2_counter:    .ds 1
   17  --:251F                    sl_counter:    .ds 1
   18  --:2520                    st_counter:    .ds 1
   19  --:2521                    up_counter:    .ds 1
   20  --:2522                    dn_counter:    .ds 1
   21  --:2523                    lf_counter:    .ds 1
   22  --:2524                    rh_counter:    .ds 1
   23                     
   24                                                     ; The transition state of each button; [null, just pressed, held, just released]
   25  --:2525                    input_state:   .ds 2
#[1]   ghosthouse_build_1.asm
#[2]   ../lib/random/16bit/vars.inc
   54                         .include "../lib/random/16bit/vars.inc"
    1                     
    2                     
    3                     
    4           2527        .bss
    5                     
    6  --:2527              random.RNG:   .ds 2
    7                     
    8                     
    9           2527      random.RNG.lo = random.RNG
   10           2528      random.RNG.hi = random.RNG + 1
   11                     
#[1]   ghosthouse_build_1.asm
   55                     
#[2]   ../demo/vars.inc
   56                         .include "../demo/vars.inc"
    1           2529          .bss
    2                     
    3  --:2529                songTrack:          .ds 1
    4  --:252A                songTrackLen:       .ds 1
    5                     
    6  --:252B                scrollDirection:    .ds 1
    7                     
    8  --:252C                ghost.pos.x:        .ds 2
    9  --:252E                ghost.pos.y:        .ds 2
   10                     
   11  --:2530                ghostOld.pos.x:     .ds 2
   12  --:2532                ghostOld.pos.y:     .ds 2
   13                     
   14  --:2534                screen.tile.addr:   .ds 2            
   15                     
   16  --:2536                ghostFrame:         .ds 1
   17  --:2537                ghostFrameOld:      .ds 1
#[1]   ghosthouse_build_1.asm
   57                     
   58                     ;....................................
   59           E000          .code
   60                     
   61           0000          .bank $00, "Fixed Lib/Start up"
   62           E000          .org $e000
   63                     ;....................................
   64                     
   65                     ;/////////////////////////////////////////////////////////////////////////////////
   66                     ;/////////////////////////////////////////////////////////////////////////////////
   67                     ;/////////////////////////////////////////////////////////////////////////////////
   68                     ;
   69                     ;// Support files: equates and macros
   70                     
   71                         ;// Support files for MAIN
#[2]   ../base_func/base.inc
   72                         .include "../base_func/base.inc"
    1                     
    2                     
#[3]   ../base_func/equ.inc
    3                     include "../base_func/equ.inc"
    1                     
    2                     ; Txx
    3           00D3      in_DMA = $D3
    4           00E3      ia_DMA = $E3
    5           0073      ii_DMA = $73
    6           00C3      dd_DMA = $C3
    7           00F3      ai_DMA = $F3
    8           0060      rts_DMA = $60
    9                     
   10                     ; MPR slots
   11           0000      MPR0 = 0
   12           0001      MPR1 = 1
   13           0002      MPR2 = 2
   14           0003      MPR3 = 3
   15           0004      MPR4 = 4
   16           0005      MPR5 = 5
   17           0006      MPR6 = 6
   18           0007      MPR7 = 7
   19                     
   20                     
   21           0001      AX = $ffff0001
   22           0002      AY = $ffff0002
   23           0003      XY = $ffff0003
   24           0003      AXY = $ffff0003
   25                     
#[2]   ../base_func/base.inc
    4                     
    5                     ;................................................
    6                     INC_BIT .macro
    7                     
    8                         lda \1
    9                         inc a
   10                         and #$01
   11                         sta \1
   12                     
   13                         .endm
   14                     
   15                     ;................................................
   16                     CallFar    .macro
   17                                     tma #page(\1)
   18                                     pha
   19                     
   20                                     lda #bank(\1)
   21                                     tam #page(\1)
   22                                     jsr \1
   23                     
   24                                     pla
   25                                     tam #page(\1)
   26                     
   27                         .endm
   28                     
   29                     ;................................................
   30                     CallFar.AXY    .macro
   31                                     sta <R0
   32                                     tma #page(\1)
   33                                     pha
   34                     
   35                                     lda #bank(\1)
   36                                     tam #page(\1)
   37                                     lda <R0
   38                                     pha
   39                                     phx
   40                                     phy
   41                                     jsr \1
   42                     
   43                                     pla
   44                                     tam #page(\1)
   45                     
   46                         .endm
   47                     
   48                     CallFarDoubleBank    .macro
   49                                     tma #page(\1)
   50                                     pha
   51                                     tma #page(\1) + 1
   52                                     pha
   53                     
   54                                     lda #bank(\1)
   55                                     tam #page(\1)
   56                                     inc a
   57                                     tam #page(\1) + 1
   58                                     jsr \1
   59                     
   60                                     pla
   61                                     tam #page(\1) + 1
   62                                     pla
   63                                     tam #page(\1)
   64                     
   65                         .endm
   66                     
   67                     CallFarWide    .macro
   68                                     tma #page(\1)
   69                                     pha
   70                                     tma #page(\1) + 1
   71                                     pha
   72                     
   73                                     lda #bank(\1)
   74                                     tam #page(\1)
   75                                     inc a
   76                                     tam #page(\1) + 1
   77                                     jsr \1
   78                     
   79                                     pla
   80                                     tam #page(\1) + 1
   81                                     pla
   82                                     tam #page(\1)
   83                     
   84                         .endm
   85                     
   86                     
   87                     ;................................................
   88                     CLEAR.REG .macro
   89                     
   90                         cla
   91                         cly
   92                         clx
   93                     
   94                         .endm
   95                     
   96                     ;................................................
   97                     PUSH.all .macro
   98                     
   99                         pha
  100                         phy
  101                         phx
  102                     
  103                         .endm
  104                     
  105                     ;................................................
  106                     PULL.all .macro
  107                     
  108                         plx
  109                         ply
  110                         pla
  111                     
  112                         .endm
  113                     
  114                     
  115                     ;................................................
  116                     PUSH.addr .macro
  117                     
  118                         lda #>(\1 - 1)
  119                         pha
  120                         lda #<(\1 - 1)
  121                         pha
  122                     
  123                         .endm
  124                     
  125                     ;................................................
  126                     jsr.ind .macro
  127                         PUSH.addr .return_\@
  128                             jmp [\1]
  129                     .return_\@
  130                       .endm
  131                     
  132                     ;................................................
  133                     jsr.ind.x .macro
  134                         PUSH.addr .return_\@
  135                             jmp [\1,x]
  136                     .return_\@
  137                       .endm
  138                     
  139                     ;................................................
  140                     Interrupts.disable  .macro
  141                         sei
  142                       .endm
  143                     
  144                     ;................................................
  145                     Interrupts.enable  .macro
  146                         cli
  147                       .endm
  148                     
  149                     
  150                     ;................................................
  151                     MAP_BANK        .macro                ;8k
  152                     
  153                         .if (\?1=2)
  154                         lda #bank(\1)
  155                         tam #(\2)
  156                         .endif
  157                     
  158                         .if (\?1=3)
  159                         lda \1
  160                         tam #(\2)
  161                         .endif
  162                     
  163                         .if (\?1=6)
  164                         lda \1
  165                         tam #(\2)
  166                         .endif
  167                     
  168                         .if (\?1=1)
  169                         tam #(\2)
  170                         .endif
  171                     
  172                         .endm
  173                     
  174                     MAP_BANK.2        .macro        ;16k
  175                     
  176                         .if (\?1=2)
  177                         lda #bank(\1)
  178                         tam #(\2)
  179                         inc a
  180                         tam #(\2 + 1)
  181                         .endif
  182                     
  183                         .if (\?1=3)
  184                         lda \1
  185                         tam #(\2)
  186                         inc a
  187                         tam #(\2 + 1)
  188                         .endif
  189                     
  190                         .if (\?1=6)
  191                         lda \1
  192                         tam #(\2)
  193                         inc a
  194                         tam #(\2 + 1)
  195                         .endif
  196                     
  197                         .if (\?1=1)
  198                         tam #(\2)
  199                         inc a
  200                         tam #(\2 + 1)
  201                         .endif
  202                     
  203                         .endm
  204                     
  205                     MAP_BANK.3        .macro        ;24k
  206                     
  207                         lda #bank(\1)
  208                         tam #(\2)
  209                         inc a
  210                         tam #(\2 + 1)
  211                         inc a
  212                         tam #(\2 + 2)
  213                     
  214                         .endm
  215                     
  216                     MAP_BANK.4        .macro    ;32k
  217                     
  218                         lda #bank(\1)
  219                         tam #(\2)
  220                         inc a
  221                         tam #(\2 + 1)
  222                         inc a
  223                         tam #(\2 + 2)
  224                         inc a
  225                         tam #(\2 + 3)
  226                     
  227                         .endm
  228                     
  229                     
  230                     ;................................................
  231                     LEA        .macro
  232                     
  233                         lda #low(\1)
  234                         sta <(\3)
  235                         lda #high((\1 & $1fff)+ \2)
  236                         sta <(\3 + 1)
  237                     
  238                         .endm
  239                     
  240                     LEA.l            .macro
  241                     
  242                         if (\3 = AXY)
  243                             lda #low(\1)
  244                             ldx #high((\1 & $1fff)+ \2)
  245                             ldy #bank(\1)
  246                         .else
  247                             lda #low(\1)
  248                             sta (\3)
  249                             lda #high((\1 & $1fff)+ \2)
  250                             sta (\3 + 1)
  251                             lda #bank(\1)
  252                             sta (\3 + 2)
  253                         .endif
  254                         .endm
  255                     
  256                     
  257                     LEB            .macro
  258                     
  259                         lda #bank(\1)
  260                         sta (\2)
  261                     
  262                         .endm
  263                     
  264                     
  265                     ;................................................
  266                     INC.w        .macro
  267                                 inc \1
  268                                 bne .x_\@
  269                                 inc \1 + 1
  270                     .x_\@
  271                         .endm
  272                     
  273                     ;................................................
  274                     DEC.w        .macro
  275                                 lda \1
  276                                 sec
  277                                 sbc #$01
  278                                 sta \1
  279                                 lda \1 + 1
  280                                 sbc #$00
  281                                 sta \1 + 1
  282                         .endm
  283                     
  284                     ;//................................................
  285                     ;// MOVE macros
  286                     
  287                     ;......................
  288                     ; MOVE.byte source, destination
  289                     MOVE.b    .macro
  290                         .if (\#=0)
  291                         .fail Macro requires two arguments
  292                         .endif
  293                     
  294                         .if (\#=1)
  295                         .fail Macro requires two arguments
  296                         .endif
  297                     
  298                         .if (\#>2)
  299                         .fail Macro requires two arguments
  300                         .endif
  301                     
  302                     
  303                         .if (\?1=2)
  304                         lda \1
  305                         sta \2
  306                         .endif
  307                     
  308                         .if (\?1=3)
  309                         lda \1
  310                         sta \2
  311                         .endif
  312                     
  313                         .if (\?1=4)
  314                         lda \1
  315                         sta \2
  316                         .endif
  317                     
  318                         .if (\?1=6)
  319                         lda \1
  320                         sta \2
  321                         .endif
  322                     
  323                     ;    .if (\?1=5)
  324                     ;        .if (\5='Acc')
  325                     ;        sta \2
  326                     ;        .endif
  327                     ;        .if (\5='IX')
  328                     ;        stx \2
  329                     ;        .endif
  330                     ;        .if (\5='IY')
  331                     ;        sty \2
  332                     ;        .endif
  333                     ;    .endif
  334                     
  335                         .endm
  336                     
  337                     ;......................
  338                     ; MOVE.byte source, destination
  339                     MOVE.b.w    .macro
  340                         .if (\#=0)
  341                         .fail Macro requires two arguments
  342                         .endif
  343                     
  344                         .if (\#=1)
  345                         .fail Macro requires two arguments
  346                         .endif
  347                     
  348                         .if (\#>2)
  349                         .fail Macro requires two arguments
  350                         .endif
  351                     
  352                         .if (\?2=2)
  353                         .fail destination cannot be an immediate
  354                         .endif
  355                     
  356                         .if (\?2=1)
  357                         .fail destination cannot be a huc6280 register
  358                         .endif
  359                     
  360                         .if (\?2=5)
  361                         .fail destination cannot be a 'string'
  362                         .endif
  363                     
  364                     
  365                         .if (\?2=3)
  366                                 lda \1
  367                                 sta \2
  368                                 lda #$00
  369                                 sta \2 + 1
  370                         .endif
  371                     
  372                         .if (\?2=4)
  373                                 lda \1
  374                                 sta \2
  375                                 lda #$00
  376                                 ldy #$01
  377                                 sta \2,y
  378                         .endif
  379                     
  380                         .if (\?2=6)
  381                                 lda \1
  382                                 sta \2
  383                                 lda #$00
  384                                 sta \2 + 1
  385                         .endif
  386                     
  387                     
  388                         .endm
  389                     
  390                     
  391                     ;......................
  392                     ; MOVE.byte source, destination
  393                     MOVEA.b    .macro
  394                         ;.fail \?1
  395                         .if (\#=0)
  396                         .fail Macro requires one arguments
  397                         .endif
  398                     
  399                     
  400                         .if (\#>1)
  401                         .fail Macro requires one arguments
  402                         .endif
  403                     
  404                     
  405                         .if (\?1=1)
  406                         .fail Cannot use A,X, or Y registers as source
  407                         .endif
  408                     
  409                         ;source=#
  410                         .if (\?1=2)
  411                         lda #low(\1)
  412                         .endif
  413                     
  414                         ;source=full ADDR
  415                         .if (\?1=3)
  416                         lda \1
  417                         .endif
  418                     
  419                         ;source=indirect
  420                         .if (\?1=4)
  421                         lda \1
  422                         .endif
  423                     
  424                         ;source=string
  425                         .if (\?1=5)
  426                         .fail Cant use strings as arguments.
  427                         .endif
  428                     
  429                         ;source=label as direct address
  430                         .if (\?1=6)
  431                         lda \1
  432                         .endif
  433                     
  434                     
  435                         .endm
  436                     
  437                     ;......................
  438                     ; MOVE.word source, destination
  439                     MOVE.w    .macro
  440                         ;.fail \?1
  441                         .if (\#=0)
  442                         .fail Macro requires two arguments
  443                         .endif
  444                     
  445                         .if (\#=1)
  446                         .fail Macro requires two arguments
  447                         .endif
  448                     
  449                         .if (\#>2)
  450                         .fail Macro requires two arguments
  451                         .endif
  452                     
  453                     
  454                         .if (\?1=1)
  455                         .fail Cannot use A,X, or Y registers as source
  456                         .endif
  457                     
  458                         ;source=#
  459                         .if (\?1=2 & \2 != AX)
  460                         lda #low(\1)
  461                         sta \2
  462                         lda #high(\1)
  463                         sta \2 + 1
  464                         .endif
  465                     
  466                         .if (\2 = AX & \?1 = 2)
  467                         ldx #low(\1)
  468                         lda #high(\1)
  469                         .endif
  470                     
  471                         .if (\2 = AX & (\?1 = 3 | \?1 = 6))
  472                         ldx \1
  473                         lda \1 + 1
  474                         .endif
  475                     
  476                         .if (\2 = AY & \?1 = 2)
  477                         ldy #low(\1)
  478                         lda #high(\1)
  479                         .endif
  480                     
  481                         .if (\2 = AY & (\?1 = 3 | \?1 = 6))
  482                         ldy \1
  483                         lda \1 + 1
  484                         .endif
  485                     
  486                         .if (\2 = XY & \?1 = 2)
  487                         ldy #low(\1)
  488                         ldx #high(\1)
  489                         .endif
  490                     
  491                         .if (\2 = XY & (\?1 = 3 | \?1 = 6))
  492                         ldy \1
  493                         ldx \1 + 1
  494                         .endif
  495                     
  496                     
  497                         ;source=full ADDR
  498                         .if (\?1=3 & \2 != AX )
  499                         lda \1
  500                         sta \2
  501                         lda \1 + 1
  502                         sta \2 + 1
  503                         .endif
  504                     
  505                         ;source=indirect
  506                         .if (\?1=4 & \2 != AX )
  507                         lda \1
  508                         sta \2
  509                         phy
  510                         ldy #$01
  511                         lda \1,y
  512                         ply
  513                         sta \2 + 1
  514                         .endif
  515                     
  516                         ;source=string
  517                         .if (\?1=5)
  518                         .fail Cant use strings as arguments.
  519                         .endif
  520                     
  521                         ;source=label as direct address
  522                         .if (\?1=6 & \2 != AX )
  523                         lda \1
  524                         sta \2
  525                         lda \1 + 1
  526                         sta \2 + 1
  527                         .endif
  528                     
  529                     
  530                         .endm
  531                     
  532                     ;......................
  533                     ; MOVE.word source, destination
  534                     MOVE.w.add    .macro
  535                     
  536                         .if (\#<3)
  537                         .fail Macro requires three arguments
  538                         .endif
  539                     
  540                         .if (\#>3)
  541                         .fail Macro requires three arguments
  542                         .endif
  543                     
  544                     
  545                         .if (\?1=1)
  546                         .fail Cannot use A,X, or Y registers as source
  547                         .endif
  548                     
  549                         ;source=#
  550                         .if (\?1=2)
  551                         lda #low(\1+\3)
  552                         sta \2
  553                         lda #high(\1+\3)
  554                         sta \2 + 1
  555                         .endif
  556                     
  557                         ;source=full ADDR
  558                         .if (\?1=3)
  559                         lda \1
  560                         clc
  561                         adc #low(\3)
  562                         sta \2
  563                         lda \1 + 1
  564                         adc #high(\3)
  565                         sta \2 + 1
  566                         .endif
  567                     
  568                         ;source=indirect
  569                         .if (\?1=4)
  570                         lda \1
  571                         clc
  572                         adc #low(\3)
  573                         sta \2
  574                         phy
  575                         ldy #$01
  576                         lda \1,y
  577                         adc #high(\3)
  578                         ply
  579                         sta \2 + 1
  580                         .endif
  581                     
  582                         ;source=string
  583                         .if (\?1=5)
  584                         .fail Cant use strings as arguments.
  585                         .endif
  586                     
  587                         ;source=label as direct address
  588                         .if (\?1=6)
  589                         lda \1
  590                         clc
  591                         adc #low(\3)
  592                         sta \2
  593                         lda \1 + 1
  594                         adc #high(\3)
  595                         sta \2 + 1
  596                         .endif
  597                     
  598                     
  599                         .endm
  600                     
  601                     
  602                     ;......................
  603                     ; MOVE.X.byte source, destination
  604                     MOVE.X.b    .macro
  605                         ldx \1
  606                         sta \2
  607                         .endm
  608                     
  609                     ;......................
  610                     ; MOVE.Y.byte source, destination
  611                     MOVE.Y.b    .macro
  612                         ldy \1
  613                         sta \2
  614                         .endm
  615                     
  616                     ;......................
  617                     ; MOVE.IY.byte source, destination
  618                     MOVE.IY.b    .macro
  619                         lda \1
  620                         sta \2
  621                         iny
  622                         .endm
  623                     
  624                     ;......................
  625                     ; MOVE.IY.byte source, destination
  626                     MOVE.DY.b    .macro
  627                         lda \1
  628                         sta \2
  629                         dey
  630                         .endm
  631                     
  632                     ;......................
  633                     ; MOVE.AX A:X, destination
  634                     MOVE.AX    .macro
  635                         sta \1
  636                         stx \1 + 1
  637                     
  638                         .endm
  639                     
  640                     ;......................
  641                     ; MOVE.AY A:Y, destination
  642                     MOVE.AY    .macro
  643                         sta \1
  644                         sty \1 + 1
  645                     
  646                         .endm
  647                     
  648                     ;......................
  649                     ; MOVE.XY X:Y, destination
  650                     MOVE.XY    .macro
  651                         stx \1
  652                         sty \1 + 1
  653                     
  654                         .endm
  655                     
  656                     
  657                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  658                     ;//..............................................
  659                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  660                     ;// Old move macros
  661                     MOVE.r        .macro
  662                             lda (\1)
  663                             sta <(\2)
  664                             lda (\1 + 1)
  665                             sta <(\2 + 1)
  666                         .endm
  667                     
  668                     MOVE.r.l        .macro
  669                             lda \1
  670                             sta \2
  671                             lda \1 + 1
  672                             sta \2 + 1
  673                             lda \1 + 2
  674                             sta \2 + 2
  675                         .endm
  676                     
  677                     ; MOVE.b        .macro
  678                     ;     .if (\?1=4)
  679                     
  680                     ;         lda \1
  681                     ;         sta \2
  682                     ;     .endif
  683                     
  684                     ;     .if (\?1=3)
  685                     ;         lda \1
  686                     ;         sta \2
  687                     ;     .endif
  688                     
  689                     ;     .if (\?1=2)
  690                     ;         lda \1
  691                     ;         sta \2
  692                     ;     .endif
  693                     
  694                     ;     .if (\?1=6)
  695                     ;         lda \1
  696                     ;         sta \2
  697                     ;     .endif
  698                     
  699                     ;     .endm
  700                     
  701                     MOVE.Rx.b        .macro
  702                         .if (\?1=4)
  703                     
  704                             ldx \1
  705                             stx \2
  706                         .endif
  707                     
  708                         .if (\?1=3)
  709                             ldx \1
  710                             stx \2
  711                         .endif
  712                     
  713                         .if (\?1=2)
  714                             ldx \1
  715                             stx \2
  716                         .endif
  717                     
  718                         .if (\?1=6)
  719                             ldx \1
  720                             stx \2
  721                         .endif
  722                     
  723                         .if (\?1=1)
  724                             stx \2
  725                         .endif
  726                     
  727                     
  728                         .endm
  729                     
  730                     MOVE.R.A        .macro
  731                         .if (\?1=4)
  732                     
  733                             lda \1
  734                             sta \2
  735                         .endif
  736                     
  737                         .if (\?1=3)
  738                             lda \1
  739                             sta \2
  740                         .endif
  741                     
  742                         .if (\?1=2)
  743                             lda \1
  744                             sta \2
  745                         .endif
  746                     
  747                         .if (\?1=6)
  748                             lda \1
  749                             sta \2
  750                         .endif
  751                     
  752                         .if (\?1=1)
  753                             sta \2
  754                         .endif
  755                     
  756                         .endm
  757                     
  758                     MOVRY        .macro
  759                         .if (\?1=4)
  760                     
  761                             ldy \1
  762                             sty \2
  763                         .endif
  764                     
  765                         .if (\?1=3)
  766                             ldy \1
  767                             sty \2
  768                         .endif
  769                     
  770                         .if (\?1=2)
  771                             ldy #\1
  772                             sty \2
  773                         .endif
  774                     
  775                         .if (\?1=6)
  776                             ldy \1
  777                             sty \2
  778                         .endif
  779                     
  780                         .if (\?1=1)
  781                             sty \2
  782                         .endif
  783                     
  784                     
  785                         .endm
  786                     
  787                     
  788                     ; MOVE.w        .macro
  789                     ;     .if (\?1=4)
  790                     
  791                     ;         lda \1
  792                     ;         sta \2
  793                     ;         ldy #1
  794                     ;         lda \1,y
  795                     ;         sta \2 + 1
  796                     ;     .endif
  797                     
  798                     ;     .if (\?1=3)
  799                     ;         lda \1
  800                     ;         sta \2
  801                     ;         lda \1 + 1
  802                     ;         sta \2 + 1
  803                     ;     .endif
  804                     
  805                     ;     .if (\?1=2)
  806                     ;         lda #low(\1)
  807                     ;         sta \2
  808                     ;         lda #high(\1)
  809                     ;         sta \2 + 1
  810                     ;     .endif
  811                     
  812                     ;     .if (\?1=6)
  813                     ;         lda #low(\1)
  814                     ;         sta \2
  815                     ;         lda #high(\1 + 1)
  816                     ;         sta \2 + 1
  817                     ;     .endif
  818                     
  819                     ;     .endm
  820                     
  821                     
  822                     MOVE.IX.l        .macro
  823                     
  824                             ldx #\7-1
  825                     .x_\@
  826                             lda \1,x
  827                             sta \4,x
  828                             lda \2,x
  829                             sta \5,x
  830                             lda \3,x
  831                             sta \6,x
  832                             dex
  833                             bpl .x_\@
  834                         .endm
  835                     
  836                     MOVI_l        .macro
  837                     
  838                             lda \1
  839                             sta \2
  840                             lda \1 + 1
  841                             sta \3
  842                             lda \1 + 2
  843                             sta \4
  844                         .endm
  845                     
  846                     ; MOVE.Y.b    .macro
  847                     ;         ldy \1
  848                     ;     .endm
  849                     
  850                     ; MOVE.X.b    .macro
  851                     ;         ldx \1
  852                     ;     .endm
  853                     
  854                     
  855                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  856                     ;//..............................................
  857                     ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  858                     
  859                     ;................................................
  860                     DMA.word.port        .macro
  861                             tia (\1 & $1fff)+\2,\3,\4
  862                         .endm
  863                     
  864                     DMA.byte.Pport        .macro
  865                             tin (\1 & $1fff)+\2,\3,\4
  866                         .endm
  867                     
  868                     
  869                     DMA.far.local        .macro
  870                             tii (\1 & $1fff)+\2,\3,\4
  871                         .endm
  872                     
  873                     DMA.local        .macro
  874                             tii \1,\2,\3
  875                         .endm
  876                     
  877                     DMA.call            .macro
  878                             jsr int__dma_block
  879                         .endm
  880                     DMA.set.init            .macro
  881                             lda #ia_DMA
  882                             sta int__dma_block.type
  883                     
  884                             stz int__dma_block.source
  885                             lda #$20
  886                             sta int__dma_block.source + 1
  887                     
  888                             lda #$02
  889                             sta int__dma_block.dest
  890                             stz int__dma_block.dest + 1
  891                     
  892                             sta int__dma_block.len
  893                             stz int__dma_block.len + 1
  894                     
  895                             lda #rts_DMA
  896                             sta int__dma_block.rts
  897                         
  898                         .endm
  899                     DMA.set.type        .macro
  900                             lda #\1
  901                             sta int__dma_block.type
  902                         .endm
  903                     DMA.set.source        .macro
  904                             lda low(\1)
  905                             sta int__dma_block.source
  906                             lda high(\1)
  907                             sta int__dma_block.source + 1
  908                         .endm
  909                     DMA.set.dest        .macro
  910                             lda low(\1)
  911                             sta int__dma_block.dest
  912                             lda high(\1)
  913                             sta int__dma_block.dest + 1
  914                         .endm
  915                     DMA.set.len        .macro
  916                             lda low(\1)
  917                             sta int__dma_block.len
  918                             lda high(\1)
  919                             sta int__dma_block.len + 1
  920                         .endm
  921                     
  922                     ;//................................................
  923                     ;// ADD macros
  924                     
  925                     
  926                     ;......................
  927                     ;CMP.word source,destination. 16bit + 16bit->16bit
  928                     CMP.w        .macro
  929                     
  930                             ;first error checks
  931                                 .if (\#<>2)
  932                                 .fail Macro requires two arguments
  933                                 .endif
  934                                 .if (\?2=0)
  935                                 .fail destination must be label, absolute address, or indirect. 1
  936                                 .endif
  937                                 .if (\?2=1)
  938                                 .fail destination must be label, absolute address, or indirect. 1
  939                                 .endif
  940                                 .if (\?2=5)
  941                                 .fail destination must be label, absolute address, or indirect. 1
  942                                 .endif
  943                     
  944                         .if (\?1=2) ;src=#immd
  945                             .if (\?2=2)    ;#immd
  946                                 lda #low(\1)
  947                                 cmp #low(\2)
  948                                 lda #high(\1)
  949                                 sbc #high(\2)
  950                     .skip_\@
  951                             .endif
  952                     
  953                             .if (\?2=3 | \?2=6)
  954                                 lda #low(\1)
  955                                 cmp \2
  956                                 lda #high(\1)
  957                                 sbc \2 + 1
  958                     .skip_\@
  959                             .endif
  960                     
  961                             .if (\?2=4)    ;indirect dest
  962                                 lda #low(\1)
  963                                 cmp \2
  964                                 ldy #$01
  965                                 lda #high(\1)
  966                                 sbc \2,y
  967                     .skip_\@
  968                             .endif
  969                         .endif
  970                     
  971                     
  972                     
  973                         .if (\?1=3 | \?1=6) ;src=addr/label
  974                             .if (\?2=2)    ;#immd
  975                                 lda \1
  976                                 cmp #low(\2)
  977                                 lda \1 + 1
  978                                 sbc #high(\2)
  979                     .skip_\@
  980                             .endif
  981                     
  982                             .if (\?2=3 | \?2=6)
  983                                 lda \1
  984                                 cmp \2
  985                                 lda \1 + 1
  986                                 sbc \2 + 1
  987                     .skip_\@
  988                             .endif
  989                     
  990                             .if (\?2=4)    ;indirect dest
  991                                 ldy #$01
  992                                 lda \1
  993                                 cmp \2
  994                                 lda \1 + 1
  995                                 sbc \2,y
  996                     .skip_\@
  997                             .endif
  998                         .endif
  999                     
 1000                         .if (\?1=4) ;src=indirect
 1001                             .if (\?2=2)
 1002                                 ldy #$01
 1003                                 lda \1
 1004                                 cmp #low(\2)
 1005                                 lda \1,y
 1006                                 sbc #high(\2)
 1007                     .skip_\@
 1008                             .endif
 1009                     
 1010                             .if (\?2=3 | \?2=6)
 1011                                 ldy #$01
 1012                                 lda \1
 1013                                 cmp \2
 1014                                 lda \1,y
 1015                                 sbc \2 + 1
 1016                     .skip_\@
 1017                             .endif
 1018                     
 1019                             .if (\?2=4)    ;indirect dest
 1020                                 ldy #$01
 1021                                 lda \1
 1022                                 cmp \2
 1023                                 lda \1,y
 1024                                 sbc \2,y
 1025                     .skip_\@
 1026                             .endif
 1027                         .endif
 1028                     
 1029                     
 1030                         .endm
 1031                     
 1032                     
 1033                     ;......................
 1034                     ;CMP.byte arg1, arg2  (8bit,8bit)
 1035                     CMP.b        .macro
 1036                     
 1037                             ;first error checks
 1038                                 .if (\#<>2)
 1039                                 .fail Macro requires two arguments
 1040                                 .endif
 1041                                 .if (\?2=0)
 1042                                 .fail destination must be label, absolute address, or indirect. 1
 1043                                 .endif
 1044                                 .if (\?2=1)
 1045                                 .fail destination must be label, absolute address, or indirect. 1
 1046                                 .endif
 1047                                 .if (\?2=5)
 1048                                 .fail destination must be label, absolute address, or indirect. 1
 1049                                 .endif
 1050                     
 1051                         .if (\?1=2) ;src=#immd
 1052                             .if (\?2=2)    ;#immd
 1053                                 lda #low(\1)
 1054                                 cmp #low(\2)
 1055                             .endif
 1056                     
 1057                             .if (\?2=3 | \?2=6)
 1058                                 lda #low(\1)
 1059                                 cmp \2
 1060                             .endif
 1061                     
 1062                             .if (\?2=4)    ;indirect dest
 1063                                 lda #low(\1)
 1064                                 cmp \2
 1065                             .endif
 1066                         .endif
 1067                     
 1068                     
 1069                     
 1070                         .if (\?1=3 | \?1=6) ;src=addr/label
 1071                             .if (\?2=2)    ;#immd
 1072                                 lda \1
 1073                                 cmp #low(\2)
 1074                             .endif
 1075                     
 1076                             .if (\?2=3 | \?2=6)
 1077                                 lda \1
 1078                                 cmp \2
 1079                             .endif
 1080                     
 1081                             .if (\?2=4)    ;indirect dest
 1082                                 lda \1
 1083                                 cmp \2
 1084                             .endif
 1085                         .endif
 1086                     
 1087                         .if (\?1=4) ;src=indirect
 1088                             .if (\?2=2)
 1089                                 lda \1
 1090                                 cmp #\2
 1091                             .endif
 1092                     
 1093                             .if (\?2=3 | \?2=6)
 1094                                 lda \1
 1095                                 cmp \2
 1096                             .endif
 1097                     
 1098                             .if (\?2=4)    ;indirect dest
 1099                                 lda \1
 1100                                 cmp \2
 1101                             .endif
 1102                         .endif
 1103                     
 1104                     
 1105                         .endm
 1106                     
 1107                     
 1108                     
 1109                     ;//................................................
 1110                     ;// ADD macros
 1111                     
 1112                     ;......................
 1113                     ;ADD.byte source,destination
 1114                     ADD.b        .macro
 1115                             ;first error checks
 1116                                 .if (\#<>2)
 1117                                 .fail Macro requires two arguments
 1118                                 .endif
 1119                                 .if (\?2=0)
 1120                                 .fail destination must be label, absolute address, or indirect. 1
 1121                                 .endif
 1122                                 .if (\?2=1)
 1123                                 .fail destination must be label, absolute address, or indirect. 1
 1124                                 .endif
 1125                                 .if (\?2=2)
 1126                                 .fail destination must be label, absolute address, or indirect. 1
 1127                                 .endif
 1128                                 .if (\?2=5)
 1129                                 .fail destination must be label, absolute address, or indirect. 1
 1130                                 .endif
 1131                                 .if (\?1=5)
 1132                                 .fail destination must be label, absolute address, or indirect. 1
 1133                                 .endif
 1134                                 .if (\?1=1)
 1135                                 .fail destination must be label, absolute address, or indirect. 1
 1136                                 .endif
 1137                     
 1138                     
 1139                         .if (\?1=2) ;src=#immd
 1140                             .if (\?2=3 | \?2=6)
 1141                                 lda \2
 1142                                 clc
 1143                                 adc #low(\1)
 1144                                 sta \2
 1145                             .endif
 1146                     
 1147                             .if (\?2=4)    ;indirect dest
 1148                                 lda \2
 1149                                 clc
 1150                                 adc #low(\1)
 1151                                 sta \2
 1152                             .endif
 1153                         .endif
 1154                     
 1155                         .if (\?1=3 | \?1=6) ;src=addr/label
 1156                             .if (\?2=3 | \?2=6)
 1157                                 lda \2
 1158                                 clc
 1159                                 adc \1
 1160                                 sta \2
 1161                             .endif
 1162                     
 1163                             .if (\?2=4)    ;indirect dest
 1164                                 lda \2
 1165                                 clc
 1166                                 adc \1
 1167                                 sta \2
 1168                             .endif
 1169                         .endif
 1170                     
 1171                         .if (\?1=4) ;src=indirect
 1172                             .if (\?2=3 | \?2=6)
 1173                                 lda \2
 1174                                 clc
 1175                                 adc \1
 1176                                 sta \2
 1177                             .endif
 1178                     
 1179                             .if (\?2=4)    ;indirect dest
 1180                                 lda \2
 1181                                 clc
 1182                                 adc \1
 1183                                 sta \2
 1184                             .endif
 1185                         .endif
 1186                     
 1187                     
 1188                         .endm
 1189                     
 1190                     
 1191                     ;......................
 1192                     ;ADD.word source,destination. 16bit + 16bit->16bit
 1193                     ADD.w        .macro
 1194                     
 1195                             ;first error checks
 1196                                 .if (\#<>2)
 1197                                 .fail Macro requires two arguments
 1198                                 .endif
 1199                                 .if (\?2=0)
 1200                                 .fail destination must be label, absolute address, or indirect. 1
 1201                                 .endif
 1202                                 .if (\?2=1)
 1203                                 .fail destination must be label, absolute address, or indirect. 1
 1204                                 .endif
 1205                                 .if (\?2=2)
 1206                                 .fail destination must be label, absolute address, or indirect. 1
 1207                                 .endif
 1208                                 .if (\?2=5)
 1209                                 .fail destination must be label, absolute address, or indirect. 1
 1210                                 .endif
 1211                     
 1212                         .if (\?1=2) ;src=#immd
 1213                             .if (\?2=3 | \?2=6)
 1214                                 lda #low(\1)
 1215                                 clc
 1216                                 adc \2
 1217                                 sta \2
 1218                                 ;bcc .skip\@
 1219                                 lda #high(\1)
 1220                                 adc \2 + 1
 1221                                 sta \2 + 1
 1222                     .skip\@
 1223                             .endif
 1224                     
 1225                             .if (\?2=4)    ;indirect dest
 1226                                 lda #low(\1)
 1227                                 clc
 1228                                 adc \2
 1229                                 sta \2
 1230                                 ;bcc .skip\@
 1231                                 phy
 1232                                 ldy #$01
 1233                                 lda #high(\1)
 1234                                 adc \2,y
 1235                                 sta \2,y
 1236                                 ply
 1237                     .skip\@
 1238                             .endif
 1239                         .endif
 1240                     
 1241                         .if (\?1=3 | \?1=6) ;src=addr/label
 1242                             .if (\?2=3 | \?2=6)
 1243                                 lda \1
 1244                                 clc
 1245                                 adc \2
 1246                                 sta \2
 1247                                 ;bcc .skip\@
 1248                                 lda \1 + 1
 1249                                 adc \2 + 1
 1250                                 sta \2 + 1
 1251                     .skip\@
 1252                             .endif
 1253                     
 1254                             .if (\?2=4)    ;indirect dest
 1255                                 lda \1
 1256                                 clc
 1257                                 adc \2
 1258                                 sta \2
 1259                                 ;bcc .skip\@
 1260                                 phy
 1261                                 ldy #$01
 1262                                 lda \1 + 1
 1263                                 adc \2,y
 1264                                 sta \2,y
 1265                                 ply
 1266                     .skip\@
 1267                             .endif
 1268                         .endif
 1269                     
 1270                         .if (\?1=4) ;src=indirect
 1271                             .if (\?2=3 | \?2=6)
 1272                                 lda \1
 1273                                 clc
 1274                                 adc \2
 1275                                 sta \2
 1276                                 ;bcc .skip\@
 1277                                 phy
 1278                                 ldy #$01
 1279                                 lda \1,y
 1280                                 adc \2 + 1
 1281                                 sta \2 + 1
 1282                                 ply
 1283                     .skip\@
 1284                             .endif
 1285                     
 1286                             .if (\?2=4)    ;indirect dest
 1287                                 lda \1
 1288                                 clc
 1289                                 adc \2
 1290                                 sta \2
 1291                                 ;bcc .skip\@
 1292                                 phy
 1293                                 ldy #$01
 1294                                 lda \1,y
 1295                                 adc \2,y
 1296                                 sta \2,y
 1297                                 ply
 1298                     .skip\@
 1299                             .endif
 1300                         .endif
 1301                     
 1302                     
 1303                         .endm
 1304                     
 1305                     ;......................
 1306                     ;ADD.byte.word source,destination. 8bit + 16bit->16bit
 1307                     ADD.b.w        .macro
 1308                     
 1309                             ;first error checks
 1310                                 .if (\#<>2)
 1311                                 .fail Macro requires two arguments
 1312                                 .endif
 1313                                 .if (\?2=0)
 1314                                 .fail destination must be label, absolute address, or indirect. 1
 1315                                 .endif
 1316                                 .if (\?2=1)
 1317                                 .fail destination must be label, absolute address, or indirect. 1
 1318                                 .endif
 1319                                 .if (\?2=2)
 1320                                 .fail destination must be label, absolute address, or indirect. 1
 1321                                 .endif
 1322                                 .if (\?2=5)
 1323                                 .fail destination must be label, absolute address, or indirect. 1
 1324                                 .endif
 1325                     
 1326                         .if (\?1=2) ;src=#immd
 1327                             .if (\?2=3 | \?2=6)
 1328                                 lda #low(\1)
 1329                                 clc
 1330                                 adc \2
 1331                                 sta \2
 1332                                 bcc .skip\@
 1333                                 inc \2 + 1
 1334                     .skip\@
 1335                             .endif
 1336                     
 1337                             .if (\?2=4)    ;indirect dest
 1338                                 lda #low(\1)
 1339                                 clc
 1340                                 adc \2
 1341                                 sta \2
 1342                                 bcc .skip\@
 1343                                 phy
 1344                                 ldy #$01
 1345                                 lda \2,y
 1346                                 inc a
 1347                                 sta \2,y
 1348                                 ply
 1349                     .skip\@
 1350                             .endif
 1351                         .endif
 1352                     
 1353                         .if (\?1=3 | \?1=6) ;src=addr/label
 1354                             .if (\?2=3 | \?2=6)
 1355                                 lda \1
 1356                                 clc
 1357                                 adc \2
 1358                                 sta \2
 1359                                 bcc .skip\@
 1360                                 inc \2 + 1
 1361                     .skip\@
 1362                             .endif
 1363                     
 1364                             .if (\?2=4)    ;indirect dest
 1365                                 lda \1
 1366                                 clc
 1367                                 adc \2
 1368                                 sta \2
 1369                                 bcc .skip\@
 1370                                 phy
 1371                                 ldy #$01
 1372                                 lda \2,y
 1373                                 inc a
 1374                                 sta \2,y
 1375                                 ply
 1376                     .skip\@
 1377                             .endif
 1378                         .endif
 1379                     
 1380                         .if (\?1=4) ;src=indirect
 1381                             .if (\?2=3 | \?2=6)
 1382                                 lda \1
 1383                                 clc
 1384                                 adc \2
 1385                                 sta \2
 1386                                 bcc .skip\@
 1387                                 phy
 1388                                 ldy #$01
 1389                                 lda \2 + 1
 1390                                 inc a
 1391                                 sta \2 + 1
 1392                                 ply
 1393                     .skip\@
 1394                             .endif
 1395                     
 1396                             .if (\?2=4)    ;indirect dest
 1397                                 lda \1
 1398                                 clc
 1399                                 adc \2
 1400                                 sta \2
 1401                                 bcc .skip\@
 1402                                 phy
 1403                                 ldy #$01
 1404                                 lda \2,y
 1405                                 inc a
 1406                                 sta \2,y
 1407                                 ply
 1408                     .skip\@
 1409                             .endif
 1410                         .endif
 1411                     
 1412                     
 1413                         .endm
 1414                     
 1415                     
 1416                     ;......................
 1417                     ;ADD.word.long source,destination. 16bit + 24bit->24bit
 1418                     ADD.w.l.split        .macro
 1419                     
 1420                             ;first error checks
 1421                                 .if (\#<>2)
 1422                                 .fail Macro requires two arguments
 1423                                 .endif
 1424                                 .if (\?2=0)
 1425                                 .fail destination must be label, absolute address, or indirect. 1
 1426                                 .endif
 1427                                 .if (\?2=1)
 1428                                 .fail destination must be label, absolute address, or indirect. 1
 1429                                 .endif
 1430                                 .if (\?2=2)
 1431                                 .fail destination must be label, absolute address, or indirect. 1
 1432                                 .endif
 1433                                 .if (\?2=5)
 1434                                 .fail destination must be label, absolute address, or indirect. 1
 1435                                 .endif
 1436                     
 1437                         .if (\?1=2) ;src=#immd
 1438                                 lda #low(\1)
 1439                                 clc
 1440                                 adc \2.lo
 1441                                 sta \2.lo
 1442                                 lda #high(\1)
 1443                                 adc \2.mid
 1444                                 sta \2.mid
 1445                             bcc .skip\@
 1446                                 inc \2.hi
 1447                     .skip\@
 1448                         .endif
 1449                     
 1450                         .if (\?1=3 | \?1=6) ;src=addr/label
 1451                                 lda \1
 1452                                 clc
 1453                                 adc \2.lo
 1454                                 sta \2.lo
 1455                                 lda \1 + 1
 1456                                 adc \2.mid
 1457                                 sta \2.mid
 1458                             bcc .skip\@
 1459                                 inc \2.hi
 1460                     .skip\@
 1461                         .endif
 1462                     
 1463                         .if (\?1=4) ;src=indirect
 1464                                 lda [\1]
 1465                                 clc
 1466                                 adc \2.lo
 1467                                 sta \2.lo
 1468                                 ldy #$01
 1469                                 lda [\1],y
 1470                                 adc \2.mid
 1471                                 sta \2.mid
 1472                             bcc .skip\@
 1473                                 inc \2.hi
 1474                     .skip\@
 1475                         .endif
 1476                     
 1477                     
 1478                         .endm
 1479                     
 1480                     
 1481                     ;......................
 1482                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1483                     ADD.Y.w        .macro
 1484                     
 1485                             ;first error checks
 1486                                 .if (\#<>1)
 1487                                 .fail Macro requires two arguments
 1488                                 .endif
 1489                                 .if (\?1=0)
 1490                                 .fail destination must be label, absolute address, or indirect. 1
 1491                                 .endif
 1492                                 .if (\?1=1)
 1493                                 .fail destination must be label, absolute address, or indirect. 1
 1494                                 .endif
 1495                                 .if (\?1=2)
 1496                                 .fail destination must be label, absolute address, or indirect. 1
 1497                                 .endif
 1498                                 .if (\?1=5)
 1499                                 .fail destination must be label, absolute address, or indirect. 1
 1500                                 .endif
 1501                     
 1502                     
 1503                             .if (\?1=3 | \?1=6)
 1504                                 tya
 1505                                 clc
 1506                                 adc \1
 1507                                 sta \1
 1508                                 bcc .skip\@
 1509                                 inc \1 + 1
 1510                     .skip\@
 1511                             .endif
 1512                     
 1513                             .if (\?1=4)    ;indirect dest
 1514                                 tya
 1515                                 clc
 1516                                 adc \1
 1517                                 sta \1
 1518                                 bcc .skip\@
 1519                                 phy
 1520                                 ldy #$01
 1521                                 lda \1,y
 1522                                 inc a
 1523                                 sta \1,y
 1524                                 ply
 1525                     .skip\@
 1526                             .endif
 1527                     
 1528                     
 1529                         .endm
 1530                     
 1531                     ;......................
 1532                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1533                     ADD.A.w        .macro
 1534                     
 1535                             ;first error checks
 1536                                 .if (\#<>1)
 1537                                 .fail Macro requires two arguments
 1538                                 .endif
 1539                                 .if (\?1=0)
 1540                                 .fail destination must be label, absolute address, or indirect. 1
 1541                                 .endif
 1542                                 .if (\?1=1)
 1543                                 .fail destination must be label, absolute address, or indirect. 1
 1544                                 .endif
 1545                                 .if (\?1=2)
 1546                                 .fail destination must be label, absolute address, or indirect. 1
 1547                                 .endif
 1548                                 .if (\?1=5)
 1549                                 .fail destination must be label, absolute address, or indirect. 1
 1550                                 .endif
 1551                     
 1552                     
 1553                             .if (\?1=3 | \?1=6)
 1554                                 clc
 1555                                 adc \1
 1556                                 sta \1
 1557                                 bcc .skip\@
 1558                                 inc \1 + 1
 1559                     .skip\@
 1560                             .endif
 1561                     
 1562                         .endm
 1563                     
 1564                     ;......................
 1565                     ;ADD.Y.word Y,destination. 8bit + 16bit->16bit
 1566                     ADD.A.b        .macro
 1567                     
 1568                             ;first error checks
 1569                                 .if (\#<>1)
 1570                                 .fail Macro requires two arguments
 1571                                 .endif
 1572                                 .if (\?1=0)
 1573                                 .fail destination must be label, absolute address, or indirect. 1
 1574                                 .endif
 1575                                 .if (\?1=1)
 1576                                 .fail destination must be label, absolute address, or indirect. 1
 1577                                 .endif
 1578                                 .if (\?1=2)
 1579                                 .fail destination must be label, absolute address, or indirect. 1
 1580                                 .endif
 1581                                 .if (\?1=5)
 1582                                 .fail destination must be label, absolute address, or indirect. 1
 1583                                 .endif
 1584                     
 1585                     
 1586                             .if (\?1=3 | \?1=6)
 1587                                 clc
 1588                                 adc \1
 1589                                 sta \1
 1590                     
 1591                             .endif
 1592                     
 1593                         .endm
 1594                     
 1595                     
 1596                     
 1597                     ;......................
 1598                     ;AND.word.long source,destination. 16bit + 24bit->24bit
 1599                     AND.b.b.w  .macro
 1600                     
 1601                             ;first error checks
 1602                                 .if (\#<>3)
 1603                                 .fail Macro requires two arguments
 1604                                 .endif
 1605                     
 1606                             lda \2
 1607                             and \1
 1608                             sta \3
 1609                             stz \3
 1610                     
 1611                         .endm
 1612                     
 1613                     
 1614                     ;......................
 1615                     ;AND.word source,destination. 16bit + 16bit->16bit
 1616                     AND.w        .macro
 1617                     
 1618                             ;first error checks
 1619                                 .if (\#<>2)
 1620                                 .fail Macro requires two arguments
 1621                                 .endif
 1622                                 .if (\?2=0)
 1623                                 .fail destination must be label, absolute address, or indirect. 1
 1624                                 .endif
 1625                                 .if (\?2=1)
 1626                                 .fail destination must be label, absolute address, or indirect. 1
 1627                                 .endif
 1628                                 .if (\?2=2)
 1629                                 .fail destination must be label, absolute address, or indirect. 1
 1630                                 .endif
 1631                                 .if (\?2=5)
 1632                                 .fail destination must be label, absolute address, or indirect. 1
 1633                                 .endif
 1634                     
 1635                         .if (\?1=2) ;src=#immd
 1636                             .if (\?2=3 | \?2=6)
 1637                                 lda #low(\1)
 1638                                 and \2
 1639                                 sta \2
 1640                                 lda #high(\1)
 1641                                 and \2 + 1
 1642                                 sta \2 + 1
 1643                             .endif
 1644                     
 1645                             .if (\?2=4)    ;indirect dest
 1646                                 lda #low(\1)
 1647                                 and \2
 1648                                 sta \2
 1649                                 phy
 1650                                 ldy #$01
 1651                                 lda #high(\1)
 1652                                 and \2,y
 1653                                 sta \2,y
 1654                                 ply
 1655                             .endif
 1656                         .endif
 1657                     
 1658                         .if (\?1=3 | \?1=6) ;src=addr/label
 1659                             .if (\?2=3 | \?2=6)
 1660                                 lda \1
 1661                                 and \2
 1662                                 sta \2
 1663                                 lda \1 + 1
 1664                                 and \2 + 1
 1665                                 sta \2 + 1
 1666                             .endif
 1667                     
 1668                             .if (\?2=4)    ;indirect dest
 1669                                 lda \1
 1670                                 and \2
 1671                                 sta \2
 1672                                 phy
 1673                                 ldy #$01
 1674                                 lda \1 + 1
 1675                                 and \2,y
 1676                                 sta \2,y
 1677                                 ply
 1678                             .endif
 1679                         .endif
 1680                     
 1681                         .if (\?1=4) ;src=indirect
 1682                             .if (\?2=3 | \?2=6)
 1683                                 lda \1
 1684                                 and \2
 1685                                 sta \2
 1686                                 phy
 1687                                 ldy #$01
 1688                                 lda \1,y
 1689                                 and \2 + 1
 1690                                 sta \2 + 1
 1691                                 ply
 1692                             .endif
 1693                     
 1694                             .if (\?2=4)    ;indirect dest
 1695                                 lda \1
 1696                                 and \2
 1697                                 sta \2
 1698                                 phy
 1699                                 ldy #$01
 1700                                 lda \1,y
 1701                                 and \2,y
 1702                                 sta \2,y
 1703                                 ply
 1704                             .endif
 1705                         .endif
 1706                     
 1707                     
 1708                         .endm
 1709                     
 1710                     
 1711                     ;......................
 1712                     ;ASL.Y
 1713                     ASL.Y.safe        .macro
 1714                             say
 1715                             asl a
 1716                             say
 1717                         .endm
 1718                     
 1719                     ASL.2.Y.safe        .macro
 1720                             say
 1721                             asl a
 1722                             asl a
 1723                             say
 1724                         .endm
 1725                     
 1726                     ASL.3.Y.safe        .macro
 1727                             say
 1728                             asl a
 1729                             asl a
 1730                             asl a
 1731                             say
 1732                         .endm
 1733                     
 1734                     ASL.Y        .macro
 1735                             say
 1736                             asl a
 1737                             say
 1738                         .endm
 1739                     
 1740                     ASL.2.Y        .macro
 1741                             say
 1742                             asl a
 1743                             asl a
 1744                             say
 1745                         .endm
 1746                     
 1747                     ASL.3.Y        .macro
 1748                             say
 1749                             asl a
 1750                             asl a
 1751                             asl a
 1752                             say
 1753                         .endm
 1754                     
 1755                     ;......................
 1756                     ;ASL.X  
 1757                     ASL.X.safe        .macro
 1758                             sax
 1759                             asl a
 1760                             sax
 1761                         .endm
 1762                     
 1763                     ASL.2.X.safe        .macro
 1764                             sax
 1765                             asl a
 1766                             asl a
 1767                             sax
 1768                         .endm
 1769                     
 1770                     ASL.3.X.safe        .macro
 1771                             sax
 1772                             asl a
 1773                             asl a
 1774                             asl a
 1775                             sax
 1776                         .endm
 1777                     
 1778                     ASL.X        .macro
 1779                             sax
 1780                             asl a
 1781                             sax
 1782                         .endm
 1783                     
 1784                     ASL.2.X        .macro
 1785                             sax
 1786                             asl a
 1787                             asl a
 1788                             sax
 1789                         .endm
 1790                     
 1791                     ASL.3.X        .macro
 1792                             sax
 1793                             asl a
 1794                             asl a
 1795                             asl a
 1796                             sax
 1797                         .endm
 1798                     
 1799                     
 1800                     ;......................
 1801                     ;ASL.Y  
 1802                     LSL.Y        .macro
 1803                     
 1804                             ;first error checks
 1805                                 .if (\#<>1)
 1806                                 .fail Macro requires two arguments
 1807                                 .endif
 1808                                 .if (\?1=0)
 1809                                 .fail destination must be label, absolute address, or indirect. 1
 1810                                 .endif
 1811                                 .if (\?1=1)
 1812                                 .fail destination must be label, absolute address, or indirect. 1
 1813                                 .endif
 1814                                 .if (\?1=2)
 1815                                 .fail destination must be label, absolute address, or indirect. 1
 1816                                 .endif
 1817                                 .if (\?1=5)
 1818                                 .fail destination must be label, absolute address, or indirect. 1
 1819                                 .endif
 1820                     
 1821                     
 1822                             say
 1823                             cmp #$80
 1824                             asl a
 1825                             say
 1826                     
 1827                     
 1828                         .endm
 1829                     
 1830                     ;......................
 1831                     ;LSR.b  
 1832                     LSR.b        .macro
 1833                         lsr \1
 1834                         .endm
 1835                     
 1836                     LSR.2.b        .macro
 1837                         lsr \1
 1838                         lsr \1
 1839                         .endm
 1840                     
 1841                     LSR.3.b        .macro
 1842                         lsr \1
 1843                         lsr \1
 1844                         lsr \1
 1845                         .endm
 1846                     
 1847                     LSR.4.b        .macro
 1848                         lsr \1
 1849                         lsr \1
 1850                         lsr \1
 1851                         lsr \1
 1852                         .endm
 1853                     
 1854                     ;......................
 1855                     ;LSR.w  
 1856                     LSR.w        .macro
 1857                         lsr \1
 1858                         ror \1 + 1
 1859                         .endm
 1860                     
 1861                     LSR.2.w        .macro
 1862                         lsr \1
 1863                         ror \1 + 1
 1864                         lsr \1
 1865                         ror \1 + 1
 1866                         .endm
 1867                     
 1868                     LSR.3.w        .macro
 1869                     
 1870                         .if (\?1 = 6 & \1 = AX)
 1871                             lsr a
 1872                             sax
 1873                             ror a
 1874                             sax
 1875                             ror a
 1876                             sax
 1877                             ror a
 1878                             sax
 1879                             ror a
 1880                             sax
 1881                             ror a
 1882                             sax
 1883                         .endif
 1884                     
 1885                         .if (\?1 = 6 & \1 = AY)
 1886                             lsr a
 1887                             say
 1888                             ror a
 1889                             say
 1890                             ror a
 1891                             say
 1892                             ror a
 1893                             say
 1894                             ror a
 1895                             say
 1896                             ror a
 1897                             say
 1898                         .endif
 1899                         .endm
 1900                     
 1901                     LSR.4.w        .macro
 1902                         lsr \1
 1903                         ror \1 + 1
 1904                         lsr \1
 1905                         ror \1 + 1
 1906                         lsr \1
 1907                         ror \1 + 1
 1908                         lsr \1
 1909                         ror \1 + 1
 1910                         .endm
 1911                     
 1912                     ;.......
 1913                     
 1914                     ;...............
 1915                     ;OR.w  src, dest
 1916                     OR.w        .macro
 1917                     
 1918                             ;first error checks
 1919                                 .if (\#<>2)
 1920                                 .fail Macro requires two arguments
 1921                                 .endif
 1922                                 .if (\?2=0)
 1923                                 .fail destination must be label, absolute address, or indirect. 1
 1924                                 .endif
 1925                                 .if (\?2=1)
 1926                                 .fail destination must be label, absolute address, or indirect. 1
 1927                                 .endif
 1928                                 .if (\?2=5)
 1929                                 .fail destination must be label, absolute address, or indirect. 1
 1930                                 .endif
 1931                     
 1932                         .if (\?1=2) ;src=#immd
 1933                             .if (\?2=2)    ;#immd
 1934                                 lda #low(\1)
 1935                                 ora #low(\2)
 1936                                 lda #high(\1)
 1937                                 ora #high(\2)
 1938                     .skip_\@
 1939                             .endif
 1940                     
 1941                             .if (\?2=3 | \?2=6)
 1942                                 lda #low(\1)
 1943                                 ora \2
 1944                                 lda #high(\1)
 1945                                 ora \2 + 1
 1946                     .skip_\@
 1947                             .endif
 1948                     
 1949                             .if (\?2=4)    ;indirect dest
 1950                                 lda #low(\1)
 1951                                 ora \2
 1952                                 ldy #$01
 1953                                 lda #high(\1)
 1954                                 ora \2,y
 1955                     .skip_\@
 1956                             .endif
 1957                         .endif
 1958                     
 1959                     
 1960                     
 1961                         .if (\?1=3 | \?1=6) ;src=addr/label
 1962                             .if (\?2=2)    ;#immd
 1963                                 lda \1
 1964                                 ora #low(\2)
 1965                                 lda \1 + 1
 1966                                 ora #high(\2)
 1967                     .skip_\@
 1968                             .endif
 1969                     
 1970                             .if (\?2=3 | \?2=6)
 1971                                 lda \1
 1972                                 ora \2
 1973                                 lda \1 + 1
 1974                                 ora \2 + 1
 1975                     .skip_\@
 1976                             .endif
 1977                     
 1978                             .if (\?2=4)    ;indirect dest
 1979                                 ldy #$01
 1980                                 lda \1
 1981                                 ora \2
 1982                                 lda \1 + 1
 1983                                 ora \2,y
 1984                     .skip_\@
 1985                             .endif
 1986                         .endif
 1987                     
 1988                         .if (\?1=4) ;src=indirect
 1989                             .if (\?2=2)
 1990                                 ldy #$01
 1991                                 lda \1
 1992                                 ora #low(\2)
 1993                                 lda \1,y
 1994                                 ora #high(\2)
 1995                     .skip_\@
 1996                             .endif
 1997                     
 1998                             .if (\?2=3 | \?2=6)
 1999                                 ldy #$01
 2000                                 lda \1
 2001                                 ora \2
 2002                                 lda \1,y
 2003                                 ora \2 + 1
 2004                     .skip_\@
 2005                             .endif
 2006                     
 2007                             .if (\?2=4)    ;indirect dest
 2008                                 ldy #$01
 2009                                 lda \1
 2010                                 ora \2
 2011                                 lda \1,y
 2012                                 ora \2,y
 2013                     .skip_\@
 2014                             .endif
 2015                         .endif
 2016                     
 2017                     
 2018                         .endm
 2019                     
 2020                     
 2021                     ;................................................
 2022                     BNE.l    .macro
 2023                             beq .x_\@
 2024                             jmp \1
 2025                     .x_\@
 2026                     
 2027                         .endm
 2028                     
 2029                     BEQ.l    .macro
 2030                             bne .x_\@
 2031                             jmp \1
 2032                     .x_\@
 2033                     
 2034                         .endm
 2035                     
 2036                     BPL.l    .macro
 2037                             BMI .x_\@
 2038                             jmp \1
 2039                     .x_\@
 2040                     
 2041                         .endm
 2042                     
 2043                     BMI.l    .macro
 2044                             bpl .x_\@
 2045                             jmp \1
 2046                     .x_\@
 2047                     
 2048                         .endm
 2049                     
 2050                     BCS.l    .macro
 2051                             bcc .x_\@
 2052                             jmp \1
 2053                     .x_\@
 2054                     
 2055                         .endm
 2056                     
 2057                     BCC.l    .macro
 2058                             bcs .x_\@
 2059                             jmp \1
 2060                     .x_\@
 2061                     
 2062                         .endm
 2063                     
 2064                     BVS.l    .macro
 2065                             bvc .x_\@
 2066                             jmp \1
 2067                     .x_\@
 2068                     
 2069                         .endm
 2070                     
 2071                     BVC.l    .macro
 2072                             bvs .x_\@
 2073                             jmp \1
 2074                     .x_\@
 2075                     
 2076                         .endm
 2077                     
 2078                     
 2079                     ;................................................
 2080                     
 2081                     ;......................
 2082                     ;PUSHBANK.1  addr
 2083                     PUSHBANK.1        .macro
 2084                         .if (\#=0)
 2085                         .fail Macro requires one argument
 2086                         .endif
 2087                     
 2088                             tma #(high(\1)>>5)
 2089                             pha
 2090                         .endm
 2091                     
 2092                     ;......................
 2093                     ;PUSHBANK.2  addr
 2094                     PUSHBANK.2        .macro
 2095                         .if (\#=0)
 2096                         .fail Macro requires one argument
 2097                         .endif
 2098                     
 2099                     
 2100                             tma #(\1)
 2101                             pha
 2102                             tma #(\1 + 1)
 2103                             pha
 2104                         .endm
 2105                     
 2106                     ;......................
 2107                     ;PUSHBANK.3 addr
 2108                     PUSHBANK.3        .macro
 2109                         .if (\#=0)
 2110                         .fail Macro requires one argument
 2111                         .endif
 2112                     
 2113                     
 2114                             tma #(\1)
 2115                             pha
 2116                             tma #(\1 + 1)
 2117                             pha
 2118                             tma #(\1 + 2)
 2119                             pha
 2120                         .endm
 2121                     
 2122                     ;......................
 2123                     ;PUSHBANK.4 addr
 2124                     PUSHBANK.4        .macro
 2125                         .if (\#=0)
 2126                         .fail Macro requires one argument
 2127                         .endif
 2128                     
 2129                     
 2130                             tma #(\1 + 1)
 2131                             pha
 2132                             tma #(\1 + 1)
 2133                             pha
 2134                             tma #(\1 + 2)
 2135                             pha
 2136                             tma #(\1 + 3)
 2137                             pha
 2138                         .endm
 2139                     
 2140                     ;......................
 2141                     ;PULLBANK.1 addr
 2142                     PULLBANK.1        .macro
 2143                         .if (\#=0)
 2144                         .fail Macro requires one argument
 2145                         .endif
 2146                     
 2147                     
 2148                             pla
 2149                             tam #(\1)
 2150                         .endm
 2151                     
 2152                     ;......................
 2153                     ;PULLBANK.2 addr
 2154                     PULLBANK.2        .macro
 2155                         .if (\#=0)
 2156                         .fail Macro requires one argument
 2157                         .endif
 2158                     
 2159                     
 2160                             pla
 2161                             tam #(\1 + 1)
 2162                             pla
 2163                             tam #(\1)
 2164                         .endm
 2165                     
 2166                     ;......................
 2167                     ;PULLBANK.3 addr
 2168                     PULLBANK.3        .macro
 2169                         .if (\#=0)
 2170                         .fail Macro requires one argument
 2171                         .endif
 2172                     
 2173                     
 2174                             pla
 2175                             tam #(\1 + 2)
 2176                             pla
 2177                             tam #(\1 + 1)
 2178                             pla
 2179                             tam #(\1)
 2180                         .endm
 2181                     
 2182                     
 2183                     ;......................
 2184                     ;PULLBANK.4 addr
 2185                     PULLBANK.4        .macro
 2186                         .if (\#=0)
 2187                         .fail Macro requires one argument
 2188                         .endif
 2189                     
 2190                             pla
 2191                             tam #(\1 + 3)
 2192                             pla
 2193                             tam #(\1 + 2)
 2194                             pla
 2195                             tam #(\1 + 1)
 2196                             pla
 2197                             tam #(\1)
 2198                         .endm
 2199                     
 2200                     
 2201                     
 2202                     
 2203                     ;................................................
 2204                     
 2205                     CPUslow_INTdisabled    .macro
 2206                                 php
 2207                                 sei
 2208                                 csl
 2209                         .endm
 2210                     
 2211                     CPU_slow    .macro
 2212                                 php
 2213                                 csl
 2214                         .endm
 2215                     
 2216                     
 2217                     CPU_restored    .macro
 2218                                 plp
 2219                         .endm
 2220                     
 2221                     ;................................................
 2222                     
 2223                     InitialStartup    .macro
 2224                     
 2225                                     sei
 2226                                     cld
 2227                                     csh
 2228                                     ldx #$ff
 2229                                     txs
 2230                                     lda #$ff
 2231                                     tam #$00
 2232                                     lda #$f8
 2233                                     tam #$01
 2234                     
 2235                         .endm
 2236                     
 2237                     
 2238                     
 2239                     ;.................................................
 2240                     AlignByte256    .macro
 2241                     
 2242                         .org ( (* + 255) & $ff00)
 2243                     
 2244                         .endm
 2245                     
 2246                     ;.................................................
 2247                     IncludeBinary    .macro
 2248                     
 2249                     start_\@:
 2250                     \1: .incbin \2
 2251                     end_\@:
 2252                     
 2253                     \1.size = sizeof(\1)
 2254                     
 2255                         .endm
 2256                     
 2257                     ;.................................................
 2258                     IncludeData    .macro
 2259                     
 2260                     start_\@:
 2261                     \1:  .include \2
 2262                     end_\@:
 2263                     
 2264                     \1.size = end_\@ - start_\@
 2265                     
 2266                         .endm
 2267                     
 2268                     ;.................................................
 2269                     IncludeCode    .macro
 2270                     
 2271                     \1:
 2272                             .include \2
 2273                     .end_\@:
 2274                     
 2275                     \1.size = .end_\@ - \1
 2276                     
 2277                         .endm
 2278                     
 2279                     
 2280                     ;.................................................
 2281                     FOLLOW_ENTRY   .macro
 2282                             plx
 2283                             jmp [\1,x]
 2284                         .endm
 2285                     
 2286                     ;.................................................
 2287                     CONNECT_ENTRY   .macro
 2288                             ldy #$01
 2289                             jmp \1
 2290                         .endm
 2291                     ;.................................................
 2292                     ENTRY_POINT   .macro
 2293                     .self_\@
 2294                             .dw .self_\@ + 2
 2295                         .endm
 2296                     
 2297                     
 2298                     ;.................................................
 2299                     STOW_ENTRY.b   .macro
 2300                             lda #\1
 2301                             sta \2
 2302                         .endm
 2303                     
 2304                     ;.................................................
 2305                     STOW_ENTRY.w   .macro
 2306                             lda #low(\1)
 2307                             sta \2
 2308                             lda #high(\1)
 2309                             sta \2 + 1
 2310                         .endm
 2311                     
 2312                     ;.................................................
 2313                     STOW_ENTRY.addr   .macro
 2314                             lda #low(.addr_\@)
 2315                             sta \2
 2316                             lda #high(.addr_\@)
 2317                             sta \2 + 1
 2318                     .addr_\@
 2319                         .endm
 2320                     
 2321                     ;.................................................
 2322                     RTS_ENTRY   .macro
 2323                             lda #low(.addr_\@)
 2324                             ldx #high(.addr_\@)
 2325                     .addr_\@
 2326                         rts
 2327                         .endm
 2328                     
 2329                     ;.................................................
 2330                     RETURN_ENTRY.stack   .macro
 2331                             lda #low(.addr_\@)
 2332                             pha
 2333                             lda #high(.addr_\@)
 2334                             pha
 2335                     .addr_\@
 2336                         jmp \2
 2337                         .endm
 2338                     
 2339                     ;.................................................
 2340                     RETURN_ENTRY.AX   .macro
 2341                             lda #low(.addr_\@)
 2342                             ldx #high(.addr_\@)
 2343                         jmp \1
 2344                     .addr_\@
 2345                         .endm
 2346                     
 2347                     
 2348                     ;.................................................
 2349                     ADD_ENTRY.b   .macro
 2350                             lda \1
 2351                             clc
 2352                             adc #\2
 2353                             sta \3
 2354                         .endm
 2355                     
 2356                     ;.................................................
 2357                     ADD_ENTRY.w   .macro
 2358                             lda \1
 2359                             clc
 2360                             adc #low(\2)
 2361                             sta \3 + 1
 2362                             lda \1 + 1
 2363                             adc #high(\2)
 2364                             sta \3 + 1
 2365                         .endm
 2366                     
 2367                     ;......................
 2368                     ;SUB.word source,destination. 16bit + 16bit->16bit
 2369                     SUB.w        .macro
 2370                     
 2371                             ;first error checks
 2372                                 .if (\#<>2)
 2373                                 .fail Macro requires two arguments
 2374                                 .endif
 2375                                 .if (\?2=0)
 2376                                 .fail destination must be label, absolute address, or indirect. 1
 2377                                 .endif
 2378                                 .if (\?2=1)
 2379                                 .fail destination must be label, absolute address, or indirect. 1
 2380                                 .endif
 2381                                 .if (\?2=2)
 2382                                 .fail destination must be label, absolute address, or indirect. 1
 2383                                 .endif
 2384                                 .if (\?2=5)
 2385                                 .fail destination must be label, absolute address, or indirect. 1
 2386                                 .endif
 2387                     
 2388                         .if (\?1=2) ;src=#immd
 2389                             .if (\?2=3 | \?2=6)
 2390                                 lda \2
 2391                                 sec
 2392                                 sbc #low(\1)
 2393                                 sta \2
 2394                                 lda \2 + 1
 2395                                 sbc #high(\1)
 2396                                 sta \2 + 1
 2397                             .endif
 2398                     
 2399                             .if (\?2=4)    ;indirect dest
 2400                                 lda \2
 2401                                 sec
 2402                                 sbc #low(\1)
 2403                                 sta \2
 2404                                     phy
 2405                                 ldy #$01
 2406                                 lda \2 + 1,y
 2407                                 sbc #high(\1)
 2408                                 sta \2 + 1,y
 2409                                     ply
 2410                             .endif
 2411                         .endif
 2412                     
 2413                         .if (\?1=3 | \?1=6) ;src=addr/label
 2414                             .if (\?2=3 | \?2=6)
 2415                                 lda \2
 2416                                 sec
 2417                                 sbc \1
 2418                                 sta \2
 2419                                 lda \2 + 1
 2420                                 sbc \1 + 1
 2421                                 sta \2 + 1
 2422                             .endif
 2423                     
 2424                             .if (\?2=4)    ;indirect dest
 2425                                 lda \2
 2426                                 sec
 2427                                 sbc \1
 2428                                 sta \2
 2429                                     phy
 2430                                 ldy #$01
 2431                                 lda \2 + 1,y
 2432                                 sbc \1
 2433                                 sta \2 + 1,y
 2434                                     ply
 2435                             .endif
 2436                         .endif
 2437                     
 2438                         .if (\?1=4) ;src=indirect
 2439                             .if (\?2=3 | \?2=6)
 2440                                 lda \2
 2441                                 sec
 2442                                 sbc \1
 2443                                 sta \2
 2444                                     phy
 2445                                 ldy #$01
 2446                                 lda \2,y
 2447                                 sbc \1 + 1
 2448                                 sta \2,y
 2449                                     ply
 2450                             .endif
 2451                     
 2452                             .if (\?2=4)    ;indirect dest
 2453                                 lda \2
 2454                                 sec
 2455                                 sbc \1
 2456                                 sta \2
 2457                                     phy
 2458                                 ldy #$01
 2459                                 lda \2,y
 2460                                 sbc \1,y
 2461                                 sta \2,y
 2462                                     ply
 2463                             .endif
 2464                         .endif
 2465                     
 2466                     
 2467                         .endm
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/video.inc
   73                         .include "../base_func/video/video.inc"
    1                     loadCellToVram  .macro
    2                     
    3                           .if (\# = 2)
    4                                 MAP_BANK.2 #(\1.cell) , MPR2
    5                                 sVDC.reg MAWR, #\2
    6                                 sVDC.reg VRWR
    7                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
    8                           .endif
    9                     
   10                           .if (\# = 1)
   11                                 MAP_BANK.2 #(\1.cell) , MPR2
   12                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   13                           .endif
   14                       .endm
   15                     
   16                     loadCellToVram.3banks  .macro
   17                     
   18                           .if (\# = 2)
   19                                 MAP_BANK.3 #(\1.cell) , MPR2
   20                                 sVDC.reg MAWR, #\2
   21                                 sVDC.reg VRWR
   22                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   23                           .endif
   24                     
   25                           .if (\# = 1)
   26                                 MAP_BANK.3 #(\1.cell) , MPR2
   27                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   28                           .endif
   29                       .endm
   30                     
   31                     loadCellToVram.4banks  .macro
   32                     
   33                           .if (\# = 2)
   34                                 MAP_BANK.4 #(\1.cell) , MPR2
   35                                 sVDC.reg MAWR, #\2
   36                                 sVDC.reg VRWR
   37                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   38                           .endif
   39                     
   40                           .if (\# = 1)
   41                                 MAP_BANK.4 #(\1.cell) , MPR2
   42                                 DMA.word.port \1.cell, Page.2, vdata_port, \1.cell.size
   43                           .endif
   44                       .endm
   45                     
   46                     loadCellToCram.BG  .macro
   47                     
   48                             MAP_BANK.2 #(\1.pal) , MPR2
   49                             VCE.BGblock \2
   50                             DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   51                       .endm
   52                     
   53                     loadCellToCram.SPR  .macro
   54                     
   55                             MAP_BANK.2 #(\1.pal) , MPR2
   56                             VCE.SPRblock \2
   57                             DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   58                       .endm
   59                     
   60                     debugBENCH  .macro
   61                     .ifdef DEBUG_BENCHMARK
   62                           stz $402
   63                           lda #$1
   64                           sta $403
   65                           lda #low((\1<<3) + (\2<<6) + (\3))
   66                           sta $404
   67                           lda #high((\1<<3) + (\2<<6) + (\3))
   68                           sta $405
   69                           ; MAP_BANK.2 #(\1.pal) , MPR2
   70                           ; VCE.SPRblock \2
   71                           ; DMA.word.port \1.pal, Page.2, vce_data, \1.pal.size
   72                     .endif
   73                       .endm
   74                     
   75                     loadDataToVram.4banks  .macro
   76                     
   77                             sVDC.reg MAWR, #\2
   78                             sVDC.reg VRWR
   79                             MAP_BANK.4 #(\1) , MPR2
   80                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   81                     
   82                       .endm
   83                     
   84                     loadDataToVram.3banks  .macro
   85                     
   86                             sVDC.reg MAWR, #\2
   87                             sVDC.reg VRWR
   88                             MAP_BANK.3 #(\1) , MPR2
   89                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   90                     
   91                       .endm
   92                     
   93                     loadDataToVram.2banks  .macro
   94                     
   95                             sVDC.reg MAWR, #\2
   96                             sVDC.reg VRWR
   97                             MAP_BANK.2 #(\1) , MPR2
   98                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
   99                     
  100                       .endm
  101                     
  102                     loadDataToVram.1bank  .macro
  103                     
  104                             sVDC.reg MAWR, #\2
  105                             sVDC.reg VRWR
  106                             MAP_BANK #(\1) , MPR2
  107                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
  108                     
  109                       .endm
  110                     
  111                     loadDataToVram  .macro
  112                     
  113                             sVDC.reg MAWR, #\2
  114                             sVDC.reg VRWR
  115                             MAP_BANK.2 #(\1) , MPR2
  116                             DMA.word.port \1, Page.2, vdata_port, (\1.size)
  117                     
  118                       .endm
  119                     
  120                     
  121                     loadDataToCram.BG  .macro
  122                     
  123                             MAP_BANK.4 #(\1) , MPR2
  124                             VCE.BGblock \2
  125                             DMA.word.port \1, Page.2, vce_data, \1.size
  126                       .endm
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vdc/vdc.inc
   74                         .include "../base_func/video/vdc/vdc.inc"
    1                     
#[3]   ..\base_func\video\vdc\equ.inc
    2                     include "..\base_func\video\vdc\equ.inc"
    1                     ; VDC REG equates
    2                     
    3           0000      MAWR   .equ    $00        ;Memory Access Write Reg
    4           0001      MARR   .equ    $01        ;Memory Access Read Reg
    5           0002      VRWR   .equ    $02        ;Vram Read/Write reg
    6           0002      VWR    .equ    $02        ;Vram Read/Write reg
    7           0002      VRR    .equ    $02        ;Vram Read/Write reg
    8           0005      CR     .equ    $05        ;Control Reg
    9           0006      RCR    .equ    $06        ;Raster Control Reg
   10           0007      BXR    .equ    $07        ;Background X(scroll) Reg
   11           0008      BYR    .equ    $08        ;Background Y(scroll) Reg
   12           0009      MWR    .equ    $09        ;Memory Access Width Reg
   13           000A      HSR    .equ    $0a        ;Horizontal Synchro Reg
   14           000B      HDR    .equ    $0b        ;Horizontal Display Reg
   15           000C      VSR    .equ    $0c        ;Vertical Synchro Reg
   16           000D      VDR    .equ    $0d        ;Vertical Display Reg
   17           000E      VDE    .equ    $0e        ;Vertical Display End Reg
   18           000F      DCR    .equ    $0f        ;DMA Control Reg
   19           0010      DSR    .equ    $10        ;DMA Source Address Reg
   20           0011      DDR    .equ    $11        ;DMA Destination Address Reg
   21           0012      DBR    .equ    $12        ;DMA Block Length Reg
   22           0013      SATB   .equ    $13        ;VRAM-SATB Source Address Reg
   23                     
   24                     
   25                     ;VDC ports
   26           0000      vreg_port    = $0000
   27           0002      vdata_port   = $0002
   28           0002      vdata_port.l = $0002
   29           0003      vdata_port.h = $0003
   30                     
   31                     ;VDC CR reg arguments
   32           0080      BG_ON    = $0080
   33           0000      BG_OFF   = $0000
   34           0040      SPR_ON   = $0040
   35           0000      SPR_OFF  = $0000
   36           0008      VINT_ON  = $0008
   37           0000      VINT_OFF = $0000
   38           0004      HINT_ON  = $0004
   39           0000      HINT_OFF = $0000
   40           0000      ALL_OFF  = $0000
   41                     
   42                     ;VDC vram increment
   43           0000      INC_1   = %00000000
   44           0008      INC_32  = %00001000
   45           0010      INC_64  = %00010000
   46           0018      INC_128 = %00011000
   47                     
   48                     ;VDC map sizes
   49           0000      SCR32_32  = %00000000
   50           0040      SCR32_64  = %01000000
   51           0010      SCR64_32  = %00010000
   52           0050      SCR64_64  = %01010000
   53           0020      SCR128_32 = %00100000
   54           0060      SCR128_64 = %01100000
   55                     
   56                     ;VDC DMA control
   57           0010      AUTO_SATB_ON  = $0010
   58           0000      AUTO_SATB_OFF = $0000
#[2]   ../base_func/video/vdc/vdc.inc
    3                     
    4                     ;//................................................................................
    5                     ;// MACROS
    6                     
    7                     
    8                     ;//................
    9                     WAITVBLANK        .macro
   10                             .if (\#=0)
   11                                 ldx #1
   12                             .endif
   13                     
   14                             .if (\#>0)
   15                                 ldx #\1
   16                             .endif
   17                     
   18                     
   19                             jsr __wait_vblank
   20                         .endm
   21                     
   22                     ;//................
   23                     VDC1    .macro            ;hardware I/O page must be mapped to the first bank
   24                     
   25                         stz $000E
   26                     
   27                         .endm
   28                     
   29                     
   30                     ;//................
   31                     VDC2    .macro            ;hardware I/O page must be mapped to the first bank
   32                     
   33                         inc $000E
   34                     
   35                         .endm
   36                     
   37                     ;//................
   38                     notsafe_VDC.reg     .macro
   39                     
   40                         .if    (\?2=1)
   41                         st0 #\1
   42                         sta $0002
   43                         stz $0003
   44                         .endif
   45                     
   46                         .if    (\#=1)
   47                         st0 #\1
   48                         .endif
   49                     
   50                         .if    (\#=2 & \?2 = 2)
   51                         st0 #\1
   52                         st1 #LOW(\2)
   53                         st2 #HIGH(\2)
   54                          .endif
   55                     
   56                         .if    (\#=3 & \?2 = 6)
   57                         st0 #\1
   58                         lda \2
   59                         sta $0002
   60                         lda \3
   61                         sta $0003
   62                         .endif
   63                     
   64                         .if    (\#=2 & \?2 = 6)
   65                         st0 #\1
   66                         lda \2
   67                         sta $0002
   68                         lda \2+1
   69                         sta $0003
   70                         .endif
   71                     
   72                         .if    (\#=2 & \?2 = 3)
   73                         st0 #\1
   74                         lda \2
   75                         sta $0002
   76                         lda \2+1
   77                         sta $0003
   78                         .endif
   79                     
   80                         .endm
   81                     
   82                     ;//................
   83                     sVDC.reg     .macro
   84                     
   85                         .if    (\?2=1)
   86                         lda #\1
   87                         sta <vdc_reg
   88                         st0 #\1
   89                         sta $0002
   90                         stz $0003
   91                         .endif
   92                     
   93                         .if    (\#=1)
   94                         lda #\1
   95                         sta <vdc_reg
   96                         st0 #\1
   97                         .endif
   98                     
   99                         .if    (\#=2 & \?2 = 2)
  100                         lda #\1
  101                         sta <vdc_reg
  102                         st0 #\1
  103                         st1 #LOW(\2)
  104                         st2 #HIGH(\2)
  105                          .endif
  106                     
  107                         .if    (\#=3 & \?2 = 6)
  108                         lda #\1
  109                         sta <vdc_reg
  110                         st0 #\1
  111                         lda \2
  112                         sta $0002
  113                         lda \3
  114                         sta $0003
  115                         .endif
  116                     
  117                         .if    (\#=2 & \?2 = 6)
  118                         lda #\1
  119                         sta <vdc_reg
  120                         st0 #\1
  121                         lda \2
  122                         sta $0002
  123                         lda \2+1
  124                         sta $0003
  125                         .endif
  126                     
  127                         .if    (\#=2 & \?2 = 3)
  128                         lda #\1
  129                         sta <vdc_reg
  130                         st0 #\1
  131                         lda \2
  132                         sta $0002
  133                         lda \2+1
  134                         sta $0003
  135                         .endif
  136                     
  137                         .endm
  138                     
  139                     ;//................
  140                     VDC2.reg .macro                ;macro for SuperGrafx
  141                     
  142                         .if    (\?2=1)
  143                         st0 #\1
  144                         sta $0012
  145                         stz $0013
  146                         .endif
  147                     
  148                         .if    (\#=1)
  149                         st0 #\1
  150                         .endif
  151                     
  152                         .if    (\#=2 & \?2 != 1)
  153                         st0 #\1
  154                         st1 #LOW(\2)
  155                         st2 #HIGH(\2)
  156                          .endif
  157                     
  158                         .if    (\#=3 & \?3 != 1)
  159                         st0 #\1
  160                         lda \2
  161                         sta $0012
  162                         lda \3
  163                         sta $0013
  164                         .endif
  165                     
  166                         .endm
  167                     
  168                     
  169                     ;//................
  170                     ST1.w .macro
  171                     
  172                          st1 #LOW(\1)
  173                          st2 #HIGH(\1)
  174                     
  175                         .endm
  176                     
  177                     ;//................
  178                     STOW.YA.vport .macro
  179                     
  180                          sta $0002
  181                          sty $0003
  182                     
  183                         .endm
  184                     
  185                     ;//................
  186                     STOW.XA.vport .macro
  187                     
  188                          sta $0002
  189                          stx $0003
  190                     
  191                         .endm
  192                     
  193                     ;//................
  194                     STOW.YA.vport2 .macro
  195                     
  196                          sta $0012
  197                          sty $0013
  198                     
  199                         .endm
  200                     
  201                     ;//................
  202                     STOW.XA.vport2 .macro
  203                     
  204                          sta $0012
  205                          stx $0013
  206                     
  207                         .endm
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vdc/sprites/sprites.inc
   75                         .include "../base_func/video/vdc/sprites/sprites.inc"
    1                     
    2                     ;//...............................
    3                     DMASprites: .macro
    4                         call SATB.dma
    5                         .endm
    6                     
    7                     ;//...............................
    8                     ResetSprites: .macro
    9                         call SATB.reset
   10                         .endm
   11                     
   12                     
   13                     ;//...............................
   14                     HideAllSprites: .macro
   15                         .endm
   16                     
   17                     
   18                     ;//...............................
   19                     ReorderAllSprites: .macro
   20                         .endm
   21                     
   22                     
   23                     ;//...............................
   24                     HideSingleSprite: .macro
   25                         .endm
   26                     
   27                     
   28                     ;//...............................
   29                     ShowSingleSprite: .macro
   30                         .endm
   31                     
   32                     ;//...............................
   33                     SetSpriteAddr: .macro
   34                         lda #low(\1)
   35                         sta SATB.vramAddr
   36                         lda #high(\1)
   37                         sta SATB.vramAddr+1
   38                         .endm
   39                     
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vce/vce.inc
   76                         .include "../base_func/video/vce/vce.inc"
    1                     
#[3]   ..\base_func\video\vce\equ.inc
    2                     include "..\base_func\video\vce\equ.inc"
    1                     
    2                     ; VCE resolution
    3           0000      LO_RES   			= %00000000		;5.369mhz
    4           0000      LOW_RES  			= %00000000		;5.369mhz
    5           0001      MID_RES  			= %00000001		;7.159mhz
    6           0002      HI_RES   			= %00000010		;10.739mhz
    7           0004      H_FILTER_ON 	= %00000100		;263 scanline
    8           0000      H_FILTER_OFF	= %00000000		;262 scanline
    9           0080      BW_MODE				= %10000000		;no color burst signal
   10           0000      COLOR_MODE		= %00000000		;color burst signal
   11                     
   12                     
   13                     ;VCE ports
   14           0400      vce_cntrl  = $400
   15           0402      vce_clr	   = $402
   16           0402      vce_clr.l  = $402
   17           0403      vce_clr.h  = $403
   18           0404      vce_data   = $404
   19           0404      vce_data.l = $404
   20           0405      vce_data.h = $405
#[2]   ../base_func/video/vce/vce.inc
    3                     
    4                     ;//................................................................................
    5                     ;// MACROS
    6                     
    7                     
    8                     ;................................................
    9                     VCE.BGcolor .macro
   10                     
   11                     	lda #(\1)
   12                     	sta $402
   13                     	stz $403
   14                     
   15                     	.endm
   16                     
   17                     ;................................................
   18                     VCE.BGblock .macro
   19                     
   20                     	lda #(\1 << 4)
   21                     	sta $402
   22                     	stz $403
   23                     
   24                     	.endm
   25                     
   26                     ;................................................
   27                     VCE.SPRcolor .macro
   28                     
   29                     	lda #(\1)
   30                     	sta $402
   31                     	lda #$01
   32                     	sta $403
   33                     
   34                     	.endm
   35                     
   36                     ;................................................
   37                     VCE.SPRblock .macro
   38                     
   39                     	lda #(\1 << 4)
   40                     	sta $402
   41                     	lda #$01
   42                     	sta $403
   43                     
   44                     	.endm
   45                     
   46                     ;................................................
   47                     VCE.reg .macro
   48                     
   49                     	lda #(\1)
   50                     	sta $400
   51                     
   52                     	.endm
   53                     
   54                     
   55                     
   56                     ;//................................................................................
   57                     ;// FUNCTIONS
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/timer/timer.inc
   77                         .include "../base_func/timer/timer.inc"
    1                     
    2                     
#[3]   ..\base_func\timer\equ.inc
    3                     include "..\base_func\timer\equ.inc"
    1                      
    2                     ;TIMER ports
    3           0C01      TMR_CMD 	 = $c01
    4           0C00      TMR_PORT 	 = $c00
    5           0001      TMR_ON		 = $01
    6           0000      TMR_OFF		 = $00
    7                     
    8           0000      _7.00khz     = 0
    9           0001      _3.50kha     = 1
   10           0002      _2.33kha     = 2
   11           0003      _1.75kha     = 3
#[2]   ../base_func/timer/timer.inc
    4                     
    5                     ;................................................
    6                     TIMER.reg        .macro
    7                             lda #\2
    8                             sta \1
    9                         .endm
   10                     
   11                     ;................................................
   12                     TIMER.cmd    .macro
   13                             lda #\1
   14                             sta TMR_CMD
   15                         .endm
   16                     
   17                     ;................................................
   18                     TIMER.port    .macro
   19                             lda #\1
   20                             sta TMR_PORT
   21                         .endm
   22                     
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/irq_controller/irq.inc
   78                         .include "../base_func/IO/irq_controller/irq.inc"
    1                     
#[3]   ..\base_func\IO\irq_controller\equ.inc
    2                     include "..\base_func\IO\irq_controller\equ.inc"
    1                     ; IRQ mask 
    2           0000      IRQ2_ON =  %00000000
    3           0000      VIRQ_ON =  %00000000
    4           0000      TIRQ_ON =  %00000000
    5           0001      IRQ2_OFF = %00000001
    6           0002      VIRQ_OFF = %00000010
    7           0004      TIRQ_OFF = %00000100
    8                     
    9                     
   10           0001      VDC_VEC   = $01
   11           0002      BRK_VEC   = $02
   12           0004      TIMER_VEC = $04
   13           0008      VDC_VSYNC = $08
   14           0010      VDC_HSYNC = $10
   15                     
   16           1403      IRQ.ackTIRQ = $1403
   17           0000      IRQ.ackVDC  = $0000
   18                     
   19                     
   20                     
#[2]   ../base_func/IO/irq_controller/irq.inc
    3                     
    4                     ;................................................
    5                     IRQ.control     .macro
    6                     
    7                         lda #\1
    8                         sta $1402
    9                     
   10                         .endm
   11                     
   12                     
   13                     ;................................................
   14                     ISR.setVecMask   .macro
   15                     
   16                         lda #\1
   17                         tsb <vector_mask
   18                     
   19                       .endm
   20                     
   21                     ;................................................
   22                     ISR.resetVecMask   .macro
   23                     
   24                         lda #(\1 ^ 0xff)
   25                         trb <vector_mask
   26                     
   27                       .endm
   28                     
   29                     ;................................................
   30                     ISR.setVector   .macro
   31                     
   32                         php
   33                         sei
   34                     
   35                         ; Convert {1,2,4,8,16} to {0,2,4,6,8}
   36                         .if ( \1 = 1 | \1 = 2 | \1 = 4 | \1 = 8 | \1 = 16 )
   37                             if ( \1 = 1 )
   38                               ldx #0
   39                             .endif
   40                             if ( \1 = 2 )
   41                               ldx #2
   42                             .endif
   43                             if ( \1 = 4 )
   44                               ldx #4
   45                             .endif
   46                             if ( \1 = 8 )
   47                               ldx #6
   48                             .endif
   49                             if ( \1 = 16 )
   50                               ldx #8
   51                             .endif
   52                         .else
   53                           .fail Value needs to be 1,2,4,8, or 16
   54                         .endif
   55                     
   56                         lda #<\2
   57                         sta <irq_vector_list,x
   58                         lda #>\2
   59                         sta <irq_vector_list+1,x
   60                         plp
   61                     
   62                       .endm
   63                     
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/mapper/mapper.inc
   79                         .include "../base_func/IO/mapper/mapper.inc"
    1                     
#[3]   ..\base_func\IO\mapper\equ.inc
    2                         .include "..\base_func\IO\mapper\equ.inc"
    1                     
    2           0000      Page.0  = $0000
    3           2000      Page.1  = $2000
    4           4000      Page.2  = $4000
    5           6000      Page.3  = $6000
    6           8000      Page.4  = $8000
    7           A000      Page.5  = $A000
    8           C000      Page.6  = $C000
    9           D000      Page.7  = $D000
#[2]   ../base_func/IO/mapper/mapper.inc
    3                     
    4                         
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/audio/wsg/wsg.inc
   80                         .include "../base_func/audio/wsg/wsg.inc"
#[3]   ../base_func/audio/wsg/equ.inc
    1                         .include "../base_func/audio/wsg/equ.inc"
    1                     
    2           0800      WSG.ChannelSelect = $800
    3                     
    4           0801      WSG.globalPanVol  = $801
    5           0805      WSG.ChannelPanVol = $805
    6                     
    7           0802      WSG.Frequency.lo  = $802
    8           0803      WSG.Frequency.hi  = $803
    9                     
   10           0804      WSG.Control       = $804
   11                     
   12           0806      WSG.DDAport       = $806
   13           0806      WSG.SamplePort    = $806
   14                     
   15           0807      WSG.NoiseControl  = $807
   16                     
   17           0808      WSG.LFO.frequency = $808
   18           0809      WSG.LFO.control   = $809
   19                     
   20                     
   21           0080      WSG_CHAN_ON       = %10000000
   22           0000      WSG_CHAN_OFF      = %00000000
   23           0040      WSG_MODE_DDA      = %01000000
   24           0000      WSG_MODE_WSG      = %00000000
   25           0080      WSG_NOISE_ON      = %10000000
   26           0000      WSG_NOISE_OFF     = %00000000
   27           0000      WSG_LFO_ON        = %00000000
   28           0080      WSG_LFO_OFF       = %10000000
   29                     
   30                     
   31           0000      WSG_NOISE_FREQ_1.80KHZ  = $00
   32           0001      WSG_NOISE_FREQ_1.86KHZ  = $01
   33           0002      WSG_NOISE_FREQ_1.93KHZ  = $02
   34           0003      WSG_NOISE_FREQ_1.99KHZ  = $03
   35           0004      WSG_NOISE_FREQ_2.07KHZ  = $04
   36           0005      WSG_NOISE_FREQ_2.15KHZ  = $05
   37           0006      WSG_NOISE_FREQ_2.24KHZ  = $06
   38           0007      WSG_NOISE_FREQ_2.33KHZ  = $07
   39           0008      WSG_NOISE_FREQ_2.43KHZ  = $08
   40           0009      WSG_NOISE_FREQ_2.54KHZ  = $09
   41           000A      WSG_NOISE_FREQ_2.66KHZ  = $0A
   42           000B      WSG_NOISE_FREQ_2.80KHZ  = $0B
   43           000C      WSG_NOISE_FREQ_2.94KHZ  = $0C
   44           000D      WSG_NOISE_FREQ_3.11KHZ  = $0D
   45           000E      WSG_NOISE_FREQ_3.29KHZ  = $0E
   46           000F      WSG_NOISE_FREQ_3.50KHZ  = $0F
   47           0010      WSG_NOISE_FREQ_3.73KHZ  = $10
   48           0011      WSG_NOISE_FREQ_3.99KHZ  = $11
   49           0012      WSG_NOISE_FREQ_4.30KHZ  = $12
   50           0013      WSG_NOISE_FREQ_4.66KHZ  = $13
   51           0014      WSG_NOISE_FREQ_5.08KHZ  = $14
   52           0015      WSG_NOISE_FREQ_5.60KHZ  = $15
   53           0016      WSG_NOISE_FREQ_6.21KHZ  = $16
   54           0017      WSG_NOISE_FREQ_6.99KHZ  = $17
   55           0018      WSG_NOISE_FREQ_7.99KHZ  = $18
   56           0019      WSG_NOISE_FREQ_9.32KHZ  = $19
   57           001A      WSG_NOISE_FREQ_11.19KHZ  = $1A
   58           001B      WSG_NOISE_FREQ_13.98KHZ  = $1B
   59           001C      WSG_NOISE_FREQ_18.64KHZ  = $1C
   60           001D      WSG_NOISE_FREQ_27.97KHZ  = $1D
   61           001E      WSG_NOISE_FREQ_55.93KHZ  = $1E
   62           001F      WSG_NOISE_FREQ_0.00KHZ   = $1f
   63                     
   64                     
   65           0000      WSG_PAN_LEFT_0   = $00
   66           0010      WSG_PAN_LEFT_1   = $10
   67           0020      WSG_PAN_LEFT_2   = $20
   68           0030      WSG_PAN_LEFT_3   = $30
   69           0040      WSG_PAN_LEFT_4   = $40
   70           0050      WSG_PAN_LEFT_5   = $50
   71           0060      WSG_PAN_LEFT_6   = $60
   72           0070      WSG_PAN_LEFT_7   = $70
   73           0080      WSG_PAN_LEFT_8   = $80
   74           0090      WSG_PAN_LEFT_9   = $90
   75           00A0      WSG_PAN_LEFT_10  = $A0
   76           00B0      WSG_PAN_LEFT_11  = $B0
   77           00C0      WSG_PAN_LEFT_12  = $C0
   78           00D0      WSG_PAN_LEFT_13  = $D0
   79           00E0      WSG_PAN_LEFT_14  = $E0
   80           00F0      WSG_PAN_LEFT_15  = $F0
   81                     
   82                     
   83           0000      WSG_PAN_RIGHT_0  = $00
   84           0001      WSG_PAN_RIGHT_1  = $01
   85           0002      WSG_PAN_RIGHT_2  = $02
   86           0003      WSG_PAN_RIGHT_3  = $03
   87           0004      WSG_PAN_RIGHT_4  = $04
   88           0005      WSG_PAN_RIGHT_5  = $05
   89           0006      WSG_PAN_RIGHT_6  = $06
   90           0007      WSG_PAN_RIGHT_7  = $07
   91           0008      WSG_PAN_RIGHT_8  = $08
   92           0009      WSG_PAN_RIGHT_9  = $09
   93           000A      WSG_PAN_RIGHT_10 = $0A
   94           000B      WSG_PAN_RIGHT_11 = $0B
   95           000C      WSG_PAN_RIGHT_12 = $0C
   96           000D      WSG_PAN_RIGHT_13 = $0D
   97           000E      WSG_PAN_RIGHT_14 = $0E
   98           000F      WSG_PAN_RIGHT_15 = $0F
   99                     
#[2]   ../base_func/audio/wsg/wsg.inc
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/gamepad/gamepad.inc
   81                         .include "../base_func/IO/gamepad/gamepad.inc"
    1                     
#[3]   ../base_func/IO/gamepad/equ.inc
    2                         .include "../base_func/IO/gamepad/equ.inc"
#[2]   ../base_func/IO/gamepad/gamepad.inc
    3                     
    4                     
#[1]   ghosthouse_build_1.asm
   82                     
#[2]   ../lib/controls/controls.inc
   83                         .include "../lib/controls/controls.inc"
    1                     
#[3]   ../lib/controls/equ.inc
    2                         .include "../lib/controls/equ.inc"
    1                     
    2                     
    3           2525      input_state.buttons    = input_state
    4           2526      input_state.directions = input_state+1
    5                     
    6           0003      control.b1.mask     = %00000011
    7           0002      control.b1.held     = %00000010
    8           0003      control.b1.pressed  = %00000011
    9           0001      control.b1.released = %00000001
   10           0000      control.b1.inactive = %00000000
   11                     
   12           000C      control.b2.mask     = %00001100
   13           0008      control.b2.held     = %00001000
   14           000C      control.b2.pressed  = %00001100
   15           0004      control.b2.released = %00000100
   16           0000      control.b2.inactive = %00000000
   17                     
   18           0030      control.st.mask     = %00110000
   19           0020      control.st.held     = %00100000
   20           0030      control.st.pressed  = %00110000
   21           0010      control.st.released = %00010000
   22           0000      control.st.inactive = %00000000
   23                     
   24           00C0      control.sl.mask     = %11000000
   25           0080      control.sl.held     = %10000000
   26           00C0      control.sl.pressed  = %11000000
   27           0040      control.sl.released = %01000000
   28           0000      control.sl.inactive = %00000000
   29                     
   30           0003      control.up.mask     = %00000011
   31           0002      control.up.held     = %00000010
   32           0003      control.up.pressed  = %00000011
   33           0001      control.up.released = %00000001
   34           0000      control.up.inactive = %00000000
   35                     
   36           000C      control.dn.mask     = %00001100
   37           0008      control.dn.held     = %00001000
   38           000C      control.dn.pressed  = %00001100
   39           0004      control.dn.released = %00000100
   40           0000      control.dn.inactive = %00000000
   41                     
   42           0030      control.lf.mask     = %00110000
   43           0020      control.lf.held     = %00100000
   44           0030      control.lf.pressed  = %00110000
   45           0010      control.lf.released = %00010000
   46           0000      control.lf.inactive = %00000000
   47                     
   48           00C0      control.rh.mask     = %11000000
   49           0080      control.rh.held     = %10000000
   50           00C0      control.rh.pressed  = %11000000
   51           0040      control.rh.released = %01000000
   52           0000      control.rh.inactive = %00000000
   53                     
#[2]   ../lib/controls/controls.inc
    3                     
#[1]   ghosthouse_build_1.asm
#[2]   ../lib/random/16bit/random_16bit.inc
   84                         .include "../lib/random/16bit/random_16bit.inc"
    1                     
    2                     
    3                     
    4                     
    5                     Random.seed .macro
    6                     
    7                           .if (\?1=2)
    8                               lda #low(\1)
    9                               sta random.RNG.lo
   10                               lda #high(\1)
   11                               sta random.RNG.hi
   12                           .endif
   13                     
   14                           .if (\?1=1)
   15                               sta random.RNG.lo
   16                               stx random.RNG.hi
   17                           .endif
   18                     
   19                           .if (\?1=3)
   20                               lda \1
   21                               sta random.RNG.lo
   22                               lda \1+1
   23                               sta random.RNG.hi
   24                           .endif
   25                     
   26                           .if (\?1=3)
   27                               lda \1
   28                               sta random.RNG.lo
   29                               lda \1+1
   30                               sta random.RNG.hi
   31                           .endif
   32                     
   33                           .if (\?1=6)
   34                               lda \1
   35                               sta random.RNG.lo
   36                               lda \1+1
   37                               sta random.RNG.hi
   38                           .endif
   39                     
   40                           .if (\?1=4)
   41                               lda [\1]
   42                               sta random.RNG.lo
   43                               ldy #$01
   44                               lda [\1],y
   45                               sta random.RNG.hi
   46                           .endif
   47                     
   48                     
   49                       .endm
   50                     
#[1]   ghosthouse_build_1.asm
   85                     
#[2]   ../demo/demo.inc
   86                         .include "../demo/demo.inc"
#[3]   ../demo/equ.inc
    1                     include "../demo/equ.inc"
#[2]   ../demo/demo.inc
#[1]   ghosthouse_build_1.asm
   87                     
   88                     
   89                     ;/////////////////////////////////////////////////////////////////////////////////
   90                     ;/////////////////////////////////////////////////////////////////////////////////
   91                     ;/////////////////////////////////////////////////////////////////////////////////
   92                     ;
   93                     ;// Startup and fix lib @$E000
   94                     
   95  00:E000            startup:
   96                             ;................................
   97                             ;Main initialization routine.
   98                             InitialStartup
                          
       00:E000  78                        sei
       00:E001  D8                        cld
       00:E002  D4                        csh
       00:E003  A2 FF                     ldx #$ff
       00:E005  9A                        txs
       00:E006  A9 FF                     lda #$ff
       00:E008  53 01                     tam #$00
       00:E00A  A9 F8                     lda #$f8
       00:E00C  53 02                     tam #$01
                          
   99                             CallFarWide init_audio
       00:E00E  43 10                     tma #page(init_audio)
       00:E010  48                        pha
       00:E011  43 20                     tma #page(init_audio) + 1
       00:E013  48                        pha
                          
       00:E014  A9 02                     lda #bank(init_audio)
       00:E016  53 10                     tam #page(init_audio)
       00:E018  1A                        inc a
       00:E019  53 20                     tam #page(init_audio) + 1
       00:E01B  20 10 8C                  jsr init_audio
                          
       00:E01E  68                        pla
       00:E01F  53 20                     tam #page(init_audio) + 1
       00:E021  68                        pla
       00:E022  53 10                     tam #page(init_audio)
                          
  100                             CallFarWide init_video
       00:E024  43 10                     tma #page(init_video)
       00:E026  48                        pha
       00:E027  43 20                     tma #page(init_video) + 1
       00:E029  48                        pha
                          
       00:E02A  A9 02                     lda #bank(init_video)
       00:E02C  53 10                     tam #page(init_video)
       00:E02E  1A                        inc a
       00:E02F  53 20                     tam #page(init_video) + 1
       00:E031  20 34 8C                  jsr init_video
                          
       00:E034  68                        pla
       00:E035  53 20                     tam #page(init_video) + 1
       00:E037  68                        pla
       00:E038  53 10                     tam #page(init_video)
                          
  101                     
  102  00:E03A  9C 00 20          stz $2000
  103  00:E03D  73 00 20          tii $2000,$2001,$2000
       00:E040  01 20 00  
       00:E043  20        
  104                     
  105                             ;................................
  106                             ;Set video parameters
  107                             VCE.reg LO_RES|H_FILTER_ON
                          
       00:E044  A9 04     	lda #(LO_RES|H_FILTER_ON)
       00:E046  8D 00 04  	sta $400
                          
  108                             sVDC.reg HSR  , #$0202
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E049  A9 0A         lda #HSR
       00:E04B  85 4C         sta <vdc_reg
       00:E04D  03 0A         st0 #HSR
       00:E04F  13 02         st1 #LOW(#$0202)
       00:E051  23 02         st2 #HIGH(#$0202)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  109           0000      ifdef DEBUG_BENCHMARK
  112                     else
  113                             sVDC.reg HDR  , #$041f
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E053  A9 0B         lda #HDR
       00:E055  85 4C         sta <vdc_reg
       00:E057  03 0B         st0 #HDR
       00:E059  13 1F         st1 #LOW(#$041f)
       00:E05B  23 04         st2 #HIGH(#$041f)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  114                             sVDC.reg VSR  , #$1402
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E05D  A9 0C         lda #VSR
       00:E05F  85 4C         sta <vdc_reg
       00:E061  03 0C         st0 #VSR
       00:E063  13 02         st1 #LOW(#$1402)
       00:E065  23 14         st2 #HIGH(#$1402)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  115                     endif
  116                             sVDC.reg VDR  , #$00df
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E067  A9 0D         lda #VDR
       00:E069  85 4C         sta <vdc_reg
       00:E06B  03 0D         st0 #VDR
       00:E06D  13 DF         st1 #LOW(#$00df)
       00:E06F  23 00         st2 #HIGH(#$00df)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  117                             sVDC.reg VDE  , #$00ff
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E071  A9 0E         lda #VDE
       00:E073  85 4C         sta <vdc_reg
       00:E075  03 0E         st0 #VDE
       00:E077  13 FF         st1 #LOW(#$00ff)
       00:E079  23 00         st2 #HIGH(#$00ff)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  118                             sVDC.reg DCR  , #AUTO_SATB_ON
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E07B  A9 0F         lda #DCR
       00:E07D  85 4C         sta <vdc_reg
       00:E07F  03 0F         st0 #DCR
       00:E081  13 10         st1 #LOW(#AUTO_SATB_ON)
       00:E083  23 00         st2 #HIGH(#AUTO_SATB_ON)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  119                             sVDC.reg CR   , #$0000
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E085  A9 05         lda #CR
       00:E087  85 4C         sta <vdc_reg
       00:E089  03 05         st0 #CR
       00:E08B  13 00         st1 #LOW(#$0000)
       00:E08D  23 00         st2 #HIGH(#$0000)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  120                             sVDC.reg SATB , #$0800
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E08F  A9 13         lda #SATB
       00:E091  85 4C         sta <vdc_reg
       00:E093  03 13         st0 #SATB
       00:E095  13 00         st1 #LOW(#$0800)
       00:E097  23 08         st2 #HIGH(#$0800)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  121                             sVDC.reg MWR  , #SCR32_32
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       00:E099  A9 09         lda #MWR
       00:E09B  85 4C         sta <vdc_reg
       00:E09D  03 09         st0 #MWR
       00:E09F  13 00         st1 #LOW(#SCR32_32)
       00:E0A1  23 00         st2 #HIGH(#SCR32_32)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  122                     
  123                             IRQ.control IRQ2_ON|VIRQ_ON|TIRQ_OFF
                          
       00:E0A3  A9 04         lda #IRQ2_ON|VIRQ_ON|TIRQ_OFF
       00:E0A5  8D 02 14      sta $1402
                          
  124                     
  125                             TIMER.port  _7.00khz
       00:E0A8  A9 00             lda #_7.00khz
       00:E0AA  8D 00 0C          sta TMR_PORT
  126                             TIMER.cmd   TMR_OFF
       00:E0AD  A9 00             lda #TMR_OFF
       00:E0AF  8D 01 0C          sta TMR_CMD
  127                     
  128                             MAP_BANK #MAIN, MPR6
                          
                0001          .if (2=2)
       00:E0B2  A9 01         lda #bank(#MAIN)
       00:E0B4  53 40         tam #(MPR6)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
  129  00:E0B6  4C 00 C0          jmp MAIN
  130                     
  131                     ;/////////////////////////////////////////////////////////////////////////////////
  132                     ;/////////////////////////////////////////////////////////////////////////////////
  133                     ;/////////////////////////////////////////////////////////////////////////////////
  134                     ;
  135                     ;// Data / fixed bank
  136                     
  137                     
  138                     ;Stuff for printing on screen
#[2]   ../base_func/video/print/lib.asm
  139                         .include "../base_func/video/print/lib.asm"
    1                     
#[3]   ..\base_func\video\print\print.inc
    2                     include "..\base_func\video\print\print.inc"
    1                     ;///////////////////////////////////////////////////////////////////////////////
    2                     ;///////////////////////////////////////////////////////////////////////////////
    3                     ;///////////////////////////////////////////////////////////////////////////////
    4                     ;
    5                     ; MACROS
    6                     ;
    7                     
    8                     PRINT_STR		.macro
    9                           lda #low(\1)
   10                           sta <R0
   11                           lda #high(\1)
   12                           sta <R0+1
   13                           lda #low((\3 * $40)+(\2 & $3f)
   14                           ldx #high((\3 * $40)+(\2 & $3f)
   15                      			clc
   16                           jsr PrintString
   17                     	.endm
   18                     
   19                     
   20                     
   21                     PRINT_STR_q		.macro
   22                           lda #low((\2 * $40)+(\1 & $3f))
   23                           ldx #high((\2 * $40)+(\1 & $3f))
   24                     			clc
   25                           jsr PrintString
   26                     	.endm
   27                     
   28                     PRINT_STR_s		.macro
   29                     			lda \1
   30                     			and #$3f
   31                     			sta <D7
   32                     			lda \2
   33                     			asl a
   34                     			asl a
   35                     			asl a
   36                     			asl a
   37                     			asl a
   38                     			asl a
   39                     			clc
   40                     			adc <D7
   41                     			sax
   42                     			lda \2
   43                     			lsr a
   44                     			lsr a
   45                     			sax
   46                     			clc
   47                           jsr PrintString
   48                     	.endm
   49                     
   50                     
   51                     PRINT_STR_a		.macro
   52                     			sec
   53                           jsr PrintString
   54                     	.endm
   55                     
   56                     PRINT_STR_a_ptr		.macro
   57                           lda #low(\1)
   58                           sta <R0
   59                           lda #high(\1)
   60                           sta <R0+1
   61                     			sec
   62                           jsr PrintString
   63                     	.endm
   64                     
   65                     PRINT_STR_i   .macro
   66                           bra .y_\@
   67                     .x_\@:
   68                           .db \1,0
   69                     .y_\@:
   70                           lda #low(.x_\@)
   71                           sta <R0
   72                           lda #high(.x_\@)
   73                           sta <R0+1
   74                     			lda #low((\3 * $40)+(\2 & $3f))
   75                     			ldx #high((\3 * $40)+(\2 & $3f))
   76                           clc
   77                           jsr PrintString
   78                       .endm
   79                     
   80                     
   81                     PRINT_STR_i_a   .macro
   82                           bra .y_\@
   83                     .x_\@:
   84                           .db \1,0
   85                     .y_\@:
   86                           lda #low(.x_\@)
   87                           sta <R0
   88                           lda #high(.x_\@)
   89                           sta <R0+1
   90                           sec
   91                           jsr PrintString
   92                       .endm
   93                     
   94                     ;...........................................
   95                     
   96                     PRINT_BYTEdec		.macro
   97                           lda #low((\3 * $40)+(\2 & $3f))
   98                           ldx #high((\3 * $40)+(\2 & $3f))
   99                           ldy \1
  100                     			clc
  101                           jsr PrintByteDec
  102                     	.endm
  103                     
  104                     PRINT_BYTEdec_q		.macro
  105                           lda #low((\2 * $40)+(\1 & $3f))
  106                           ldx #high((\2 * $40)+(\1 & $3f))
  107                     			clc
  108                           jsr PrintByteDec
  109                     	.endm
  110                     
  111                     PRINT_BYTEdec_a_q		.macro
  112                     			ldy \1
  113                     			sec
  114                           jsr PrintByteDec
  115                     	.endm
  116                     
  117                     PRINT_BYTEhex_a_q		.macro
  118                     			ldy \1
  119                     			sec
  120                           jsr PrintByte
  121                     	.endm
  122                     
  123                     PRINT_BYTEhex		.macro
  124                           lda #low((\3 * $40)+(\2 & $3f))
  125                           ldx #high((\3 * $40)+(\2 & $3f))
  126                           ldy \1
  127                     			clc
  128                           jsr PrintByte
  129                     	.endm
  130                     
  131                     PRINT_BYTEhex_q		.macro
  132                           lda #low((\2 * $40)+(\1 & $3f))
  133                           ldx #high((\2 * $40)+(\1 & $3f))
  134                     			clc
  135                           jsr PrintByte
  136                     	.endm
  137                     
  138                     
  139                     ;...........................................
  140                     PRINT_CHAR_s		.macro
  141                     			lda \1
  142                     			and #$3f
  143                     			sta <D7
  144                     			lda \2
  145                     			asl a
  146                     			asl a
  147                     			asl a
  148                     			asl a
  149                     			asl a
  150                     			asl a
  151                     			clc
  152                     			adc <D7
  153                     			sax
  154                     			lda \2
  155                     			lsr a
  156                     			lsr a
  157                     			sax
  158                     			clc
  159                           jsr PrintChar
  160                     	.endm
  161                     
  162                     
  163                     PRINT_CHAR		.macro
  164                           lda #low((\2 * $40)+(\1 & $3f))
  165                           ldx #high((\2 * $40)+(\1 & $3f))
  166                     			clc
  167                           jsr PrintChar
  168                     	.endm
  169                     
  170                     
  171                     PRINT_CHAR_a		.macro
  172                     			sec
  173                           jsr PrintChar
  174                     	.endm
  175                     
  176                     PRINT_CHAR_a_q		.macro
  177                     			ldy \1
  178                     			sec
  179                           jsr PrintChar
  180                     	.endm
  181                     
  182                     PRINT_CHAR_a_Acc		.macro
  183                     			tay
  184                     			sec
  185                           jsr PrintChar
  186                     	.endm
  187                     
  188                     PRINT_CHAR_a_X		.macro
  189                     			sxy
  190                     			sec
  191                           jsr PrintChar
  192                     	.endm
  193                     
  194                     ;...........................................
  195                     PRINT_DBYTEhex_a		.macro
  196                     			ldy \1+1
  197                     			sec
  198                           jsr PrintByte
  199                     			ldy \1
  200                     			sec
  201                           jsr PrintByte
  202                     	.endm
  203                     
  204                     
  205                     ;...........................................
  206                     
  207                     PRINT_STATUS	.macro
  208                     			lda #\2
  209                     			sta <D3
  210                     			lda #\3
  211                     			sta <D3+1
  212                     			
  213                     			lda #low(\1)
  214                     			sta <A1
  215                     			lda #high(\1)
  216                     			sta <A1+1
  217                     			
  218                     		jsr PrintStatus
  219                     	.endm
  220                     
  221                     
  222                     
  223                     
#[2]   ../base_func/video/print/lib.asm
    3                     
    4                     ;...............................................................................
    5                     ;//Print string ascii string
    6                     ;///////////////////////////
    7                     ; vram addr in X:A
    8                     ; string addr in R0
    9                     ;
   10  00:E0B9            PrintString:
   11  00:E0B9  B0 0A         bcs .skip
   12  00:E0BB  64 4C     	    stz <vdc_reg
   13  00:E0BD  03 00     	    st0 #$00
   14  00:E0BF  8D 02 00  	    sta $0002
   15  00:E0C2  8E 03 00  	    stx $0003
   16  00:E0C5            .skip
   17  00:E0C5  A9 02     	    lda #$02
   18  00:E0C7  85 4C     	    sta <vdc_reg
   19  00:E0C9  03 02     	    st0 #$02
   20  00:E0CB  C2        	    cly
   21                     
   22  00:E0CC            .ll01
   23  00:E0CC  B1 00     	    lda [R0],y
   24  00:E0CE  F0 0B     	  beq .out
   25  00:E0D0  38        	    sec
   26  00:E0D1  E9 20     	    sbc #$20
   27  00:E0D3  8D 02 00  	    sta $0002
   28  00:E0D6  23 01     	    st2 #$01
   29  00:E0D8  C8        	    iny
   30  00:E0D9  80 F1         bra .ll01
   31  00:E0DB            .out
   32  00:E0DB  60          rts
   33                       
   34                      
   35                     ;...............................................................................
   36                     ;//Print variable to x,y location
   37                     ;/ X:A vram addr
   38                     ;/ y=value
   39                     ;/ Carry; 1=append last location, 0=location in X:A
   40  00:E0DC            PrintByte:
   41  00:E0DC  B0 0A         bcs .skip
   42  00:E0DE  64 4C     	    stz <vdc_reg
   43  00:E0E0  03 00     	    st0 #$00
   44  00:E0E2  8D 02 00  	    sta $0002
   45  00:E0E5  8E 03 00  	    stx $0003
   46  00:E0E8            .skip   
   47  00:E0E8  A9 02     	    lda #$02
   48  00:E0EA  85 4C     	    sta <vdc_reg
   49  00:E0EC  03 02     	    st0 #$02
   50  00:E0EE  98        	    tya
   51  00:E0EF  AA        	    tax
   52  00:E0F0  4A        	    lsr a
   53  00:E0F1  4A        	    lsr a
   54  00:E0F2  4A        	    lsr a
   55  00:E0F3  4A        	    lsr a
   56  00:E0F4  A8        	    tay
   57  00:E0F5  B9 5E E1  	    lda hex_conv,y
   58  00:E0F8  38        	    sec
   59  00:E0F9  E9 20     	    sbc #$20
   60  00:E0FB  8D 02 00  	    sta $0002
   61  00:E0FE  23 01     	    st2 #$01
   62  00:E100  8A        	    txa
   63  00:E101  29 0F     	    and #$0f
   64  00:E103  A8        	    tay
   65  00:E104  B9 5E E1  	    lda hex_conv,y
   66  00:E107  38        	    sec
   67  00:E108  E9 20     	    sbc #$20
   68  00:E10A  8D 02 00  	    sta $0002
   69  00:E10D  23 01     	    st2 #$01
   70  00:E10F  60          rts 
   71                     
   72  00:E110            print_lo_nibble:
   73  00:E110  B0 10         bcs .skip
   74  00:E112  64 4C     	    stz <vdc_reg
   75  00:E114  03 00     	    st0 #$00
   76  00:E116  8D 02 00  	    sta $0002
   77  00:E119  8E 03 00  	    stx $0003
   78  00:E11C  A9 02     	    lda #$02
   79  00:E11E  85 4C     	    sta <vdc_reg
   80  00:E120  03 02     	    st0 #$02
   81  00:E122            .skip   
   82  00:E122  A8        	    tay
   83  00:E123  29 0F     	    and #$0f
   84  00:E125  A8        	    tay
   85  00:E126  B9 5E E1  	    lda hex_conv,y
   86  00:E129  38        	    sec
   87  00:E12A  E9 20     	    sbc #$20
   88  00:E12C  8D 02 00  	    sta $0002
   89  00:E12F  23 01     	    st2 #$01
   90  00:E131  60          rts 
   91                     
   92  00:E132            print_hi_nibble:
   93  00:E132  B0 10         bcs .skip
   94  00:E134  64 4C     	    stz <vdc_reg
   95  00:E136  03 00     	    st0 #$00
   96  00:E138  8D 02 00  	    sta $0002
   97  00:E13B  8E 03 00  	    stx $0003
   98  00:E13E  A9 02     	    lda #$02
   99  00:E140  85 4C     	    sta <vdc_reg
  100  00:E142  03 02     	    st0 #$02
  101  00:E144            .skip   
  102  00:E144  A8        	    tay
  103  00:E145  4A        	    lsr a
  104  00:E146  4A        	    lsr a
  105  00:E147  4A        	    lsr a
  106  00:E148  4A        	    lsr a
  107  00:E149  A8        	    tay
  108  00:E14A  B9 5E E1  	    lda hex_conv,y
  109  00:E14D  38        	    sec
  110  00:E14E  E9 20     	    sbc #$20
  111  00:E150  8D 02 00  	    sta $0002
  112  00:E153  23 01     	    st2 #$01
  113  00:E155  60          rts 
  114                     
  115  00:E156            print_indent:
  116  00:E156            .ll01
  117  00:E156  13 00     	    st1 #$00
  118  00:E158  23 00     	    st2 #$00
  119  00:E15A  88        	    dey
  120  00:E15B  D0 F9         bne .ll01
  121  00:E15D  60          rts
  122                         
  123                     ;near data table
  124  00:E15E            hex_conv:
  125  00:E15E  30 31 32      .db '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
       00:E161  33 34 35  
       00:E164  36 37 38  
       00:E167  39 41 42  
       00:E16A  43 44 45  
       00:E16D  46        
  126                     
  127                     
  128                     ;...............................................................................
  129                     ;//Clears the screen with blank space
  130                     ;/ Note: no arguments, no whining. 
  131                     ;/ Note: This the 64x32 version.
  132  00:E16E            ClearScreen:
  133  00:E16E  03 00     			st0 #$00
  134  00:E170  13 00     			st1 #$00
  135  00:E172  23 00     			st2 #$00
  136  00:E174  03 02     			st0 #$02
  137  00:E176  A9 02     			lda #$02
  138  00:E178  85 4C     			sta <vdc_reg
  139  00:E17A  82        			clx
  140  00:E17B  A0 08     			ldy #$08
  141  00:E17D  13 00     			st1 #$00
  142  00:E17F            .loop
  143  00:E17F  23 01     			st2 #$01
  144  00:E181  E8        			inx 
  145  00:E182  D0 FB     		bne .loop
  146  00:E184  88        			dey
  147  00:E185  D0 F8     		bne .loop
  148  00:E187  60        	rts
  149                     	
  150                     ;...............................................................................
  151                     ;//Clears the screen with blank space
  152                     ;/ Note: no arguments, no whining. 
  153                     ;/ Note: This the 64x32 version.
  154  00:E188            ClearScreen.32x32:
  155  00:E188  03 00     			st0 #$00
  156  00:E18A  13 00     			st1 #$00
  157  00:E18C  23 00     			st2 #$00
  158  00:E18E  03 02     			st0 #$02
  159  00:E190  A9 02     			lda #$02
  160  00:E192  85 4C     			sta <vdc_reg
  161  00:E194  82        			clx
  162  00:E195  A0 04     			ldy #$04
  163  00:E197  13 00     			st1 #$00
  164  00:E199            .loop
  165  00:E199  23 01     			st2 #$01
  166  00:E19B  E8        			inx 
  167  00:E19C  D0 FB     		bne .loop
  168  00:E19E  88        			dey
  169  00:E19F  D0 F8     		bne .loop
  170  00:E1A1  60        	rts
  171                     	
  172                     ;...............................................................................
  173                     ;//Clears the screen with blank space
  174                     ;/ Note: no arguments, no whining. 
  175                     ;/ Note: This the 64x32 version.
  176  00:E1A2            ClearScreen.64x32:
  177  00:E1A2  03 00     			st0 #$00
  178  00:E1A4  13 00     			st1 #$00
  179  00:E1A6  23 00     			st2 #$00
  180  00:E1A8  03 02     			st0 #$02
  181  00:E1AA  A9 02     			lda #$02
  182  00:E1AC  85 4C     			sta <vdc_reg
  183  00:E1AE  82        			clx
  184  00:E1AF  A0 08     			ldy #$08
  185  00:E1B1  13 00     			st1 #$00
  186  00:E1B3            .loop
  187  00:E1B3  23 01     			st2 #$01
  188  00:E1B5  E8        			inx 
  189  00:E1B6  D0 FB     		bne .loop
  190  00:E1B8  88        			dey
  191  00:E1B9  D0 F8     		bne .loop
  192  00:E1BB  60        	rts
  193                     
  194                     ;...............................................................................
  195                     ;//Clears the screen with blank space
  196                     ;/ Note: no arguments, no whining. 
  197                     ;/ Note: This the 64x32 version.
  198  00:E1BC            ClearScreen.64x64:
  199  00:E1BC  03 00     			st0 #$00
  200  00:E1BE  13 00     			st1 #$00
  201  00:E1C0  23 00     			st2 #$00
  202  00:E1C2  03 02     			st0 #$02
  203  00:E1C4  A9 02     			lda #$02
  204  00:E1C6  85 4C     			sta <vdc_reg
  205  00:E1C8  82        			clx
  206  00:E1C9  A0 10     			ldy #$10
  207  00:E1CB  13 00     			st1 #$00
  208  00:E1CD            .loop
  209  00:E1CD  23 01     			st2 #$01
  210  00:E1CF  E8        			inx 
  211  00:E1D0  D0 FB     		bne .loop
  212  00:E1D2  88        			dey
  213  00:E1D3  D0 F8     		bne .loop
  214  00:E1D5  60        	rts
  215                     
  216                     ;...............................................................................
  217                     ;//Clears the screen with blank space
  218                     ;/ Note: no arguments, no whining. 
  219                     ;/ Note: This the 64x32 version.
  220  00:E1D6            PrintByteDec:
  221                     			
  222  00:E1D6  B0 0A         bcs .skip
  223  00:E1D8  64 4C     	    stz <vdc_reg
  224  00:E1DA  03 00     	    st0 #$00
  225  00:E1DC  8D 02 00  	    sta $0002
  226  00:E1DF  8E 03 00  	    stx $0003
  227  00:E1E2            .skip   
  228  00:E1E2  A9 02     	    lda #$02
  229  00:E1E4  85 4C     	    sta <vdc_reg
  230  00:E1E6  03 02     	    st0 #$02
  231                     
  232  00:E1E8  98        			tya
  233  00:E1E9  C9 C8     			cmp #200
  234  00:E1EB  90 07     		bcc .not200
  235  00:E1ED  38        			sec
  236  00:E1EE  E9 C8     			sbc #200
  237  00:E1F0  A2 12     			ldx #$12
  238  00:E1F2  80 09     		bra .drawUpper 
  239  00:E1F4            .not200
  240  00:E1F4  C9 64     			cmp #100
  241  00:E1F6  90 0A     		bcc .lowerDigits
  242  00:E1F8  38        			sec
  243  00:E1F9  E9 64     			sbc #100
  244  00:E1FB  A2 11     			ldx #$11
  245                     
  246  00:E1FD            .drawUpper 
  247  00:E1FD  8E 02 00  	    stx $0002
  248  00:E200  23 01     	    st2 #$01
  249                     	
  250  00:E202            .lowerDigits
  251  00:E202  C2        			cly
  252  00:E203  C9 0A     			cmp #10
  253  00:E205  90 08     		bcc .done
  254  00:E207            .loop
  255  00:E207  C8        			iny
  256  00:E208  38        			sec
  257  00:E209  E9 0A     			sbc #10
  258  00:E20B  C9 0A     			cmp #10
  259  00:E20D  B0 F8     		bcs .loop
  260  00:E20F            .done			
  261  00:E20F  42        			say
  262  00:E210  18        			clc
  263  00:E211  69 10     			adc #$10
  264  00:E213  8D 02 00  			sta $0002
  265  00:E216  23 01     			st2 #$01
  266  00:E218  42        			say
  267  00:E219  18        			clc
  268  00:E21A  69 10     			adc #$10
  269  00:E21C  8D 02 00  			sta $0002
  270  00:E21F  23 01     			st2 #$01
  271  00:E221  60        	rts
  272                     
  273                     ;...............................................................................
  274                     ;//Clears the screen with blank space
  275                     ;/ Note: no arguments, no whining. 
  276                     ;/ Note: This the 64x32 version.
  277  00:E222            PrintChar:
  278                     			
  279  00:E222  B0 0A         bcs .skip
  280  00:E224  64 4C     	    stz <vdc_reg
  281  00:E226  03 00     	    st0 #$00
  282  00:E228  8D 02 00  	    sta $0002
  283  00:E22B  8E 03 00  	    stx $0003
  284  00:E22E            .skip   
  285  00:E22E  A9 02     	    lda #$02
  286  00:E230  85 4C     	    sta <vdc_reg
  287  00:E232  03 02     	    st0 #$02
  288                     
  289                     
  290  00:E234  98        			tya
  291  00:E235  38        			sec
  292  00:E236  E9 20     			sbc #$20
  293  00:E238  8D 02 00  			sta $0002
  294  00:E23B  23 01     			st2 #$01
  295  00:E23D  60        	rts
  296                     			
  297                     			
  298                     ;//...............................................................................................
  299                     ;//Internal ZP reg
  300           0000      	.ifndef R0
  305                     	.endif
#[1]   ghosthouse_build_1.asm
  140                     
  141                     ;other basic functions
#[2]   ../base_func/video/vdc/lib.asm
  142                         .include "../base_func/video/vdc/lib.asm"
    1  00:E23E            __wait_vblank:
    2  00:E23E            .reload.loop
    3  00:E23E  A9 01                 lda #$01
    4  00:E240  8D 08 22              sta __vblank
    5  00:E243            .loop
    6  00:E243  AD 08 22              lda __vblank
    7  00:E246  D0 FB                 bne .loop
    8  00:E248  CA                    dex
    9  00:E249  D0 F3                 bne .reload.loop
   10  00:E24B  60            rts
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/video/vdc/sprites/lib.asm
  143                         .include "../base_func/video/vdc/sprites/lib.asm"
    1                     
    2                     
    3                     ;.......................................................
    4                     ;
    5  00:E24C            SATB.reset
    6                     
    7  00:E24C  82                clx
    8  00:E24D            .loop
    9  00:E24D  9E 09 22          stz cell.Y.lo,x
   10  00:E250  9E 69 22          stz cell.Y.hi,x
   11                     
   12                             ; stz cell.X.lo,x
   13                             ; stz cell.X.hi,x
   14                     
   15                             ; stz cell.attribs.lo,x
   16                             ; stz cell.attribs.hi,x
   17                     
   18                             ; stz cell.pattern.lo,x
   19                             ; stz cell.pattern.hi,x
   20                     
   21  00:E253  E8                inx
   22  00:E254  E0 60             cpx #SpriteGroupSize
   23  00:E256  D0 F5           bne .loop
   24  00:E258  9C 0B 25          stz SATB.openslot
   25  00:E25B  A9 40             lda #$40
   26  00:E25D  8D 0C 25          sta SATB.openslot.hpriority
   27                     
   28  00:E260  60          rts
   29                     
   30                     
   31                     ;.......................................................
   32                     ;
   33  00:E261            SATB.dma
   34                             sVDC.reg MAWR, SATB.vramAddr
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       00:E261  A9 00         lda #MAWR
       00:E263  85 4C         sta <vdc_reg
       00:E265  03 00         st0 #MAWR
       00:E267  AD 09 25      lda SATB.vramAddr
       00:E26A  8D 02 00      sta $0002
       00:E26D  AD 0A 25      lda SATB.vramAddr+1
       00:E270  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
   35                             sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       00:E273  A9 02         lda #VRWR
       00:E275  85 4C         sta <vdc_reg
       00:E277  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
   36                     
   37                             ;debug box
   38                             ; lda player.camera.y
   39                             ; clc
   40                             ; adc #low(0)
   41                             ; sta $0002
   42                             ; lda player.camera.y+1
   43                             ; adc #high(0)
   44                             ; sta $0003
   45                     
   46                             ; lda player.camera.x
   47                             ; clc
   48                             ; adc #low(0)
   49                             ; sta $0002
   50                             ; lda player.camera.x+1
   51                             ; adc #high(0)
   52                             ; sta $0003
   53                     
   54                             ; lda #low($f0*2)
   55                             ; sta $0002
   56                             ; lda #high($f0*2)
   57                             ; sta $0003
   58                     
   59                             ; lda #low(NO_H_FLIP | NO_V_FLIP | PRIOR_H | SIZE16_32 | SPAL1)
   60                             ; sta $0002
   61                             ; lda #high(NO_H_FLIP | NO_V_FLIP | PRIOR_H | SIZE16_32 | SPAL1)
   62                             ; sta $0003
   63                     
   64                     
   65  00:E279  AE 0C 25          ldx SATB.openslot.hpriority
   66  00:E27C  8A                txa
   67  00:E27D  38                sec
   68  00:E27E  E9 40             sbc #$40
   69  00:E280  A8                tay
   70  00:E281  A2 40             ldx #$40
   71  00:E283  20 A0 E2          jsr .xfer.sprites
   72                     
   73  00:E286  82                clx
   74  00:E287  AD 0C 25          lda SATB.openslot.hpriority
   75  00:E28A  38                sec
   76  00:E28B  E9 40             sbc #$40
   77  00:E28D  49 FF             eor #$ff
   78  00:E28F  1A                inc a
   79  00:E290  18                clc
   80  00:E291  69 40             adc #$40
   81  00:E293  A8                tay
   82  00:E294  20 A0 E2          jsr .xfer.sprites
   83                     
   84  00:E297  9C 0B 25          stz SATB.openslot
   85  00:E29A  A9 40             lda #$40
   86  00:E29C  8D 0C 25          sta SATB.openslot.hpriority
   87                     
   88  00:E29F  60          rts
   89                     
   90  00:E2A0            .xfer.sprites
   91                     
   92  00:E2A0  C0 00             cpy #$00
   93  00:E2A2  F0 34           beq .out
   94                     
   95                             MOVE.b cell.Y.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2A4  BD 09 22      lda cell.Y.lo,x
       00:E2A7  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
   96                             MOVE.b cell.Y.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2AA  BD 69 22      lda cell.Y.hi,x
       00:E2AD  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
   97                     
   98                             MOVE.b cell.X.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2B0  BD C9 22      lda cell.X.lo,x
       00:E2B3  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
   99                             MOVE.b cell.X.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2B6  BD 29 23      lda cell.X.hi,x
       00:E2B9  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  100                     
  101                             MOVE.b cell.pattern.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2BC  BD 49 24      lda cell.pattern.lo,x
       00:E2BF  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
  102                             MOVE.b cell.pattern.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2C2  BD A9 24      lda cell.pattern.hi,x
       00:E2C5  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  103                     
  104                             MOVE.b cell.attribs.lo,x , vdata_port.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2C8  BD 89 23      lda cell.attribs.lo,x
       00:E2CB  8D 02 00      sta vdata_port.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.l
                          ;        .endif
                          ;    .endif
                          
  105                             MOVE.b cell.attribs.hi,x , vdata_port.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       00:E2CE  BD E9 23      lda cell.attribs.hi,x
       00:E2D1  8D 03 00      sta vdata_port.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta vdata_port.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx vdata_port.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty vdata_port.h
                          ;        .endif
                          ;    .endif
                          
  106                     
  107  00:E2D4  E8                inx
  108  00:E2D5  88                dey
  109  00:E2D6  D0 C8           bne .xfer.sprites
  110                     
  111  00:E2D8            .out
  112                     
  113  00:E2D8  60          rts
  114                     
  115                     ;.......................................................
  116                     ;
  117  00:E2D9            SATB.hide
  118                     
  119  00:E2D9  60          rts
  120                     
  121                     
#[1]   ghosthouse_build_1.asm
  144                     
  145                     ; Lib stuffs
#[2]   ../lib/controls/lib.asm
  146                         .include "../lib/controls/lib.asm"
    1                     
    2                     ;....................................................
    3                     ;//initialize gamepad status variables
    4  00:E2DA            Controls.Init:
    5                     
    6                             MOVE.b #3, b1_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2DA  A9 03         lda #3
       00:E2DC  8D 15 25      sta b1_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta b1_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx b1_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty b1_delay
                          ;        .endif
                          ;    .endif
                          
    7                             MOVE.b #3, b2_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2DF  A9 03         lda #3
       00:E2E1  8D 16 25      sta b2_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta b2_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx b2_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty b2_delay
                          ;        .endif
                          ;    .endif
                          
    8                             MOVE.b #3, sl_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2E4  A9 03         lda #3
       00:E2E6  8D 17 25      sta sl_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta sl_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx sl_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty sl_delay
                          ;        .endif
                          ;    .endif
                          
    9                             MOVE.b #3, st_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2E9  A9 03         lda #3
       00:E2EB  8D 18 25      sta st_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta st_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx st_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty st_delay
                          ;        .endif
                          ;    .endif
                          
   10                             MOVE.b #3, up_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2EE  A9 03         lda #3
       00:E2F0  8D 19 25      sta up_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta up_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx up_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty up_delay
                          ;        .endif
                          ;    .endif
                          
   11                             MOVE.b #3, dn_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2F3  A9 03         lda #3
       00:E2F5  8D 1A 25      sta dn_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta dn_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx dn_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty dn_delay
                          ;        .endif
                          ;    .endif
                          
   12                             MOVE.b #3, lf_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2F8  A9 03         lda #3
       00:E2FA  8D 1B 25      sta lf_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta lf_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx lf_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty lf_delay
                          ;        .endif
                          ;    .endif
                          
   13                             MOVE.b #3, rh_delay
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       00:E2FD  A9 03         lda #3
       00:E2FF  8D 1C 25      sta rh_delay
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta rh_delay
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx rh_delay
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty rh_delay
                          ;        .endif
                          ;    .endif
                          
   14  00:E302  9C 1D 25          stz b1_counter
   15  00:E305  9C 1E 25          stz b2_counter
   16  00:E308  9C 1F 25          stz sl_counter
   17  00:E30B  9C 20 25          stz st_counter
   18  00:E30E  9C 21 25          stz up_counter
   19  00:E311  9C 22 25          stz dn_counter
   20  00:E314  9C 23 25          stz lf_counter
   21  00:E317  9C 24 25          stz rh_counter
   22                     
   23  00:E31A  60          rts
   24                     ;#end
   25                     
   26                     
   27                     
   28                     ;....................................................
   29                     ; Convert incoming raw button status into button states
   30  00:E31B            Controls.ProcessInput:
   31                     
   32                     
   33                     ;................
   34  00:E31B            .dpad_check
   35                     
   36  00:E31B  AD 11 25          lda up_status
   37  00:E31E  0D 12 25          ora dn_status
   38  00:E321  C9 05             cmp #$1+$4
   39  00:E323  B0 0D           bcs .invalid
   40  00:E325  AD 13 25          lda lf_status
   41  00:E328  0D 14 25          ora rh_status
   42  00:E32B  C9 0A             cmp #$8+$2
   43  00:E32D  B0 03           bcs .invalid
   44  00:E32F  4C 38 E3          jmp .dpad_process
   45                     
   46  00:E332            .invalid
   47  00:E332  9C 26 25        stz input_state.directions
   48  00:E335  4C 9C E4        jmp .button_process
   49                     
   50                     
   51                     
   52                     
   53                     ;....................................................
   54  00:E338            .dpad_process
   55                     
   56                     ;.....................
   57  00:E338            .up
   58  00:E338  AD 11 25          lda up_status
   59  00:E33B  F0 33           beq .up.up
   60                     
   61  00:E33D            .up.down
   62  00:E33D  AD 26 25          lda input_state.directions
   63  00:E340  29 03             and #control.up.mask
   64  00:E342  C9 02             cmp #control.up.held
   65  00:E344  F0 4B           beq .up.skip
   66  00:E346  C9 03             cmp #control.up.pressed
   67  00:E348  D0 0C           bne .up.count
   68  00:E34A            .up.held
   69  00:E34A  AD 26 25          lda input_state.directions
   70  00:E34D  29 FC             and #(control.up.mask ^ $ff)
   71  00:E34F  09 02             ora #control.up.held
   72  00:E351  8D 26 25          sta input_state.directions
   73  00:E354  80 3B             bra .up.skip
   74                     
   75  00:E356            .up.count
   76  00:E356  EE 21 25          inc up_counter
   77  00:E359  AD 21 25          lda up_counter
   78  00:E35C  CD 19 25          cmp up_delay
   79  00:E35F  90 30           bcc .up.skip
   80  00:E361            .up.pressed
   81  00:E361  9C 21 25          stz up_counter
   82  00:E364  AD 26 25          lda input_state.directions
   83  00:E367  29 FC             and #(control.up.mask ^ $ff)
   84  00:E369  09 03             ora #control.up.pressed
   85  00:E36B  8D 26 25          sta input_state.directions
   86  00:E36E  80 21             bra .up.skip
   87                     
   88  00:E370            .up.up
   89  00:E370  AD 26 25          lda input_state.directions
   90  00:E373  29 03             and #control.up.mask
   91  00:E375  C9 00             cmp #control.up.inactive
   92  00:E377  F0 18           beq .up.skip
   93  00:E379  C9 01             cmp #control.up.released
   94  00:E37B  D0 0A           bne .up.released
   95  00:E37D            .up.clear
   96  00:E37D  AD 26 25          lda input_state.directions
   97  00:E380  29 FC             and #(control.up.mask ^ $ff)
   98  00:E382  8D 26 25          sta input_state.directions
   99  00:E385  80 0A             bra .up.skip
  100  00:E387            .up.released
  101  00:E387  AD 26 25          lda input_state.directions
  102  00:E38A  29 FC             and #(control.up.mask ^ $ff)
  103  00:E38C  09 01             ora #control.up.released
  104  00:E38E  8D 26 25          sta input_state.directions
  105                     
  106                     
  107  00:E391            .up.skip
  108                     
  109                     
  110                     ;.....................
  111  00:E391            .dn
  112  00:E391  AD 12 25          lda dn_status
  113  00:E394  F0 33           beq .dn.up
  114                     
  115  00:E396            .dn.down
  116  00:E396  AD 26 25          lda input_state.directions
  117  00:E399  29 0C             and #control.dn.mask
  118  00:E39B  C9 08             cmp #control.dn.held
  119  00:E39D  F0 4B           beq .dn.skip
  120  00:E39F  C9 0C             cmp #control.dn.pressed
  121  00:E3A1  D0 0C           bne .dn.count
  122  00:E3A3            .dn.held
  123  00:E3A3  AD 26 25          lda input_state.directions
  124  00:E3A6  29 F3             and #(control.dn.mask ^ $ff)
  125  00:E3A8  09 08             ora #control.dn.held
  126  00:E3AA  8D 26 25          sta input_state.directions
  127  00:E3AD  80 3B             bra .dn.skip
  128                     
  129  00:E3AF            .dn.count
  130  00:E3AF  EE 22 25          inc dn_counter
  131  00:E3B2  AD 22 25          lda dn_counter
  132  00:E3B5  CD 1A 25          cmp dn_delay
  133  00:E3B8  90 30           bcc .dn.skip
  134  00:E3BA            .dn.pressed
  135  00:E3BA  9C 22 25          stz dn_counter
  136  00:E3BD  AD 26 25          lda input_state.directions
  137  00:E3C0  29 F3             and #(control.dn.mask ^ $ff)
  138  00:E3C2  09 0C             ora #control.dn.pressed
  139  00:E3C4  8D 26 25          sta input_state.directions
  140  00:E3C7  80 21             bra .dn.skip
  141                     
  142  00:E3C9            .dn.up
  143  00:E3C9  AD 26 25          lda input_state.directions
  144  00:E3CC  29 0C             and #control.dn.mask
  145  00:E3CE  C9 00             cmp #control.dn.inactive
  146  00:E3D0  F0 18           beq .dn.skip
  147  00:E3D2  C9 04             cmp #control.dn.released
  148  00:E3D4  D0 0A           bne .dn.released
  149  00:E3D6            .dn.clear
  150  00:E3D6  AD 26 25          lda input_state.directions
  151  00:E3D9  29 F3             and #(control.dn.mask ^ $ff)
  152  00:E3DB  8D 26 25          sta input_state.directions
  153  00:E3DE  80 0A             bra .dn.skip
  154  00:E3E0            .dn.released
  155  00:E3E0  AD 26 25          lda input_state.directions
  156  00:E3E3  29 F3             and #(control.dn.mask ^ $ff)
  157  00:E3E5  09 04             ora #control.dn.released
  158  00:E3E7  8D 26 25          sta input_state.directions
  159                     
  160                     
  161  00:E3EA            .dn.skip
  162                     
  163                     
  164                     ;.....................
  165  00:E3EA            .lf
  166  00:E3EA  AD 13 25          lda lf_status
  167  00:E3ED  F0 33           beq .lf.up
  168                     
  169  00:E3EF            .lf.down
  170  00:E3EF  AD 26 25          lda input_state.directions
  171  00:E3F2  29 30             and #control.lf.mask
  172  00:E3F4  C9 20             cmp #control.lf.held
  173  00:E3F6  F0 4B           beq .lf.skip
  174  00:E3F8  C9 30             cmp #control.lf.pressed
  175  00:E3FA  D0 0C           bne .lf.count
  176  00:E3FC            .lf.held
  177  00:E3FC  AD 26 25          lda input_state.directions
  178  00:E3FF  29 CF             and #(control.lf.mask ^ $ff)
  179  00:E401  09 20             ora #control.lf.held
  180  00:E403  8D 26 25          sta input_state.directions
  181  00:E406  80 3B             bra .lf.skip
  182                     
  183  00:E408            .lf.count
  184  00:E408  EE 23 25          inc lf_counter
  185  00:E40B  AD 23 25          lda lf_counter
  186  00:E40E  CD 1B 25          cmp lf_delay
  187  00:E411  90 30           bcc .lf.skip
  188  00:E413            .lf.pressed
  189  00:E413  9C 23 25          stz lf_counter
  190  00:E416  AD 26 25          lda input_state.directions
  191  00:E419  29 CF             and #(control.lf.mask ^ $ff)
  192  00:E41B  09 30             ora #control.lf.pressed
  193  00:E41D  8D 26 25          sta input_state.directions
  194  00:E420  80 21             bra .lf.skip
  195                     
  196  00:E422            .lf.up
  197  00:E422  AD 26 25          lda input_state.directions
  198  00:E425  29 30             and #control.lf.mask
  199  00:E427  C9 00             cmp #control.lf.inactive
  200  00:E429  F0 18           beq .lf.skip
  201  00:E42B  C9 10             cmp #control.lf.released
  202  00:E42D  D0 0A           bne .lf.released
  203  00:E42F            .lf.clear
  204  00:E42F  AD 26 25          lda input_state.directions
  205  00:E432  29 CF             and #(control.lf.mask ^ $ff)
  206  00:E434  8D 26 25          sta input_state.directions
  207  00:E437  80 0A             bra .lf.skip
  208  00:E439            .lf.released
  209  00:E439  AD 26 25          lda input_state.directions
  210  00:E43C  29 CF             and #(control.lf.mask ^ $ff)
  211  00:E43E  09 10             ora #control.lf.released
  212  00:E440  8D 26 25          sta input_state.directions
  213                     
  214  00:E443            .lf.skip
  215                     
  216                     
  217                     ;.....................
  218  00:E443            .rh
  219  00:E443  AD 14 25          lda rh_status
  220  00:E446  F0 33           beq .rh.up
  221                     
  222  00:E448            .rh.down
  223  00:E448  AD 26 25          lda input_state.directions
  224  00:E44B  29 C0             and #control.rh.mask
  225  00:E44D  C9 80             cmp #control.rh.held
  226  00:E44F  F0 4B           beq .rh.skip
  227  00:E451  C9 C0             cmp #control.rh.pressed
  228  00:E453  D0 0C           bne .rh.count
  229  00:E455            .rh.held
  230  00:E455  AD 26 25          lda input_state.directions
  231  00:E458  29 3F             and #(control.rh.mask ^ $ff)
  232  00:E45A  09 80             ora #control.rh.held
  233  00:E45C  8D 26 25          sta input_state.directions
  234  00:E45F  80 3B             bra .rh.skip
  235  00:E461            .rh.count
  236  00:E461  EE 24 25          inc rh_counter
  237  00:E464  AD 24 25          lda rh_counter
  238  00:E467  CD 1C 25          cmp rh_delay
  239  00:E46A  90 30           bcc .rh.skip
  240  00:E46C            .rh.pressed
  241  00:E46C  9C 24 25          stz rh_counter
  242  00:E46F  AD 26 25          lda input_state.directions
  243  00:E472  29 3F             and #(control.rh.mask ^ $ff)
  244  00:E474  09 C0             ora #control.rh.pressed
  245  00:E476  8D 26 25          sta input_state.directions
  246  00:E479  80 21             bra .rh.skip
  247                     
  248  00:E47B            .rh.up
  249  00:E47B  AD 26 25          lda input_state.directions
  250  00:E47E  29 C0             and #control.rh.mask
  251  00:E480  C9 00             cmp #control.rh.inactive
  252  00:E482  F0 18           beq .rh.skip
  253  00:E484  C9 40             cmp #control.rh.released
  254  00:E486  D0 0A           bne .rh.released
  255  00:E488            .rh.clear
  256  00:E488  AD 26 25          lda input_state.directions
  257  00:E48B  29 3F             and #(control.rh.mask ^ $ff)
  258  00:E48D  8D 26 25          sta input_state.directions
  259  00:E490  80 0A             bra .rh.skip
  260  00:E492            .rh.released
  261  00:E492  AD 26 25          lda input_state.directions
  262  00:E495  29 3F             and #(control.rh.mask ^ $ff)
  263  00:E497  09 40             ora #control.rh.released
  264  00:E499  8D 26 25          sta input_state.directions
  265                     
  266  00:E49C            .rh.skip
  267                     
  268                     
  269                     ;....................................................
  270  00:E49C            .button_process
  271                     
  272                     
  273                     ;.....................
  274  00:E49C            .b1
  275  00:E49C  AD 0D 25          lda b1_status
  276  00:E49F  F0 33           beq .b1.up
  277                     
  278  00:E4A1            .b1.down
  279  00:E4A1  AD 25 25          lda input_state.buttons
  280  00:E4A4  29 03             and #control.b1.mask
  281  00:E4A6  C9 02             cmp #control.b1.held
  282  00:E4A8  F0 4B           beq .b1.skip
  283  00:E4AA  C9 03             cmp #control.b1.pressed
  284  00:E4AC  D0 0C           bne .b1.count
  285  00:E4AE            .b1.held
  286  00:E4AE  AD 25 25          lda input_state.buttons
  287  00:E4B1  29 FC             and #(control.b1.mask ^ $ff)
  288  00:E4B3  09 02             ora #control.b1.held
  289  00:E4B5  8D 25 25          sta input_state.buttons
  290  00:E4B8  80 3B             bra .b1.skip
  291                     
  292  00:E4BA            .b1.count
  293  00:E4BA  EE 1D 25          inc b1_counter
  294  00:E4BD  AD 1D 25          lda b1_counter
  295  00:E4C0  CD 15 25          cmp b1_delay
  296  00:E4C3  90 30           bcc .b1.skip
  297  00:E4C5            .b1.pressed
  298  00:E4C5  9C 1D 25          stz b1_counter
  299  00:E4C8  AD 25 25          lda input_state.buttons
  300  00:E4CB  29 FC             and #(control.b1.mask ^ $ff)
  301  00:E4CD  09 03             ora #control.b1.pressed
  302  00:E4CF  8D 25 25          sta input_state.buttons
  303  00:E4D2  80 21             bra .b1.skip
  304                     
  305  00:E4D4            .b1.up
  306  00:E4D4  AD 25 25          lda input_state.buttons
  307  00:E4D7  29 03             and #control.b1.mask
  308  00:E4D9  C9 00             cmp #control.b1.inactive
  309  00:E4DB  F0 18           beq .b1.skip
  310  00:E4DD  C9 01             cmp #control.b1.released
  311  00:E4DF  D0 0A           bne .b1.released
  312  00:E4E1            .b1.clear
  313  00:E4E1  AD 25 25          lda input_state.buttons
  314  00:E4E4  29 FC             and #(control.b1.mask ^ $ff)
  315  00:E4E6  8D 25 25          sta input_state.buttons
  316  00:E4E9  80 0A             bra .b1.skip
  317  00:E4EB            .b1.released
  318  00:E4EB  AD 25 25          lda input_state.buttons
  319  00:E4EE  29 FC             and #(control.b1.mask ^ $ff)
  320  00:E4F0  09 01             ora #control.b1.released
  321  00:E4F2  8D 25 25          sta input_state.buttons
  322                     
  323  00:E4F5            .b1.skip
  324                     
  325                     
  326                     ;.....................
  327  00:E4F5            .b2
  328  00:E4F5  AD 0E 25          lda b2_status
  329  00:E4F8  F0 33           beq .b2.up
  330                     
  331  00:E4FA            .b2.down
  332  00:E4FA  AD 25 25          lda input_state.buttons
  333  00:E4FD  29 0C             and #control.b2.mask
  334  00:E4FF  C9 08             cmp #control.b2.held
  335  00:E501  F0 4B           beq .b2.skip
  336  00:E503  C9 0C             cmp #control.b2.pressed
  337  00:E505  D0 0C           bne .b2.count
  338  00:E507            .b2.held
  339  00:E507  AD 25 25          lda input_state.buttons
  340  00:E50A  29 F3             and #(control.b2.mask ^ $ff)
  341  00:E50C  09 08             ora #control.b2.held
  342  00:E50E  8D 25 25          sta input_state.buttons
  343  00:E511  80 3B             bra .b2.skip
  344                     
  345  00:E513            .b2.count
  346  00:E513  EE 1E 25          inc b2_counter
  347  00:E516  AD 1E 25          lda b2_counter
  348  00:E519  CD 16 25          cmp b2_delay
  349  00:E51C  90 30           bcc .b2.skip
  350  00:E51E            .b2.pressed
  351  00:E51E  9C 1E 25          stz b2_counter
  352  00:E521  AD 25 25          lda input_state.buttons
  353  00:E524  29 F3             and #(control.b2.mask ^ $ff)
  354  00:E526  09 0C             ora #control.b2.pressed
  355  00:E528  8D 25 25          sta input_state.buttons
  356  00:E52B  80 21             bra .b2.skip
  357                     
  358  00:E52D            .b2.up
  359  00:E52D  AD 25 25          lda input_state.buttons
  360  00:E530  29 0C             and #control.b2.mask
  361  00:E532  C9 00             cmp #control.b2.inactive
  362  00:E534  F0 18           beq .b2.skip
  363  00:E536  C9 04             cmp #control.b2.released
  364  00:E538  D0 0A           bne .b2.released
  365  00:E53A            .b2.clear
  366  00:E53A  AD 25 25          lda input_state.buttons
  367  00:E53D  29 F3             and #(control.b2.mask ^ $ff)
  368  00:E53F  8D 25 25          sta input_state.buttons
  369  00:E542  80 0A             bra .b2.skip
  370  00:E544            .b2.released
  371  00:E544  AD 25 25          lda input_state.buttons
  372  00:E547  29 F3             and #(control.b2.mask ^ $ff)
  373  00:E549  09 04             ora #control.b2.released
  374  00:E54B  8D 25 25          sta input_state.buttons
  375                     
  376  00:E54E            .b2.skip
  377                     
  378                     
  379                     ;.....................
  380  00:E54E            .st
  381  00:E54E  AD 10 25          lda st_status
  382  00:E551  F0 33           beq .st.up
  383                     
  384  00:E553            .st.down
  385  00:E553  AD 25 25          lda input_state.buttons
  386  00:E556  29 30             and #control.st.mask
  387  00:E558  C9 20             cmp #control.st.held
  388  00:E55A  F0 4B           beq .st.skip
  389  00:E55C  C9 30             cmp #control.st.pressed
  390  00:E55E  D0 0C           bne .st.count
  391  00:E560            .st.held
  392  00:E560  AD 25 25          lda input_state.buttons
  393  00:E563  29 CF             and #(control.st.mask ^ $ff)
  394  00:E565  09 20             ora #control.st.held
  395  00:E567  8D 25 25          sta input_state.buttons
  396  00:E56A  80 3B             bra .st.skip
  397                     
  398  00:E56C            .st.count
  399  00:E56C  EE 20 25          inc st_counter
  400  00:E56F  AD 20 25          lda st_counter
  401  00:E572  CD 18 25          cmp st_delay
  402  00:E575  90 30           bcc .st.skip
  403  00:E577            .st.pressed
  404  00:E577  9C 20 25          stz st_counter
  405  00:E57A  AD 25 25          lda input_state.buttons
  406  00:E57D  29 CF             and #(control.st.mask ^ $ff)
  407  00:E57F  09 30             ora #control.st.pressed
  408  00:E581  8D 25 25          sta input_state.buttons
  409  00:E584  80 21             bra .st.skip
  410                     
  411  00:E586            .st.up
  412  00:E586  AD 25 25          lda input_state.buttons
  413  00:E589  29 30             and #control.st.mask
  414  00:E58B  C9 00             cmp #control.st.inactive
  415  00:E58D  F0 18           beq .st.skip
  416  00:E58F  C9 10             cmp #control.st.released
  417  00:E591  D0 0A           bne .st.released
  418  00:E593            .st.clear
  419  00:E593  AD 25 25          lda input_state.buttons
  420  00:E596  29 CF             and #(control.st.mask ^ $ff)
  421  00:E598  8D 25 25          sta input_state.buttons
  422  00:E59B  80 0A             bra .st.skip
  423  00:E59D            .st.released
  424  00:E59D  AD 25 25          lda input_state.buttons
  425  00:E5A0  29 CF             and #(control.st.mask ^ $ff)
  426  00:E5A2  09 10             ora #control.st.released
  427  00:E5A4  8D 25 25          sta input_state.buttons
  428                     
  429  00:E5A7            .st.skip
  430                     
  431                     
  432                     ;.....................
  433  00:E5A7            .sl
  434  00:E5A7  AD 0F 25          lda sl_status
  435  00:E5AA  F0 33           beq .sl.up
  436                     
  437  00:E5AC            .sl.down
  438  00:E5AC  AD 25 25          lda input_state.buttons
  439  00:E5AF  29 C0             and #control.sl.mask
  440  00:E5B1  C9 80             cmp #control.sl.held
  441  00:E5B3  F0 4B           beq .sl.skip
  442  00:E5B5  C9 C0             cmp #control.sl.pressed
  443  00:E5B7  D0 0C           bne .sl.count
  444  00:E5B9            .sl.held
  445  00:E5B9  AD 25 25          lda input_state.buttons
  446  00:E5BC  29 3F             and #(control.sl.mask ^ $ff)
  447  00:E5BE  09 80             ora #control.sl.held
  448  00:E5C0  8D 25 25          sta input_state.buttons
  449  00:E5C3  80 3B             bra .sl.skip
  450                     
  451  00:E5C5            .sl.count
  452  00:E5C5  EE 1F 25          inc sl_counter
  453  00:E5C8  AD 1F 25          lda sl_counter
  454  00:E5CB  CD 17 25          cmp sl_delay
  455  00:E5CE  90 30           bcc .sl.skip
  456  00:E5D0            .sl.pressed
  457  00:E5D0  9C 1F 25          stz sl_counter
  458  00:E5D3  AD 25 25          lda input_state.buttons
  459  00:E5D6  29 3F             and #(control.sl.mask ^ $ff)
  460  00:E5D8  09 C0             ora #control.sl.pressed
  461  00:E5DA  8D 25 25          sta input_state.buttons
  462  00:E5DD  80 21             bra .sl.skip
  463                     
  464  00:E5DF            .sl.up
  465  00:E5DF  AD 25 25          lda input_state.buttons
  466  00:E5E2  29 C0             and #control.sl.mask
  467  00:E5E4  C9 00             cmp #control.sl.inactive
  468  00:E5E6  F0 18           beq .sl.skip
  469  00:E5E8  C9 40             cmp #control.sl.released
  470  00:E5EA  D0 0A           bne .sl.released
  471  00:E5EC            .sl.clear
  472  00:E5EC  AD 25 25          lda input_state.buttons
  473  00:E5EF  29 3F             and #(control.sl.mask ^ $ff)
  474  00:E5F1  8D 25 25          sta input_state.buttons
  475  00:E5F4  80 0A             bra .sl.skip
  476  00:E5F6            .sl.released
  477  00:E5F6  AD 25 25          lda input_state.buttons
  478  00:E5F9  29 3F             and #(control.sl.mask ^ $ff)
  479  00:E5FB  09 40             ora #control.sl.released
  480  00:E5FD  8D 25 25          sta input_state.buttons
  481                     
  482  00:E600            .sl.skip
  483                     
  484  00:E600  60            rts
#[1]   ghosthouse_build_1.asm
#[2]   ../base_func/IO/gamepad/lib.asm
  147                         .include "../base_func/IO/gamepad/lib.asm"
    1                     ;###############################################
    2                     ;
    3                     ; GAMEPAD support
    4                     ;
    5                     ; required variables:
    6                     ;
    7                     ;    b1_status
    8                     ;    b2_status
    9                     ;    sl_status
   10                     ;    st_status
   11                     ;    up_status
   12                     ;    dn_status
   13                     ;    lf_status
   14                     ;    rh_status
   15                     ;
   16                     ; value returned is : TRUE/FALSE
   17                     ;
   18                     ;
   19                     
   20  00:E601            Gamepad.Init:
   21                     
   22  00:E601  9C 0D 25          stz b1_status
   23  00:E604  9C 0E 25          stz b2_status
   24  00:E607  9C 0F 25          stz sl_status
   25  00:E60A  9C 10 25          stz st_status
   26  00:E60D  9C 11 25          stz up_status
   27  00:E610  9C 12 25          stz dn_status
   28  00:E613  9C 13 25          stz lf_status
   29  00:E616  9C 14 25          stz rh_status
   30                     
   31  00:E619  60            rts
   32                     
   33                     
   34  00:E61A            Gamepad.READ_IO.single_controller:
   35                     ;
   36                     ; new and improved
   37                     ;
   38  00:E61A  48                    pha
   39  00:E61B  DA                    phx
   40  00:E61C  A9 01             lda #$01
   41  00:E61E  8D 00 10          sta $1000
   42  00:E621  A9 03             lda #$03
   43  00:E623  8D 00 10          sta $1000
   44  00:E626  A9 01             lda #$01
   45  00:E628  8D 00 10          sta $1000
   46  00:E62B  48                pha
   47  00:E62C  68                pla
   48  00:E62D  EA                nop
   49  00:E62E  EA                nop
   50  00:E62F  AD 00 10          lda $1000
   51  00:E632  49 0F             eor #$0f
   52  00:E634  AA                tax
   53  00:E635  29 01             and #$01
   54  00:E637  8D 11 25          sta up_status
   55  00:E63A  8A                txa
   56  00:E63B  29 04             and #$04
   57  00:E63D  8D 12 25          sta dn_status
   58  00:E640  8A                txa
   59  00:E641  29 08             and #$08
   60  00:E643  8D 13 25          sta lf_status
   61  00:E646  8A                txa
   62  00:E647  29 02             and #$02
   63  00:E649  8D 14 25          sta rh_status
   64                     
   65                     
   66  00:E64C  9C 00 10          stz $1000
   67  00:E64F  48                pha
   68  00:E650  68                pla
   69  00:E651  EA                nop
   70  00:E652  EA                nop
   71  00:E653  AD 00 10          lda $1000
   72  00:E656  49 0F             eor #$0f
   73  00:E658  AA                tax
   74  00:E659  29 01             and #$01
   75  00:E65B  8D 0D 25          sta b1_status
   76  00:E65E  8A                txa
   77  00:E65F  29 02             and #$02
   78  00:E661  8D 0E 25          sta b2_status
   79  00:E664  8A                txa
   80  00:E665  29 04             and #$04
   81  00:E667  8D 0F 25          sta sl_status
   82  00:E66A  8A                txa
   83  00:E66B  29 08             and #$08
   84  00:E66D  8D 10 25          sta st_status
   85                     
   86                     
   87  00:E670            .exit
   88  00:E670  FA                    plx
   89  00:E671  68                    pla
   90  00:E672  60            rts
   91                     ;#end
#[1]   ghosthouse_build_1.asm
#[2]   ../lib/slow16by16Mul/lib.asm
  148                         .include "../lib/slow16by16Mul/lib.asm"
    1                     
    2                     
    3                     ;16-bit multiply with 32-bit product
    4                     ;source from 6502.org
    5                     
    6           2000      multiplier   = R0
    7           2002      multiplicand = R1
    8           2004      product      = R2
    9                     
   10  00:E673            mult16.16:
   11  00:E673  A9 00           lda   #$00
   12  00:E675  85 06           sta   <product+2      ; clear upper bits of product
   13  00:E677  85 07           sta   <product+3
   14  00:E679  A2 10           ldx   #$10           ; set binary count to 16
   15  00:E67B            .shift_r
   16  00:E67B  46 01           lsr   <multiplier+1   ; divide multiplier by 2
   17  00:E67D  66 00           ror   <multiplier
   18  00:E67F  90 0B         bcc .rotate_r
   19  00:E681  A5 06           lda   <product+2      ; get upper half of product and add multiplicand
   20  00:E683  18              clc
   21  00:E684  65 02           adc   <multiplicand
   22  00:E686  85 06           sta   <product+2
   23  00:E688  A5 07           lda   <product+3
   24  00:E68A  65 03           adc   <multiplicand+1
   25  00:E68C            .rotate_r
   26  00:E68C  6A              ror   a               ; rotate partial product
   27  00:E68D  85 07           sta   <product+3
   28  00:E68F  66 06           ror   <product+2
   29  00:E691  66 05           ror   <product+1
   30  00:E693  66 04           ror   <product
   31  00:E695  CA              dex
   32  00:E696  D0 E3         bne   .shift_r
   33  00:E698  60        rts
   34                     
   35  00:E699            mult8.16:
   36  00:E699  A9 00           lda   #$00
   37  00:E69B  85 06           sta   <product+2      ; clear upper bits of product
   38  00:E69D  85 07           sta   <product+3
   39  00:E69F  A2 08           ldx   #$8            ; set binary count to 16
   40  00:E6A1            .shift_r
   41  00:E6A1  46 01           lsr   <multiplier+1   ; divide multiplier by 2
   42  00:E6A3  66 00           ror   <multiplier
   43  00:E6A5  90 0B         bcc .rotate_r
   44  00:E6A7  A5 06           lda   <product+2      ; get upper half of product and add multiplicand
   45  00:E6A9  18              clc
   46  00:E6AA  65 02           adc   <multiplicand
   47  00:E6AC  85 06           sta   <product+2
   48  00:E6AE  A5 07           lda   <product+3
   49  00:E6B0  65 03           adc   <multiplicand+1
   50  00:E6B2            .rotate_r
   51  00:E6B2  6A              ror   a               ; rotate partial product
   52  00:E6B3  85 07           sta   <product+3
   53  00:E6B5  66 06           ror   <product+2
   54  00:E6B7  66 05           ror   <product+1
   55  00:E6B9  66 04           ror   <product
   56  00:E6BB  CA              dex
   57  00:E6BC  D0 E3         bne   .shift_r
   58  00:E6BE  60        rts
   59                     
   60                     
#[1]   ghosthouse_build_1.asm
#[2]   ../lib/random/16bit/lib.asm
  149                         .include "../lib/random/16bit/lib.asm"
    1                     ;
    2                     ; Source: https://codebase64.org/doku.php?id=base:16bit_xorshift_random_generator
    3                     ; Author: Veikko Sariola
    4                     ;
    5                     ;
    6                     
    7                     
    8                     ;..................................................................
    9                     ;
   10                     ; You can get 8-bit random numbers in A or 16-bit numbers
   11                     ; from the zero page addresses. Leaves X/Y unchanged.
   12                     
   13  00:E6BF            random.rnd:
   14  00:E6BF  AD 28 25          lda random.RNG.hi
   15  00:E6C2  4A                lsr a
   16  00:E6C3  AD 27 25          lda random.RNG.lo
   17  00:E6C6  6A                ror a
   18  00:E6C7  4D 28 25          eor random.RNG.hi
   19  00:E6CA  8D 28 25          sta random.RNG.hi ; high part of x ^= x << 7 done
   20  00:E6CD  6A                ror a            ; A has now x >> 9 and high bit comes from low byte
   21  00:E6CE  4D 27 25          eor random.RNG.lo
   22  00:E6D1  8D 27 25          sta random.RNG.lo  ; x ^= x >> 9 and the low part of x ^= x << 7 done
   23  00:E6D4  4D 28 25          eor random.RNG.hi
   24  00:E6D7  8D 28 25          sta random.RNG.hi ; x ^= x << 8 done
   25  00:E6DA  60          rts
   26                     
#[1]   ghosthouse_build_1.asm
  150                     
  151                     
  152                     
  153                     ;end DATA
  154                     ;//...................................................................
  155                     
  156                     
  157                     ;/////////////////////////////////////////////////////////////////////////////////
  158                     ;/////////////////////////////////////////////////////////////////////////////////
  159                     ;/////////////////////////////////////////////////////////////////////////////////
  160                     ;
  161                     ;// Interrupt routines
  162                     
#[2]   ../base_func/video/vdc/vectors.inc
  163                         .include "../base_func/video/vdc/vectors.inc"
    1                     ;//........
    2  00:E6DB            TIRQ.custom
    3  00:E6DB  6C 59 20      jmp [timer_vect]
    4                     
    5  00:E6DE            TIRQ:   ;// Not used
    6  00:E6DE  AF 54 FA          BBS2 <vector_mask, TIRQ.custom
    7  00:E6E1  9C 03 14          stz $1403
    8  00:E6E4  40                rti
    9                     
   10                     ;//........
   11  00:E6E5            BRK.custom
   12  00:E6E5  6C 57 20      jmp [brk_vect]
   13  00:E6E8            BRK:
   14  00:E6E8  9F 54 FA          BBS1 <vector_mask, BRK.custom
   15  00:E6EB  40                rti
   16                     
   17                     ;//........
   18  00:E6EC            VDC.custom
   19  00:E6EC  6C 55 20      jmp [vdc_vect]
   20                     
   21  00:E6EF            VDC:
   22  00:E6EF  8F 54 FA          BBS0 <vector_mask, VDC.custom
   23  00:E6F2  48                  pha
   24  00:E6F3  AD 00 00          lda IRQ.ackVDC
   25  00:E6F6  85 4D             sta <vdc_status
   26  00:E6F8  89 20             bit #$20
   27  00:E6FA  D0 0E             bne VDC.vsync
   28  00:E6FC            VDC.hsync
   29  00:E6FC  BF 54 05          BBS3 <vector_mask, VDC.custom.hsync
   30  00:E6FF  DF 4D 08          BBS5 <vdc_status, VDC.vsync
   31  00:E702  68                  pla
   32  00:E703  40                rti
   33                     
   34  00:E704            VDC.custom.hsync
   35  00:E704  6C 5D 20      jmp [vdc_hsync]
   36                     
   37  00:E707            VDC.custom.vsync
   38  00:E707  6C 5B 20      jmp [vdc_vsync]
   39                     
   40  00:E70A            VDC.vsync
   41  00:E70A  DA                phx
   42  00:E70B  5A                phy
   43  00:E70C  CF 54 F8        BBS4 <vector_mask, VDC.custom.vsync
   44                     
   45  00:E70F  03 07             st0 #BXR
   46  00:E711  AD 4E 20          lda _BXR
   47  00:E714  8D 02 00          sta $0002
   48  00:E717  AD 4F 20          lda _BXR+1
   49  00:E71A  8D 03 00          sta $0003
   50                     
   51  00:E71D  03 08             st0 #BYR
   52  00:E71F  AD 50 20          lda _BYR
   53  00:E722  8D 02 00          sta $0002
   54  00:E725  AD 51 20          lda _BYR+1
   55  00:E728  8D 03 00          sta $0003
   56                     
   57  00:E72B  03 06             st0 #RCR
   58  00:E72D  AD 52 20          lda _RCR
   59  00:E730  8D 02 00          sta $0002
   60  00:E733  AD 53 20          lda _RCR+1
   61  00:E736  8D 03 00          sta $0003
   62                     
   63  00:E739  A5 4C             lda <vdc_reg
   64  00:E73B  8D 00 00          sta $0000
   65                     
   66  00:E73E            VDC.vsync.rtn
   67  00:E73E  7A                ply
   68  00:E73F  FA                plx
   69  00:E740  68                pla
   70  00:E741  9C 08 22        stz __vblank
   71  00:E744  40          rti
   72                     
   73                     ;//........
   74  00:E745            NMI:
   75  00:E745  40                rti
#[1]   ghosthouse_build_1.asm
  164                     
  165                     ;end INT
  166                     
  167                     ;/////////////////////////////////////////////////////////////////////////////////
  168                     ;/////////////////////////////////////////////////////////////////////////////////
  169                     ;/////////////////////////////////////////////////////////////////////////////////
  170                     ;
  171                     ;// INT VECTORS
  172                     
  173           FFF6        .org $fff6
  174                     
  175  00:FFF6  E8 E6         .dw BRK
  176  00:FFF8  EF E6         .dw VDC
  177  00:FFFA  DE E6         .dw TIRQ
  178  00:FFFC  45 E7         .dw NMI
  179  00:FFFE  00 E0         .dw startup
  180                     
  181                     ;..............................................................................................................
  182                     ;..............................................................................................................
  183                     ;..............................................................................................................
  184                     ;..............................................................................................................
  185                     ;Bank 0 end
  186                     
  187                     
  188                     
  189                     
  190                     
  191                     ;/////////////////////////////////////////////////////////////////////////////////
  192                     ;/////////////////////////////////////////////////////////////////////////////////
  193                     ;/////////////////////////////////////////////////////////////////////////////////
  194                     ;
  195                     ;// Main code bank @ $C000
  196                     
  197                     ;....................................
  198           0001          .bank $01, "MAIN"
  199           C000          .org $c000
  200                     ;....................................
  201                     
  202                     
  203  01:C000            MAIN
  204                             ;................................
  205                             Random.seed #$18ca    ; initailize random seed
                          
                0001            .if (2=2)
       01:C000  A9 CA               lda #low(#$18ca)
       01:C002  8D 27 25            sta random.RNG.lo
       01:C005  A9 18               lda #high(#$18ca)
       01:C007  8D 28 25            sta random.RNG.hi
                                .endif
                          
                0000            .if (2=1)
                                .endif
                          
                0000            .if (2=3)
                                .endif
                          
                0000            .if (2=3)
                                .endif
                          
                0000            .if (2=6)
                                .endif
                          
                0000            .if (2=4)
                                .endif
                          
                          
  206                             DMA.set.init          ; initialize Txx instruction in ram 
       01:C00A  A9 E3             lda #ia_DMA
       01:C00C  8D 00 22          sta int__dma_block.type
                          
       01:C00F  9C 01 22          stz int__dma_block.source
       01:C012  A9 20             lda #$20
       01:C014  8D 02 22          sta int__dma_block.source + 1
                          
       01:C017  A9 02             lda #$02
       01:C019  8D 03 22          sta int__dma_block.dest
       01:C01C  9C 04 22          stz int__dma_block.dest + 1
                          
       01:C01F  8D 05 22          sta int__dma_block.len
       01:C022  9C 06 22          stz int__dma_block.len + 1
                          
       01:C025  A9 60             lda #rts_DMA
       01:C027  8D 07 22          sta int__dma_block.rts
                              
  207                     
  208                             ;................................
  209                             ;Turn display on
  210                             sVDC.reg CR , #(BG_ON|SPR_OFF|VINT_ON|HINT_ON)
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C02A  A9 05         lda #CR
       01:C02C  85 4C         sta <vdc_reg
       01:C02E  03 05         st0 #CR
       01:C030  13 8C         st1 #LOW(#(BG_ON|SPR_OFF|VINT_ON|HINT_ON))
       01:C032  23 00         st2 #HIGH(#(BG_ON|SPR_OFF|VINT_ON|HINT_ON))
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
  211                     
  212                             ;................................
  213                             ;Load Ghosthouse assets
  214                             loadCellToCram.BG     ghosthouse,     0       ; Load palette block starting at BG color #0
                          
                                  MAP_BANK.2 #(ghosthouse.pal) , MPR2
                          
                0001          .if (2=2)
       01:C034  A9 53         lda #bank(#(ghosthouse.pal))
       01:C036  53 04         tam #(MPR2)
       01:C038  1A            inc a
       01:C039  53 08         tam #(MPR2 + 1)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                                  VCE.BGblock 0
                          
       01:C03B  A9 00     	lda #(0 << 4)
       01:C03D  8D 02 04  	sta $402
       01:C040  9C 03 04  	stz $403
                          
                                  DMA.word.port ghosthouse.pal, Page.2, vce_data, ghosthouse.pal.size
       01:C043  E3 00 57          tia (ghosthouse.pal & $1fff)+Page.2,vce_data,ghosthouse.pal.size
       01:C046  04 04 00  
       01:C049  02        
  215                             loadDataToVram        ghosthouse.map, $0000   ; map is at vram address $0000
                          
                                  sVDC.reg MAWR, #$0000
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C04A  A9 00         lda #MAWR
       01:C04C  85 4C         sta <vdc_reg
       01:C04E  03 00         st0 #MAWR
       01:C050  13 00         st1 #LOW(#$0000)
       01:C052  23 00         st2 #HIGH(#$0000)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
                                  sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C054  A9 02         lda #VRWR
       01:C056  85 4C         sta <vdc_reg
       01:C058  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
                                  MAP_BANK.2 #(ghosthouse.map) , MPR2
                          
                0001          .if (2=2)
       01:C05A  A9 53         lda #bank(#(ghosthouse.map))
       01:C05C  53 04         tam #(MPR2)
       01:C05E  1A            inc a
       01:C05F  53 08         tam #(MPR2 + 1)
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                                  DMA.word.port ghosthouse.map, Page.2, vdata_port, (ghosthouse.map.size)
       01:C061  E3 00 50          tia (ghosthouse.map & $1fff)+Page.2,vdata_port,(ghosthouse.map.size)
       01:C064  02 00 00  
       01:C067  07        
                          
  216                             loadCellToVram.4banks ghosthouse,     $1000   ; tiles start at vram address $1000
                          
                0001            .if (2 = 2)
                                      MAP_BANK.4 #(ghosthouse.cell) , MPR2
                          
       01:C068  A9 50         lda #bank(#(ghosthouse.cell))
       01:C06A  53 04         tam #(MPR2)
       01:C06C  1A            inc a
       01:C06D  53 08         tam #(MPR2 + 1)
       01:C06F  1A            inc a
       01:C070  53 10         tam #(MPR2 + 2)
       01:C072  1A            inc a
       01:C073  53 20         tam #(MPR2 + 3)
                          
                                      sVDC.reg MAWR, #$1000
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0001          .if    (2=2 & 2 = 2)
       01:C075  A9 00         lda #MAWR
       01:C077  85 4C         sta <vdc_reg
       01:C079  03 00         st0 #MAWR
       01:C07B  13 00         st1 #LOW(#$1000)
       01:C07D  23 10         st2 #HIGH(#$1000)
                               .endif
                          
                0000          .if    (2=3 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 6)
                              .endif
                          
                0000          .if    (2=2 & 2 = 3)
                              .endif
                          
                                      sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C07F  A9 02         lda #VRWR
       01:C081  85 4C         sta <vdc_reg
       01:C083  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
                                      DMA.word.port ghosthouse.cell, Page.2, vdata_port, ghosthouse.cell.size
       01:C085  E3 00 40          tia (ghosthouse.cell & $1fff)+Page.2,vdata_port,ghosthouse.cell.size
       01:C088  02 00 00  
       01:C08B  70        
                                .endif
                          
                0000            .if (2 = 1)
                                .endif
  217                     
  218                             ; Set sprite color #0 to black. This is the border color in overscan.
  219  01:C08C  9C 02 04          stz $402
  220  01:C08F  A9 01             lda #$01
  221  01:C091  8D 03 04          sta $403
  222  01:C094  9C 04 04          stz $404
  223  01:C097  9C 05 04          stz $405
  224                     
  225                             ;...............................
  226                             ; TIRQ OFF
  227                             TIMER.port  _7.00khz
       01:C09A  A9 00             lda #_7.00khz
       01:C09C  8D 00 0C          sta TMR_PORT
  228                             TIMER.cmd   TMR_OFF
       01:C09F  A9 00             lda #TMR_OFF
       01:C0A1  8D 01 0C          sta TMR_CMD
  229                             IRQ.control IRQ2_ON|VIRQ_ON|TIRQ_OFF
                          
       01:C0A4  A9 04         lda #IRQ2_ON|VIRQ_ON|TIRQ_OFF
       01:C0A6  8D 02 14      sta $1402
                          
  230                     
  231                             ;...............................
  232                             ; Set scroll positions
  233                             MOVE.w #$00, _BXR
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & _BXR != AX)
       01:C0A9  A9 00         lda #low(#$00)
       01:C0AB  8D 4E 20      sta _BXR
       01:C0AE  A9 00         lda #high(#$00)
       01:C0B0  8D 4F 20      sta _BXR + 1
                              .endif
                          
                0000          .if (_BXR = AX & 2 = 2)
                              .endif
                          
                0000          .if (_BXR = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_BXR = AY & 2 = 2)
                              .endif
                          
                0000          .if (_BXR = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_BXR = XY & 2 = 2)
                              .endif
                          
                0000          .if (_BXR = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & _BXR != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & _BXR != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & _BXR != AX )
                              .endif
                          
                          
  234                             MOVE.w #$00, _BYR
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & _BYR != AX)
       01:C0B3  A9 00         lda #low(#$00)
       01:C0B5  8D 50 20      sta _BYR
       01:C0B8  A9 00         lda #high(#$00)
       01:C0BA  8D 51 20      sta _BYR + 1
                              .endif
                          
                0000          .if (_BYR = AX & 2 = 2)
                              .endif
                          
                0000          .if (_BYR = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_BYR = AY & 2 = 2)
                              .endif
                          
                0000          .if (_BYR = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_BYR = XY & 2 = 2)
                              .endif
                          
                0000          .if (_BYR = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & _BYR != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & _BYR != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & _BYR != AX )
                              .endif
                          
                          
  235                             MOVE.w #$40, _RCR
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & _RCR != AX)
       01:C0BD  A9 40         lda #low(#$40)
       01:C0BF  8D 52 20      sta _RCR
       01:C0C2  A9 00         lda #high(#$40)
       01:C0C4  8D 53 20      sta _RCR + 1
                              .endif
                          
                0000          .if (_RCR = AX & 2 = 2)
                              .endif
                          
                0000          .if (_RCR = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_RCR = AY & 2 = 2)
                              .endif
                          
                0000          .if (_RCR = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (_RCR = XY & 2 = 2)
                              .endif
                          
                0000          .if (_RCR = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & _RCR != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & _RCR != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & _RCR != AX )
                              .endif
                          
                          
  236                     
  237                             ;................................
  238                             ;start the party
  239                             Interrupts.enable
       01:C0C7  58            cli
  240                     
  241                             ; Initialize the demo vars. 
  242                             MOVE.w #$08, ghost.pos.x
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & ghost.pos.x != AX)
       01:C0C8  A9 08         lda #low(#$08)
       01:C0CA  8D 2C 25      sta ghost.pos.x
       01:C0CD  A9 00         lda #high(#$08)
       01:C0CF  8D 2D 25      sta ghost.pos.x + 1
                              .endif
                          
                0000          .if (ghost.pos.x = AX & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.x = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghost.pos.x = AY & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.x = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghost.pos.x = XY & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.x = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & ghost.pos.x != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & ghost.pos.x != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & ghost.pos.x != AX )
                              .endif
                          
                          
  243                             MOVE.w #$08, ghost.pos.y
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & ghost.pos.y != AX)
       01:C0D2  A9 08         lda #low(#$08)
       01:C0D4  8D 2E 25      sta ghost.pos.y
       01:C0D7  A9 00         lda #high(#$08)
       01:C0D9  8D 2F 25      sta ghost.pos.y + 1
                              .endif
                          
                0000          .if (ghost.pos.y = AX & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.y = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghost.pos.y = AY & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.y = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghost.pos.y = XY & 2 = 2)
                              .endif
                          
                0000          .if (ghost.pos.y = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & ghost.pos.y != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & ghost.pos.y != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & ghost.pos.y != AX )
                              .endif
                          
                          
  244                             MOVE.b #$00, ghostFrame
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C0DC  A9 00         lda #$00
       01:C0DE  8D 36 25      sta ghostFrame
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta ghostFrame
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx ghostFrame
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty ghostFrame
                          ;        .endif
                          ;    .endif
                          
  245                     
  246                             MOVE.w #$08, ghostOld.pos.x   ; old values are needed to undo previous map changes.
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & ghostOld.pos.x != AX)
       01:C0E1  A9 08         lda #low(#$08)
       01:C0E3  8D 30 25      sta ghostOld.pos.x
       01:C0E6  A9 00         lda #high(#$08)
       01:C0E8  8D 31 25      sta ghostOld.pos.x + 1
                              .endif
                          
                0000          .if (ghostOld.pos.x = AX & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.x = AY & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.x = XY & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & ghostOld.pos.x != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & ghostOld.pos.x != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & ghostOld.pos.x != AX )
                              .endif
                          
                          
  247                             MOVE.w #$08, ghostOld.pos.y
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & ghostOld.pos.y != AX)
       01:C0EB  A9 08         lda #low(#$08)
       01:C0ED  8D 32 25      sta ghostOld.pos.y
       01:C0F0  A9 00         lda #high(#$08)
       01:C0F2  8D 33 25      sta ghostOld.pos.y + 1
                              .endif
                          
                0000          .if (ghostOld.pos.y = AX & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.y = AY & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.y = XY & 2 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & ghostOld.pos.y != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & ghostOld.pos.y != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & ghostOld.pos.y != AX )
                              .endif
                          
                          
  248                             MOVE.b #$00, ghostFrameOld
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C0F5  A9 00         lda #$00
       01:C0F7  8D 37 25      sta ghostFrameOld
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta ghostFrameOld
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx ghostFrameOld
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty ghostFrameOld
                          ;        .endif
                          ;    .endif
                          
  249                     
  250  01:C0FA            main_loop:
  251                     
  252                           WAITVBLANK
                0001              .if (0=0)
       01:C0FA  A2 01                 ldx #1
                                  .endif
                          
                0000              .if (0>0)
                                  .endif
                          
                          
       01:C0FC  20 3E E2          jsr __wait_vblank
  253                     
  254                           debugBENCH 7,0,7
                0000      .ifdef DEBUG_BENCHMARK
                          .endif
  255  01:C0FF  20 8D C1          call DrawGhost
  256                           debugBENCH 0,0,0
                0000      .ifdef DEBUG_BENCHMARK
                          .endif
  257                     
  258  01:C102  20 1A E6          call Gamepad.READ_IO.single_controller
  259  01:C105  20 1B E3          call Controls.ProcessInput
  260  01:C108  20 0E C1          call DoGhostControls
  261                     
  262  01:C10B  4C FA C0        jmp main_loop
  263                     
  264                     ;//...................................................................
  265                     
  266                     
  267                     ;Func
  268                     ;//...................................................................
  269                     
  270                     
  271                     ;..................]
  272                     ;..................]
  273  01:C10E            DoGhostControls:
  274                     
  275                     ;..................
  276                     ; Directions
  277                     
  278  01:C10E            .check.rh
  279  01:C10E  AD 26 25          lda input_state.directions
  280  01:C111  29 C0             and #control.rh.mask
  281  01:C113  C9 80             cmp #control.rh.held
  282  01:C115  D0 0D           bne .check_left
  283  01:C117            .do_right
  284  01:C117  AD 2C 25          lda ghost.pos.x
  285  01:C11A  C9 17             cmp #(32-9)
  286  01:C11C  B0 1A           bcs .check_up
  287  01:C11E  EE 2C 25          inc ghost.pos.x
  288  01:C121  4C 38 C1        jmp .check_up
  289                     
  290  01:C124            .check_left
  291  01:C124  AD 26 25          lda input_state.directions
  292  01:C127  29 30             and #control.lf.mask
  293  01:C129  C9 20             cmp #control.lf.held
  294  01:C12B  D0 0B           bne .check_up
  295  01:C12D            .do_left
  296  01:C12D  AD 2C 25          lda ghost.pos.x
  297  01:C130  F0 06           beq .check_up
  298  01:C132  CE 2C 25          dec ghost.pos.x
  299  01:C135  4C 38 C1        jmp .check_up
  300                     
  301  01:C138            .check_up
  302  01:C138  AD 26 25          lda input_state.directions
  303  01:C13B  29 03             and #control.up.mask
  304  01:C13D  C9 02             cmp #control.up.held
  305  01:C13F  D0 0B           bne .check_dn
  306  01:C141            .do_up
  307  01:C141  AD 2E 25          lda ghost.pos.y
  308  01:C144  F0 1C           beq .update
  309  01:C146  CE 2E 25          dec ghost.pos.y
  310  01:C149  4C 62 C1        jmp .update
  311                     
  312  01:C14C            .check_dn
  313  01:C14C  AD 26 25          lda input_state.directions
  314  01:C14F  29 0C             and #control.dn.mask
  315  01:C151  C9 08             cmp #control.dn.held
  316  01:C153  D0 0D           bne .update
  317  01:C155            .do_dn
  318  01:C155  AD 2E 25          lda ghost.pos.y
  319  01:C158  C9 18             cmp #(32-8)
  320  01:C15A  B0 06           bcs .update
  321  01:C15C  EE 2E 25          inc ghost.pos.y
  322  01:C15F  4C 62 C1        jmp .update
  323                     
  324  01:C162            .update
  325                     
  326                     ;..................
  327                     ; Buttons
  328                     
  329  01:C162            .check.b1
  330  01:C162  AD 25 25          lda input_state.buttons
  331  01:C165  29 03             and #control.b1.mask
  332  01:C167  C9 03             cmp #control.b1.pressed
  333  01:C169  D0 0B           bne .check.b2
  334  01:C16B            .do_b1
  335  01:C16B  AD 36 25        lda ghostFrame
  336  01:C16E  F0 1C         beq .out
  337  01:C170  CE 36 25        dec ghostFrame
  338  01:C173  4C 8C C1        jmp .out
  339                     
  340  01:C176            .check.b2
  341  01:C176  AD 25 25          lda input_state.buttons
  342  01:C179  29 0C             and #control.b2.mask
  343  01:C17B  C9 0C             cmp #control.b2.pressed
  344  01:C17D  D0 0D           bne .out
  345  01:C17F            .do_b2
  346  01:C17F  AD 36 25        lda ghostFrame
  347  01:C182  C9 03           cmp #$03
  348  01:C184  B0 06         bcs .out
  349  01:C186  EE 36 25        inc ghostFrame
  350  01:C189  4C 8C C1        jmp .out
  351                     
  352  01:C18C            .out
  353                     
  354  01:C18C  60          rts
  355                     
  356                     ;..................]
  357                     ;..................]
  358  01:C18D            DrawGhost:
  359                           PUSHBANK.4 MPR2
                0000          .if (1=0)
                              .endif
                          
                          
       01:C18D  43 08             tma #(MPR2 + 1)
       01:C18F  48                pha
       01:C190  43 08             tma #(MPR2 + 1)
       01:C192  48                pha
       01:C193  43 10             tma #(MPR2 + 2)
       01:C195  48                pha
       01:C196  43 20             tma #(MPR2 + 3)
       01:C198  48                pha
  360                           MAP_BANK.4 #ghost.cell, MPR2
                          
       01:C199  A9 60         lda #bank(#ghost.cell)
       01:C19B  53 04         tam #(MPR2)
       01:C19D  1A            inc a
       01:C19E  53 08         tam #(MPR2 + 1)
       01:C1A0  1A            inc a
       01:C1A1  53 10         tam #(MPR2 + 2)
       01:C1A3  1A            inc a
       01:C1A4  53 20         tam #(MPR2 + 3)
                          
  361                     
  362                           MOVE.b #ia_DMA, int__dma_block.type
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C1A6  A9 E3         lda #ia_DMA
       01:C1A8  8D 00 22      sta int__dma_block.type
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta int__dma_block.type
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx int__dma_block.type
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty int__dma_block.type
                          ;        .endif
                          ;    .endif
                          
  363                           MOVE.w #$0010, int__dma_block.len
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & int__dma_block.len != AX)
       01:C1AB  A9 10         lda #low(#$0010)
       01:C1AD  8D 05 22      sta int__dma_block.len
       01:C1B0  A9 00         lda #high(#$0010)
       01:C1B2  8D 06 22      sta int__dma_block.len + 1
                              .endif
                          
                0000          .if (int__dma_block.len = AX & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.len = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (int__dma_block.len = AY & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.len = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (int__dma_block.len = XY & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.len = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & int__dma_block.len != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & int__dma_block.len != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & int__dma_block.len != AX )
                              .endif
                          
                          
  364                           MOVE.w #vdata_port, int__dma_block.dest
                              ;.fail 2
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (2=1)
                              .endif
                          
                              ;source=#
                0001          .if (2=2 & int__dma_block.dest != AX)
       01:C1B5  A9 02         lda #low(#vdata_port)
       01:C1B7  8D 03 22      sta int__dma_block.dest
       01:C1BA  A9 00         lda #high(#vdata_port)
       01:C1BC  8D 04 22      sta int__dma_block.dest + 1
                              .endif
                          
                0000          .if (int__dma_block.dest = AX & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.dest = AX & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (int__dma_block.dest = AY & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.dest = AY & (2 = 3 | 2 = 6))
                              .endif
                          
                0000          .if (int__dma_block.dest = XY & 2 = 2)
                              .endif
                          
                0000          .if (int__dma_block.dest = XY & (2 = 3 | 2 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (2=3 & int__dma_block.dest != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (2=4 & int__dma_block.dest != AX )
                              .endif
                          
                              ;source=string
                0000          .if (2=5)
                              .endif
                          
                              ;source=label as direct address
                0000          .if (2=6 & int__dma_block.dest != AX )
                              .endif
                          
                          
  365                     
  366  01:C1BF  AE 37 25        ldx ghostFrameOld
  367                           MOVE.b  frame.mouthOffset.x,x , <R3.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1C2  BD D7 C4      lda frame.mouthOffset.x,x
       01:C1C5  85 06         sta <R3.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <R3.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R3.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R3.l
                          ;        .endif
                          ;    .endif
                          
  368                           MOVE.b  frame.mouthOffset.y,x , <R3.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1C7  BD DB C4      lda frame.mouthOffset.y,x
       01:C1CA  85 07         sta <R3.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <R3.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R3.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R3.h
                          ;        .endif
                          ;    .endif
                          
  369                           MOVE.b  frame.addr.lo,x , <A0.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1CC  BD E3 C4      lda frame.addr.lo,x
       01:C1CF  85 12         sta <A0.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <A0.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <A0.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <A0.l
                          ;        .endif
                          ;    .endif
                          
  370                           MOVE.b  frame.addr.hi,x , <A0.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1D1  BD E7 C4      lda frame.addr.hi,x
       01:C1D4  85 13         sta <A0.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <A0.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <A0.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <A0.h
                          ;        .endif
                          ;    .endif
                          
  371                           MOVE.b  ghostOld.pos.x, <R2.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=2)
                              .endif
                          
                0000          .if (6=3)
                              .endif
                          
                0000          .if (6=4)
                              .endif
                          
                0001          .if (6=6)
       01:C1D6  AD 30 25      lda ghostOld.pos.x
       01:C1D9  85 04         sta <R2.l
                              .endif
                          
                          ;    .if (6=5)
                          ;        .if (='Acc')
                          ;        sta <R2.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R2.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R2.l
                          ;        .endif
                          ;    .endif
                          
  372                           MOVE.b  ghostOld.pos.y, <R2.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=2)
                              .endif
                          
                0000          .if (6=3)
                              .endif
                          
                0000          .if (6=4)
                              .endif
                          
                0001          .if (6=6)
       01:C1DB  AD 32 25      lda ghostOld.pos.y
       01:C1DE  85 05         sta <R2.h
                              .endif
                          
                          ;    .if (6=5)
                          ;        .if (='Acc')
                          ;        sta <R2.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R2.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R2.h
                          ;        .endif
                          ;    .endif
                          
  373  01:C1E0  20 CD C3        call CalcScreenMapAddr
  374  01:C1E3  20 75 C2        call ClearPrevMap
  375                     
  376  01:C1E6  AE 36 25        ldx ghostFrame
  377                           MOVE.b  frame.mouthOffset.x,x , <R3.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1E9  BD D7 C4      lda frame.mouthOffset.x,x
       01:C1EC  85 06         sta <R3.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <R3.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R3.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R3.l
                          ;        .endif
                          ;    .endif
                          
  378                           MOVE.b  frame.mouthOffset.y,x , <R3.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1EE  BD DB C4      lda frame.mouthOffset.y,x
       01:C1F1  85 07         sta <R3.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <R3.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R3.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R3.h
                          ;        .endif
                          ;    .endif
                          
  379                           MOVE.b  frame.addr.lo,x , <A0.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1F3  BD E3 C4      lda frame.addr.lo,x
       01:C1F6  85 12         sta <A0.l
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <A0.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <A0.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <A0.l
                          ;        .endif
                          ;    .endif
                          
  380                           MOVE.b  frame.addr.hi,x , <A0.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C1F8  BD E7 C4      lda frame.addr.hi,x
       01:C1FB  85 13         sta <A0.h
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta <A0.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <A0.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <A0.h
                          ;        .endif
                          ;    .endif
                          
  381                           MOVE.b  ghost.pos.x, <R2.l
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=2)
                              .endif
                          
                0000          .if (6=3)
                              .endif
                          
                0000          .if (6=4)
                              .endif
                          
                0001          .if (6=6)
       01:C1FD  AD 2C 25      lda ghost.pos.x
       01:C200  85 04         sta <R2.l
                              .endif
                          
                          ;    .if (6=5)
                          ;        .if (='Acc')
                          ;        sta <R2.l
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R2.l
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R2.l
                          ;        .endif
                          ;    .endif
                          
  382                           MOVE.b  ghost.pos.y, <R2.h
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=2)
                              .endif
                          
                0000          .if (6=3)
                              .endif
                          
                0000          .if (6=4)
                              .endif
                          
                0001          .if (6=6)
       01:C202  AD 2E 25      lda ghost.pos.y
       01:C205  85 05         sta <R2.h
                              .endif
                          
                          ;    .if (6=5)
                          ;        .if (='Acc')
                          ;        sta <R2.h
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <R2.h
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <R2.h
                          ;        .endif
                          ;    .endif
                          
  383  01:C207  20 CD C3        call CalcScreenMapAddr
  384  01:C20A  20 21 C3        call SetNewMap
  385                     
  386                     
  387  01:C20D  20 F2 C3        call CalcScreenTileAddr
  388                           MOVE.b #8, <D0
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0001          .if (2=2)
       01:C210  A9 08         lda #8
       01:C212  85 24         sta <D0
                              .endif
                          
                0000          .if (2=3)
                              .endif
                          
                0000          .if (2=4)
                              .endif
                          
                0000          .if (2=6)
                              .endif
                          
                          ;    .if (2=5)
                          ;        .if (='Acc')
                          ;        sta <D0
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx <D0
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty <D0
                          ;        .endif
                          ;    .endif
                          
  389  01:C214  A2 09           ldx #$9
  390  01:C216  20 19 C4        call DrawEraseRow
  391                           ADD.b #$2, <R0.h      ; $200 + R0.w
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (3=0)
                                      .endif
                0000                  .if (3=1)
                                      .endif
                0000                  .if (3=2)
                                      .endif
                0000                  .if (3=5)
                                      .endif
                0000                  .if (2=5)
                                      .endif
                0000                  .if (2=1)
                                      .endif
                          
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (3=3 | 3=6)
       01:C219  A5 01                 lda <R0.h
       01:C21B  18                    clc
       01:C21C  69 02                 adc #low(#$2)
       01:C21E  85 01                 sta <R0.h
                                  .endif
                          
                0000              .if (3=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  392  01:C220            .loop
  393  01:C220  A2 09           ldx #$9
  394                           MOVE.w <A0, int__dma_block.source
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & int__dma_block.source != AX)
                              .endif
                          
                0000          .if (int__dma_block.source = AX & 6 = 2)
                              .endif
                          
                0000          .if (int__dma_block.source = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (int__dma_block.source = AY & 6 = 2)
                              .endif
                          
                0000          .if (int__dma_block.source = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (int__dma_block.source = XY & 6 = 2)
                              .endif
                          
                0000          .if (int__dma_block.source = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & int__dma_block.source != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & int__dma_block.source != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & int__dma_block.source != AX )
       01:C222  A5 12         lda <A0
       01:C224  8D 01 22      sta int__dma_block.source
       01:C227  A5 13         lda <A0 + 1
       01:C229  8D 02 22      sta int__dma_block.source + 1
                              .endif
                          
                          
  395  01:C22C  20 49 C4        call DrawTile
  396                           ADD.b #$2, <R0.h      ; $200 + R0.w
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (3=0)
                                      .endif
                0000                  .if (3=1)
                                      .endif
                0000                  .if (3=2)
                                      .endif
                0000                  .if (3=5)
                                      .endif
                0000                  .if (2=5)
                                      .endif
                0000                  .if (2=1)
                                      .endif
                          
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (3=3 | 3=6)
       01:C22F  A5 01                 lda <R0.h
       01:C231  18                    clc
       01:C232  69 02                 adc #low(#$2)
       01:C234  85 01                 sta <R0.h
                                  .endif
                          
                0000              .if (3=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  397                           ADD.b.w #$90, <A0
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C236  A9 90                 lda #low(#$90)
       01:C238  18                    clc
       01:C239  65 12                 adc <A0
       01:C23B  85 12                 sta <A0
       01:C23D  90 02                 bcc .skip00090
       01:C23F  E6 13                 inc <A0 + 1
       01:C241            .skip00090
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  398  01:C241  C6 24           dec <D0
  399  01:C243  D0 DB         bne .loop
  400  01:C245  A2 09           ldx #$9
  401  01:C247  20 19 C4        call DrawEraseRow
  402                     
  403                           MOVE.w ghost.pos.y, ghostOld.pos.y
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & ghostOld.pos.y != AX)
                              .endif
                          
                0000          .if (ghostOld.pos.y = AX & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.y = AY & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.y = XY & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.y = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & ghostOld.pos.y != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & ghostOld.pos.y != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & ghostOld.pos.y != AX )
       01:C24A  AD 2E 25      lda ghost.pos.y
       01:C24D  8D 32 25      sta ghostOld.pos.y
       01:C250  AD 2F 25      lda ghost.pos.y + 1
       01:C253  8D 33 25      sta ghostOld.pos.y + 1
                              .endif
                          
                          
  404                           MOVE.w ghost.pos.x, ghostOld.pos.x
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & ghostOld.pos.x != AX)
                              .endif
                          
                0000          .if (ghostOld.pos.x = AX & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.x = AY & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (ghostOld.pos.x = XY & 6 = 2)
                              .endif
                          
                0000          .if (ghostOld.pos.x = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & ghostOld.pos.x != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & ghostOld.pos.x != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & ghostOld.pos.x != AX )
       01:C256  AD 2C 25      lda ghost.pos.x
       01:C259  8D 30 25      sta ghostOld.pos.x
       01:C25C  AD 2D 25      lda ghost.pos.x + 1
       01:C25F  8D 31 25      sta ghostOld.pos.x + 1
                              .endif
                          
                          
  405                           MOVE.b ghostFrame, ghostFrameOld
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=2)
                              .endif
                          
                0000          .if (6=3)
                              .endif
                          
                0000          .if (6=4)
                              .endif
                          
                0001          .if (6=6)
       01:C262  AD 36 25      lda ghostFrame
       01:C265  8D 37 25      sta ghostFrameOld
                              .endif
                          
                          ;    .if (6=5)
                          ;        .if (='Acc')
                          ;        sta ghostFrameOld
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx ghostFrameOld
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty ghostFrameOld
                          ;        .endif
                          ;    .endif
                          
  406                     
  407                           PULLBANK.4 MPR2
                0000          .if (1=0)
                              .endif
                          
       01:C268  68                pla
       01:C269  53 20             tam #(MPR2 + 3)
       01:C26B  68                pla
       01:C26C  53 10             tam #(MPR2 + 2)
       01:C26E  68                pla
       01:C26F  53 08             tam #(MPR2 + 1)
       01:C271  68                pla
       01:C272  53 04             tam #(MPR2)
  408  01:C274  60          rts
  409                     
  410                     ;..................]
  411                     ;..................]
  412  01:C275            ClearPrevMap:
  413                             sVDC.reg MAWR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C275  A9 00         lda #MAWR
       01:C277  85 4C         sta <vdc_reg
       01:C279  03 00         st0 #MAWR
       01:C27B  A5 00         lda <R0
       01:C27D  8D 02 00      sta $0002
       01:C280  A5 01         lda <R0+1
       01:C282  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  414                             sVDC.reg MARR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C285  A9 01         lda #MARR
       01:C287  85 4C         sta <vdc_reg
       01:C289  03 01         st0 #MARR
       01:C28B  A5 00         lda <R0
       01:C28D  8D 02 00      sta $0002
       01:C290  A5 01         lda <R0+1
       01:C292  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  415                             sVDC.reg VRWR    
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C295  A9 02         lda #VRWR
       01:C297  85 4C         sta <vdc_reg
       01:C299  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  416                     
  417                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C29B  AD 02 00      lda $0002
       01:C29E  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  418  01:C2A1  AD 03 00          lda $0003
  419  01:C2A4  29 7F             and #$7f
  420  01:C2A6  8D 03 00          sta $0003
  421                     
  422                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C2A9  AD 02 00      lda $0002
       01:C2AC  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  423  01:C2AF  AD 03 00          lda $0003
  424  01:C2B2  29 7F             and #$7f
  425  01:C2B4  8D 03 00          sta $0003
  426                     
  427                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C2B7  AD 02 00      lda $0002
       01:C2BA  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  428  01:C2BD  AD 03 00          lda $0003
  429  01:C2C0  29 7F             and #$7f
  430  01:C2C2  8D 03 00          sta $0003
  431                     
  432                             ADD.b.w #$20, <R0
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C2C5  A9 20                 lda #low(#$20)
       01:C2C7  18                    clc
       01:C2C8  65 00                 adc <R0
       01:C2CA  85 00                 sta <R0
       01:C2CC  90 02                 bcc .skip00101
       01:C2CE  E6 01                 inc <R0 + 1
       01:C2D0            .skip00101
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  433                             sVDC.reg MAWR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C2D0  A9 00         lda #MAWR
       01:C2D2  85 4C         sta <vdc_reg
       01:C2D4  03 00         st0 #MAWR
       01:C2D6  A5 00         lda <R0
       01:C2D8  8D 02 00      sta $0002
       01:C2DB  A5 01         lda <R0+1
       01:C2DD  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  434                             sVDC.reg MARR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C2E0  A9 01         lda #MARR
       01:C2E2  85 4C         sta <vdc_reg
       01:C2E4  03 01         st0 #MARR
       01:C2E6  A5 00         lda <R0
       01:C2E8  8D 02 00      sta $0002
       01:C2EB  A5 01         lda <R0+1
       01:C2ED  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  435                             sVDC.reg VRWR    
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C2F0  A9 02         lda #VRWR
       01:C2F2  85 4C         sta <vdc_reg
       01:C2F4  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  436                     
  437                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C2F6  AD 02 00      lda $0002
       01:C2F9  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  438  01:C2FC  AD 03 00          lda $0003
  439  01:C2FF  29 7F             and #$7f
  440  01:C301  8D 03 00          sta $0003
  441                     
  442                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C304  AD 02 00      lda $0002
       01:C307  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  443  01:C30A  AD 03 00          lda $0003
  444  01:C30D  29 7F             and #$7f
  445  01:C30F  8D 03 00          sta $0003
  446                     
  447                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C312  AD 02 00      lda $0002
       01:C315  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  448  01:C318  AD 03 00          lda $0003
  449  01:C31B  29 7F             and #$7f
  450  01:C31D  8D 03 00          sta $0003
  451  01:C320  60         rts
  452                     
  453                     ;..................]
  454                     ;..................]
  455  01:C321            SetNewMap:
  456                             sVDC.reg MAWR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C321  A9 00         lda #MAWR
       01:C323  85 4C         sta <vdc_reg
       01:C325  03 00         st0 #MAWR
       01:C327  A5 00         lda <R0
       01:C329  8D 02 00      sta $0002
       01:C32C  A5 01         lda <R0+1
       01:C32E  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  457                             sVDC.reg MARR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C331  A9 01         lda #MARR
       01:C333  85 4C         sta <vdc_reg
       01:C335  03 01         st0 #MARR
       01:C337  A5 00         lda <R0
       01:C339  8D 02 00      sta $0002
       01:C33C  A5 01         lda <R0+1
       01:C33E  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  458                             sVDC.reg VRWR    
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C341  A9 02         lda #VRWR
       01:C343  85 4C         sta <vdc_reg
       01:C345  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  459                     
  460                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C347  AD 02 00      lda $0002
       01:C34A  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  461  01:C34D  AD 03 00          lda $0003
  462  01:C350  09 80             ora #$80
  463  01:C352  8D 03 00          sta $0003
  464                     
  465                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C355  AD 02 00      lda $0002
       01:C358  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  466  01:C35B  AD 03 00          lda $0003
  467  01:C35E  09 80             ora #$80
  468  01:C360  8D 03 00          sta $0003
  469                     
  470                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C363  AD 02 00      lda $0002
       01:C366  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  471  01:C369  AD 03 00          lda $0003
  472  01:C36C  09 80             ora #$80
  473  01:C36E  8D 03 00          sta $0003
  474                     
  475                             ADD.b.w #$20, <R0
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C371  A9 20                 lda #low(#$20)
       01:C373  18                    clc
       01:C374  65 00                 adc <R0
       01:C376  85 00                 sta <R0
       01:C378  90 02                 bcc .skip00114
       01:C37A  E6 01                 inc <R0 + 1
       01:C37C            .skip00114
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  476                             sVDC.reg MAWR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C37C  A9 00         lda #MAWR
       01:C37E  85 4C         sta <vdc_reg
       01:C380  03 00         st0 #MAWR
       01:C382  A5 00         lda <R0
       01:C384  8D 02 00      sta $0002
       01:C387  A5 01         lda <R0+1
       01:C389  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  477                             sVDC.reg MARR, <R0
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C38C  A9 01         lda #MARR
       01:C38E  85 4C         sta <vdc_reg
       01:C390  03 01         st0 #MARR
       01:C392  A5 00         lda <R0
       01:C394  8D 02 00      sta $0002
       01:C397  A5 01         lda <R0+1
       01:C399  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  478                             sVDC.reg VRWR    
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C39C  A9 02         lda #VRWR
       01:C39E  85 4C         sta <vdc_reg
       01:C3A0  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  479                     
  480                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C3A2  AD 02 00      lda $0002
       01:C3A5  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  481  01:C3A8  AD 03 00          lda $0003
  482  01:C3AB  09 80             ora #$80
  483  01:C3AD  8D 03 00          sta $0003
  484                     
  485                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C3B0  AD 02 00      lda $0002
       01:C3B3  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  486  01:C3B6  AD 03 00          lda $0003
  487  01:C3B9  09 80             ora #$80
  488  01:C3BB  8D 03 00          sta $0003
  489                     
  490                             MOVE.b $0002, $0002
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (3=2)
                              .endif
                          
                0001          .if (3=3)
       01:C3BE  AD 02 00      lda $0002
       01:C3C1  8D 02 00      sta $0002
                              .endif
                          
                0000          .if (3=4)
                              .endif
                          
                0000          .if (3=6)
                              .endif
                          
                          ;    .if (3=5)
                          ;        .if (='Acc')
                          ;        sta $0002
                          ;        .endif
                          ;        .if (='IX')
                          ;        stx $0002
                          ;        .endif
                          ;        .if (='IY')
                          ;        sty $0002
                          ;        .endif
                          ;    .endif
                          
  491  01:C3C4  AD 03 00          lda $0003
  492  01:C3C7  09 80             ora #$80
  493  01:C3C9  8D 03 00          sta $0003
  494                             
  495  01:C3CC  60         rts
  496                     
  497                     ;..................]
  498                     ;..................]
  499  01:C3CD            CalcScreenMapAddr:
  500                     
  501                           ; original: (Y*0x20) + x
  502                           ; modified: (Y<<5) + x
  503                           
  504  01:C3CD  A5 05           lda <R2.h         ; Y
  505  01:C3CF  18              clc
  506  01:C3D0  65 07           adc <R3.h         ; Y offset
  507  01:C3D2  18              clc
  508  01:C3D3  0A              asl a
  509  01:C3D4  0A              asl a
  510  01:C3D5  0A              asl a
  511  01:C3D6  64 01           stz <R0.h
  512  01:C3D8  0A              asl a
  513  01:C3D9  26 01           rol <R0.h
  514  01:C3DB  0A              asl a
  515  01:C3DC  26 01           rol <R0.h
  516  01:C3DE  85 00           sta <R0.l
  517                     
  518  01:C3E0  A5 04           lda <R2.l         ; X
  519  01:C3E2  05 00           ora <R0.l
  520  01:C3E4  85 00           sta <R0.l
  521                     
  522                           ADD.b.w <R3.l,<R0 ; X offset
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0000          .if (3=2) ;src=#immd
                              .endif
                          
                0001          .if (3=3 | 3=6) ;src=addr/label
                0001              .if (6=3 | 6=6)
       01:C3E6  A5 06                 lda <R3.l
       01:C3E8  18                    clc
       01:C3E9  65 00                 adc <R0
       01:C3EB  85 00                 sta <R0
       01:C3ED  90 02                 bcc .skip00121
       01:C3EF  E6 01                 inc <R0 + 1
       01:C3F1            .skip00121
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (3=4) ;src=indirect
                              .endif
                          
                          
  523                     
  524                     
  525  01:C3F1  60          rts
  526                     ;..................]
  527                     ;..................]
  528  01:C3F2            CalcScreenTileAddr:
  529                     
  530                           ; original: (((Y*0x20) + x) * 0x10) + 0x1000
  531                           ;        Note: the "+ 0x1000" is the tile address offset in vram
  532                           ; mod 1:    (((Y<<5)   + x) << 4) + 0x1000
  533                           ; mod 2:    (Y<<9) + (x << 4) + 0x1000
  534                           ; mod 3:    (Y@msb<<1) + (x << 4) + 0x10@msb
  535                     
  536  01:C3F2  AD 2C 25        lda ghost.pos.x
  537  01:C3F5  64 01           stz <R0+1             
  538  01:C3F7  0A              asl a
  539  01:C3F8  0A              asl a
  540  01:C3F9  0A              asl a
  541  01:C3FA  0A              asl a
  542  01:C3FB  26 01           rol <R0+1
  543  01:C3FD  09 08           ora #$08
  544  01:C3FF  85 00           sta <R0
  545  01:C401  AD 2E 25        lda ghost.pos.y
  546  01:C404  0A              asl a
  547  01:C405  05 01           ora <R0+1
  548  01:C407  69 10           adc #$10
  549  01:C409  85 01           sta <R0+1
  550                     
  551                           SUB.w #$810, <R0  ; Do a final offset. This allows off screen positioning. Y = -0x8, X = -0x10
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C40B  A5 00                 lda <R0
       01:C40D  38                    sec
       01:C40E  E9 10                 sbc #low(#$810)
       01:C410  85 00                 sta <R0
       01:C412  A5 01                 lda <R0 + 1
       01:C414  E9 08                 sbc #high(#$810)
       01:C416  85 01                 sta <R0 + 1
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  552  01:C418  60          rts
  553                     
  554                     ;..................]
  555                     ;..................]
  556  01:C419            DrawEraseRow:
  557                             MOVE.w <R0, <A1
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & <A1 != AX)
                              .endif
                          
                0000          .if (<A1 = AX & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (<A1 = AY & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (<A1 = XY & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & <A1 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & <A1 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & <A1 != AX )
       01:C419  A5 00         lda <R0
       01:C41B  85 14         sta <A1
       01:C41D  A5 01         lda <R0 + 1
       01:C41F  85 15         sta <A1 + 1
                              .endif
                          
                          
  558  01:C421            .loop
  559                             sVDC.reg MAWR, <A1
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C421  A9 00         lda #MAWR
       01:C423  85 4C         sta <vdc_reg
       01:C425  03 00         st0 #MAWR
       01:C427  A5 14         lda <A1
       01:C429  8D 02 00      sta $0002
       01:C42C  A5 15         lda <A1+1
       01:C42E  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  560                             sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C431  A9 02         lda #VRWR
       01:C433  85 4C         sta <vdc_reg
       01:C435  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  561  01:C437  20 C4 C4          call DrawEraseTile
  562                             ADD.b.w #$10, <A1
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C43A  A9 10                 lda #low(#$10)
       01:C43C  18                    clc
       01:C43D  65 14                 adc <A1
       01:C43F  85 14                 sta <A1
       01:C441  90 02                 bcc .skip00126
       01:C443  E6 15                 inc <A1 + 1
       01:C445            .skip00126
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  563  01:C445  CA                dex
  564  01:C446  D0 D9           bne .loop
  565  01:C448  60          rts
  566                     
  567                     ;..................]
  568                     ;..................]
  569  01:C449            DrawTile:
  570                             MOVE.w <R0, <A1
                              ;.fail 6
                0000          .if (2=0)
                              .endif
                          
                0000          .if (2=1)
                              .endif
                          
                0000          .if (2>2)
                              .endif
                          
                          
                0000          .if (6=1)
                              .endif
                          
                              ;source=#
                0000          .if (6=2 & <A1 != AX)
                              .endif
                          
                0000          .if (<A1 = AX & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = AX & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (<A1 = AY & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = AY & (6 = 3 | 6 = 6))
                              .endif
                          
                0000          .if (<A1 = XY & 6 = 2)
                              .endif
                          
                0000          .if (<A1 = XY & (6 = 3 | 6 = 6))
                              .endif
                          
                          
                              ;source=full ADDR
                0000          .if (6=3 & <A1 != AX )
                              .endif
                          
                              ;source=indirect
                0000          .if (6=4 & <A1 != AX )
                              .endif
                          
                              ;source=string
                0000          .if (6=5)
                              .endif
                          
                              ;source=label as direct address
                0001          .if (6=6 & <A1 != AX )
       01:C449  A5 00         lda <R0
       01:C44B  85 14         sta <A1
       01:C44D  A5 01         lda <R0 + 1
       01:C44F  85 15         sta <A1 + 1
                              .endif
                          
                          
  571                             sVDC.reg MAWR, <A1
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C451  A9 00         lda #MAWR
       01:C453  85 4C         sta <vdc_reg
       01:C455  03 00         st0 #MAWR
       01:C457  A5 14         lda <A1
       01:C459  8D 02 00      sta $0002
       01:C45C  A5 15         lda <A1+1
       01:C45E  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  572                             sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C461  A9 02         lda #VRWR
       01:C463  85 4C         sta <vdc_reg
       01:C465  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  573  01:C467  20 C4 C4          call DrawEraseTile
  574                             ADD.b.w #$10, <A1
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C46A  A9 10                 lda #low(#$10)
       01:C46C  18                    clc
       01:C46D  65 14                 adc <A1
       01:C46F  85 14                 sta <A1
       01:C471  90 02                 bcc .skip00130
       01:C473  E6 15                 inc <A1 + 1
       01:C475            .skip00130
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  575                     
  576  01:C475            .loop
  577                             sVDC.reg MAWR, <A1
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C475  A9 00         lda #MAWR
       01:C477  85 4C         sta <vdc_reg
       01:C479  03 00         st0 #MAWR
       01:C47B  A5 14         lda <A1
       01:C47D  8D 02 00      sta $0002
       01:C480  A5 15         lda <A1+1
       01:C482  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  578                             sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C485  A9 02         lda #VRWR
       01:C487  85 4C         sta <vdc_reg
       01:C489  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  579                             DMA.call
       01:C48B  20 00 22          jsr int__dma_block
  580                             ADD.b.w #$10, int__dma_block.source
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C48E  A9 10                 lda #low(#$10)
       01:C490  18                    clc
       01:C491  6D 01 22              adc int__dma_block.source
       01:C494  8D 01 22              sta int__dma_block.source
       01:C497  90 03                 bcc .skip00134
       01:C499  EE 02 22              inc int__dma_block.source + 1
       01:C49C            .skip00134
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  581                             ADD.b.w #$10, <A1
                          
                                  ;first error checks
                0000                  .if (2<>2)
                                      .endif
                0000                  .if (6=0)
                                      .endif
                0000                  .if (6=1)
                                      .endif
                0000                  .if (6=2)
                                      .endif
                0000                  .if (6=5)
                                      .endif
                          
                0001          .if (2=2) ;src=#immd
                0001              .if (6=3 | 6=6)
       01:C49C  A9 10                 lda #low(#$10)
       01:C49E  18                    clc
       01:C49F  65 14                 adc <A1
       01:C4A1  85 14                 sta <A1
       01:C4A3  90 02                 bcc .skip00135
       01:C4A5  E6 15                 inc <A1 + 1
       01:C4A7            .skip00135
                                  .endif
                          
                0000              .if (6=4)    ;indirect dest
                                  .endif
                              .endif
                          
                0000          .if (2=3 | 2=6) ;src=addr/label
                              .endif
                          
                0000          .if (2=4) ;src=indirect
                              .endif
                          
                          
  582  01:C4A7  CA                dex
  583  01:C4A8  D0 CB           bne .loop
  584                             sVDC.reg MAWR, <A1
                          
                0000          .if    (6=1)
                              .endif
                          
                0000          .if    (2=1)
                              .endif
                          
                0000          .if    (2=2 & 6 = 2)
                               .endif
                          
                0000          .if    (2=3 & 6 = 6)
                              .endif
                          
                0001          .if    (2=2 & 6 = 6)
       01:C4AA  A9 00         lda #MAWR
       01:C4AC  85 4C         sta <vdc_reg
       01:C4AE  03 00         st0 #MAWR
       01:C4B0  A5 14         lda <A1
       01:C4B2  8D 02 00      sta $0002
       01:C4B5  A5 15         lda <A1+1
       01:C4B7  8D 03 00      sta $0003
                              .endif
                          
                0000          .if    (2=2 & 6 = 3)
                              .endif
                          
  585                             sVDC.reg VRWR
                          
                0000          .if    (0=1)
                              .endif
                          
                0001          .if    (1=1)
       01:C4BA  A9 02         lda #VRWR
       01:C4BC  85 4C         sta <vdc_reg
       01:C4BE  03 02         st0 #VRWR
                              .endif
                          
                0000          .if    (1=2 & 0 = 2)
                               .endif
                          
                0000          .if    (1=3 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 6)
                              .endif
                          
                0000          .if    (1=2 & 0 = 3)
                              .endif
                          
  586  01:C4C0  20 C4 C4          call DrawEraseTile
  587                     
  588  01:C4C3  60          rts
  589                     
  590                     ;..................]
  591                     ;..................]
  592  01:C4C4            DrawEraseTile:
  593                     
  594  01:C4C4  13 00             st1 #$00
  595  01:C4C6  23 00             st2 #$00
  596  01:C4C8  23 00             st2 #$00
  597  01:C4CA  23 00             st2 #$00
  598  01:C4CC  23 00             st2 #$00
  599  01:C4CE  23 00             st2 #$00
  600  01:C4D0  23 00             st2 #$00
  601  01:C4D2  23 00             st2 #$00
  602  01:C4D4  23 00             st2 #$00
  603  01:C4D6  60        rts
  604                     
  605                     ;.......................................
  606  01:C4D7            frame.mouthOffset.x:
  607  01:C4D7  04 04 05    .db 4,4,5,5
       01:C4DA  05        
  608  01:C4DB            frame.mouthOffset.y:
  609  01:C4DB  01 01 01    .db 1,1,1,2
       01:C4DE  02        
  610                     
  611  01:C4DF            frame.addr.bank:
  612  01:C4DF  60 60 60    .db bank(ghost.cell),bank(ghost.cell),bank(ghost.cell),bank(ghost.cell)
       01:C4E2  60        
  613  01:C4E3            frame.addr.lo:
  614  01:C4E3  00 80 00    .db low(ghost.cell),low(ghost.cell+$480),low(ghost.cell+$900),low(ghost.cell+$d80)
       01:C4E6  80        
  615  01:C4E7            frame.addr.hi:
  616  01:C4E7  40 44 49    .db high(ghost.cell),high(ghost.cell+$480),high(ghost.cell+$900),high(ghost.cell+$d80)
       01:C4EA  4D        
  617                     
  618                     ;Main end
  619                     ;//...................................................................
  620                     
  621                     
  622                     
  623                     
  624                     ;/////////////////////////////////////////////////////////////////////////////////
  625                     ;/////////////////////////////////////////////////////////////////////////////////
  626                     ;/////////////////////////////////////////////////////////////////////////////////
  627                     ;
  628                     
  629                     ;....................................
  630           C4EB          .code
  631           0002          .bank $02, "Subcode 1"
  632           8000          .org $8000
  633                     ;....................................
  634                     
  635                     
  636                       IncludeBinary Font.cell, "../base_func/video/print/font.dat"
                          
       02:8000            start_00138:
       02:8000            Font.cell: .incbin "../base_func/video/print/font.dat"
       02:8C00            end_00138:
                          
                0C00      Font.cell.size = sizeof(Font.cell)
                          
  637                     
  638  02:8C00  00 00 33  Font.pal: .db $00,$00,$33,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$ff,$01,$f6,$01
       02:8C03  01 FF 01  
       02:8C06  FF 01 FF  
       02:8C09  01 FF 01  
       02:8C0C  FF 01 F6  
       02:8C0F  01        
  639           0010      Font.pal.size = sizeof(Font.pal)
  640                     
  641                     
  642                         ;// Support files for MAIN
#[2]   ../base_func/init/InitHW.asm
  643                         .include "../base_func/init/InitHW.asm"
    1                     
    2                     ;...................................
    3  02:8C10            init_audio
    4  02:8C10  A2 05     				ldx #$05
    5  02:8C12            .loop
    6  02:8C12  8E 00 08  				stx $800
    7  02:8C15  9C 01 08  				stz $801
    8  02:8C18  9C 02 08  				stz $802
    9  02:8C1B  9C 03 08  				stz $803
   10  02:8C1E  9C 04 08  				stz $804
   11  02:8C21  9C 05 08  				stz $805
   12  02:8C24  9C 06 08  				stz $806
   13  02:8C27  9C 07 08  				stz $807
   14  02:8C2A  9C 08 08  				stz $808
   15  02:8C2D  9C 09 08  				stz $809
   16  02:8C30  CA        				dex
   17  02:8C31  10 DF     			bpl .loop
   18  02:8C33  60        	rts
   19                     	
   20                     ;...................................
   21  02:8C34            init_video
   22                     				
   23  02:8C34  82        				clx
   24  02:8C35  A0 80     				ldy #$80
   25  02:8C37  03 00     				st0 #$00
   26  02:8C39  13 00     				st1 #$00
   27  02:8C3B  23 00     				st2 #$00
   28  02:8C3D  03 02     				st0 #$02
   29                     				
   30  02:8C3F            .loop
   31  02:8C3F  13 00     				st1 #$00
   32  02:8C41  23 00     				st2 #$00
   33  02:8C43  CA        				dex
   34  02:8C44  D0 F9     			bne .loop
   35  02:8C46  88        				dey
   36  02:8C47  D0 F6     			bne .loop
   37                     		
   38  02:8C49  82        				clx
   39  02:8C4A  9C 02 04  				stz $402
   40  02:8C4D  9C 03 04  				stz $403
   41  02:8C50            .loop1
   42  02:8C50  9C 04 04  				stz $404
   43  02:8C53  9C 05 04  				stz $405
   44  02:8C56  E8        				inx
   45  02:8C57  D0 F7     			bne .loop1
   46                     		
   47  02:8C59  60        	rts
   48                     
   49                     
#[1]   ghosthouse_build_1.asm
  644                     
  645                     
  646                     ;..............................................................................................................
  647                     ;..............................................................................................................
  648                     ;..............................................................................................................
  649                     ;..............................................................................................................
  650                     ;Bank 1 end
  651                     
  652                     
  653                     ;/////////////////////////////////////////////////////////////////////////////////
  654                     ;/////////////////////////////////////////////////////////////////////////////////
  655                     ;/////////////////////////////////////////////////////////////////////////////////
  656                     ;
  657                     ;// Data/Code
  658                     
  659                     
  660                     ;/////////////////////////////////////////////////////////////////////////////////
  661                     ;
  662                     
  663                     ;....................................
  664           0050        .bank $50, "ghosthouse"
  665           4000          .org $4000
  666                     ;....................................
  667           4000          .page 2
  668                         IncludeBinary ghosthouse.cell, "../assets/BG_tiles/ghosthouse.tbin"
                          
       50:4000            start_00139:
       50:4000            ghosthouse.cell: .incbin "../assets/BG_tiles/ghosthouse.tbin"
       53:5000            end_00139:
                          
                7000      ghosthouse.cell.size = sizeof(ghosthouse.cell)
                          
  669                     
  670           4000          .page 2
  671                         IncludeBinary ghosthouse.map,  "../assets/BG_map/ghosthouse.mbin"
                          
       53:5000            start_00140:
       53:5000            ghosthouse.map: .incbin "../assets/BG_map/ghosthouse.mbin"
       53:5700            end_00140:
                          
                0700      ghosthouse.map.size = sizeof(ghosthouse.map)
                          
  672                     
  673           4000          .page 2
  674                         IncludeBinary ghosthouse.pal,  "../assets/BG_pal/pce.pbin"
                          
       53:5700            start_00141:
       53:5700            ghosthouse.pal: .incbin "../assets/BG_pal/pce.pbin"
       53:5900            end_00141:
                          
                0200      ghosthouse.pal.size = sizeof(ghosthouse.pal)
                          
  675                     
  676                     ;....................................
  677           0060        .bank $60, "ghost"
  678           4000          .org $4000
  679                     ;....................................
  680           4000          .page 2
  681                         IncludeBinary ghost.cell, "../assets/ghost/ghost.tbin"
                          
       60:4000            start_00142:
       60:4000            ghost.cell: .incbin "../assets/ghost/ghost.tbin"
       60:5200            end_00142:
                          
                1200      ghost.cell.size = sizeof(ghost.cell)
                          
  682                     
  683                     
  684                     
  685                     ;....................................
  686                         ;Pad the Rom
  687           007F          .bank $7f, "PAD"
  688                     ;....................................
  689                     
  690                     
  691                     ;END OF FILE
